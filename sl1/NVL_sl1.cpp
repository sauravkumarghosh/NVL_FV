/******************************
  Program "NVL_sl1.m" compiled by "Caching Murphi Release 5.5.0"

  Murphi Last Compiled date: "Jan 24 2023"
 ******************************/

/********************
  Parameter
 ********************/
#define MURPHI_VERSION "Caching Murphi Release 5.5.0"
#define MURPHI_DATE "Jan 24 2023"
#define PROTOCOL_NAME "NVL_sl1"
#define BITS_IN_WORLD 13016
#define ALIGN
#define HASHC

/********************
  Include
 ********************/
#include "mu_prolog.hpp"

/********************
  Decl declaration
 ********************/

class mu_1_SOTUPIAgents: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_SOTUPIAgents& val) { return mu__byte::operator=((int) val); };
  mu_1_SOTUPIAgents (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_SOTUPIAgents (void): mu__byte(0, 0, 1) {};
  mu_1_SOTUPIAgents (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_SOTUPIAgents mu_1_SOTUPIAgents_undefined_var;

class mu_1_UPIAgents: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_UPIAgents& val) { return mu__byte::operator=((int) val); };
  mu_1_UPIAgents (const char *name, int os): mu__byte(0, 2, 2, name, os) {};
  mu_1_UPIAgents (void): mu__byte(0, 2, 2) {};
  mu_1_UPIAgents (int val): mu__byte(0, 2, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_UPIAgents mu_1_UPIAgents_undefined_var;

class mu_1_SOTIDICAgents: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_SOTIDICAgents& val) { return mu__byte::operator=((int) val); };
  mu_1_SOTIDICAgents (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_SOTIDICAgents (void): mu__byte(0, 0, 1) {};
  mu_1_SOTIDICAgents (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_SOTIDICAgents mu_1_SOTIDICAgents_undefined_var;

class mu_1_IDICAgents: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_IDICAgents& val) { return mu__byte::operator=((int) val); };
  mu_1_IDICAgents (const char *name, int os): mu__byte(0, 2, 2, name, os) {};
  mu_1_IDICAgents (void): mu__byte(0, 2, 2) {};
  mu_1_IDICAgents (int val): mu__byte(0, 2, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_IDICAgents mu_1_IDICAgents_undefined_var;

class mu_1_Agents: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Agents& val) { return mu__byte::operator=((int) val); };
  mu_1_Agents (const char *name, int os): mu__byte(0, 2, 2, name, os) {};
  mu_1_Agents (void): mu__byte(0, 2, 2) {};
  mu_1_Agents (int val): mu__byte(0, 2, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Agents mu_1_Agents_undefined_var;

class mu_1_Agent_countp1: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Agent_countp1& val) { return mu__byte::operator=((int) val); };
  mu_1_Agent_countp1 (const char *name, int os): mu__byte(0, 6, 3, name, os) {};
  mu_1_Agent_countp1 (void): mu__byte(0, 6, 3) {};
  mu_1_Agent_countp1 (int val): mu__byte(0, 6, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Agent_countp1 mu_1_Agent_countp1_undefined_var;

class mu_1_SOTFTSUPIAgents: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_SOTFTSUPIAgents& val) { return mu__byte::operator=((int) val); };
  mu_1_SOTFTSUPIAgents (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1_SOTFTSUPIAgents (void): mu__byte(0, 1, 2) {};
  mu_1_SOTFTSUPIAgents (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_SOTFTSUPIAgents mu_1_SOTFTSUPIAgents_undefined_var;

class mu_1_SOTFTSIDICAgents: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_SOTFTSIDICAgents& val) { return mu__byte::operator=((int) val); };
  mu_1_SOTFTSIDICAgents (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1_SOTFTSIDICAgents (void): mu__byte(0, 1, 2) {};
  mu_1_SOTFTSIDICAgents (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_SOTFTSIDICAgents mu_1_SOTFTSIDICAgents_undefined_var;

class mu_1_RTID: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_RTID& val) { return mu__byte::operator=((int) val); };
  mu_1_RTID (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_RTID (void): mu__byte(0, 0, 1) {};
  mu_1_RTID (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_RTID mu_1_RTID_undefined_var;

class mu_1_HTID: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_HTID& val) { return mu__byte::operator=((int) val); };
  mu_1_HTID (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1_HTID (void): mu__byte(0, 1, 2) {};
  mu_1_HTID (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_HTID mu_1_HTID_undefined_var;

class mu_1_Address: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Address& val) { return mu__byte::operator=((int) val); };
  mu_1_Address (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_Address (void): mu__byte(0, 0, 1) {};
  mu_1_Address (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Address mu_1_Address_undefined_var;

class mu_1_MonitorSize: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_MonitorSize& val) { return mu__byte::operator=((int) val); };
  mu_1_MonitorSize (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_MonitorSize (void): mu__byte(0, 0, 1) {};
  mu_1_MonitorSize (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_MonitorSize mu_1_MonitorSize_undefined_var;

class mu_1_Word: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Word& val) { return mu__byte::operator=((int) val); };
  mu_1_Word (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_Word (void): mu__byte(0, 0, 1) {};
  mu_1_Word (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Word mu_1_Word_undefined_var;

class mu_1_Data: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Data& val) { return mu__byte::operator=((int) val); };
  mu_1_Data (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_Data (void): mu__byte(0, 0, 1) {};
  mu_1_Data (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Data mu_1_Data_undefined_var;

class mu_1_Line
{
 public:
  mu_1_Data array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1_Line (const char *n, int os) { set_self(n, os); };
  mu_1_Line ( void ) {};
  virtual ~mu_1_Line ();
  mu_1_Data& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1_Line& operator= (const mu_1_Line& from)
  {
      array[0].value(from.array[0].value());
    return *this;
  }

friend int CompareWeight(mu_1_Line& a, mu_1_Line& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1_Line& a, mu_1_Line& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1_Line::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_Line::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_Line::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1_Line::~mu_1_Line()
{
}
/*** end array declaration ***/
mu_1_Line mu_1_Line_undefined_var;

class mu_1_BE
{
 public:
  mu_0_boolean array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1_BE (const char *n, int os) { set_self(n, os); };
  mu_1_BE ( void ) {};
  virtual ~mu_1_BE ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1_BE& operator= (const mu_1_BE& from)
  {
      array[0].value(from.array[0].value());
    return *this;
  }

friend int CompareWeight(mu_1_BE& a, mu_1_BE& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1_BE& a, mu_1_BE& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1_BE::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_BE::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_BE::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1_BE::~mu_1_BE()
{
}
/*** end array declaration ***/
mu_1_BE mu_1_BE_undefined_var;

class mu_1_Snoopq_sz: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Snoopq_sz& val) { return mu__byte::operator=((int) val); };
  mu_1_Snoopq_sz (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_Snoopq_sz (void): mu__byte(0, 0, 1) {};
  mu_1_Snoopq_sz (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Snoopq_sz mu_1_Snoopq_sz_undefined_var;

class mu_1_CHANNEL_SIZE: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_CHANNEL_SIZE& val) { return mu__byte::operator=((int) val); };
  mu_1_CHANNEL_SIZE (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_CHANNEL_SIZE (void): mu__byte(0, 0, 1) {};
  mu_1_CHANNEL_SIZE (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_CHANNEL_SIZE mu_1_CHANNEL_SIZE_undefined_var;

class mu_1_MEM_TXNID: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_MEM_TXNID& val) { return mu__byte::operator=((int) val); };
  mu_1_MEM_TXNID (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1_MEM_TXNID (void): mu__byte(0, 1, 2) {};
  mu_1_MEM_TXNID (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_MEM_TXNID mu_1_MEM_TXNID_undefined_var;

class mu_1_MEM_TORID: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_MEM_TORID& val) { return mu__byte::operator=((int) val); };
  mu_1_MEM_TORID (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_MEM_TORID (void): mu__byte(0, 0, 1) {};
  mu_1_MEM_TORID (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_MEM_TORID mu_1_MEM_TORID_undefined_var;

class mu_1_MEM_TORIDp1: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_MEM_TORIDp1& val) { return mu__byte::operator=((int) val); };
  mu_1_MEM_TORIDp1 (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1_MEM_TORIDp1 (void): mu__byte(0, 1, 2) {};
  mu_1_MEM_TORIDp1 (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_MEM_TORIDp1 mu_1_MEM_TORIDp1_undefined_var;

class mu_1_IFASize: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_IFASize& val) { return mu__byte::operator=((int) val); };
  mu_1_IFASize (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_IFASize (void): mu__byte(0, 0, 1) {};
  mu_1_IFASize (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_IFASize mu_1_IFASize_undefined_var;

class mu_1_MFS_WAYS: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_MFS_WAYS& val) { return mu__byte::operator=((int) val); };
  mu_1_MFS_WAYS (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_MFS_WAYS (void): mu__byte(0, 0, 1) {};
  mu_1_MFS_WAYS (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_MFS_WAYS mu_1_MFS_WAYS_undefined_var;

class mu_1_SF_WAYS: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_SF_WAYS& val) { return mu__byte::operator=((int) val); };
  mu_1_SF_WAYS (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_SF_WAYS (void): mu__byte(0, 0, 1) {};
  mu_1_SF_WAYS (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_SF_WAYS mu_1_SF_WAYS_undefined_var;

class mu_1_Protocol: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_Protocol& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_Protocol& val)
  {
    if (val.defined())
      return ( s << mu_1_Protocol::values[ int(val) - 1] );
    else return ( s << "Undefined" );
  };

  mu_1_Protocol (const char *name, int os): mu__byte(1, 2, 2, name, os) {};
  mu_1_Protocol (void): mu__byte(1, 2, 2) {};
  mu_1_Protocol (int val): mu__byte(1, 2, 2, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -1]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -1] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_Protocol::values[] = {"Protocol__UPI","Protocol__IDIC",NULL };

/*** end of enum declaration ***/
mu_1_Protocol mu_1_Protocol_undefined_var;

class mu_1_IDI_Opcode: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_IDI_Opcode& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_IDI_Opcode& val)
  {
    if (val.defined())
      return ( s << mu_1_IDI_Opcode::values[ int(val) - 3] );
    else return ( s << "Undefined" );
  };

  mu_1_IDI_Opcode (const char *name, int os): mu__byte(3, 46, 6, name, os) {};
  mu_1_IDI_Opcode (void): mu__byte(3, 46, 6) {};
  mu_1_IDI_Opcode (int val): mu__byte(3, 46, 6, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -3]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -3] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_IDI_Opcode::values[] = {"IDI_Opcode__RdAny","IDI_Opcode__RdCurr","IDI_Opcode__RdOwn","IDI_Opcode__RdShared","IDI_Opcode__RdOwnNoData","IDI_Opcode__ItoMWr","IDI_Opcode__CLFlush","IDI_Opcode__CLFlush_OPT","IDI_Opcode__CleanEvict","IDI_Opcode__CleanEvictNoInvalidate","IDI_Opcode__DirtyEvict","IDI_Opcode__DirtyEvictNoInv","IDI_Opcode__CleanEvictNoData","IDI_Opcode__WOWrInv","IDI_Opcode__WOWrInvF","IDI_Opcode__WrInv","IDI_Opcode__RdCurr_ns","IDI_Opcode__SetMonitor","IDI_Opcode__MemWr","IDI_Opcode__CLWB","IDI_Opcode__UcRdF","IDI_Opcode__PrefetchtoSysCache","IDI_Opcode__ClrMonitor","IDI_Opcode__GO","IDI_Opcode__GoWritePull","IDI_Opcode__FastGO","IDI_Opcode__ExtCmp","IDI_Opcode__GoWritePullDrop","IDI_Opcode__FastGOWritePull","IDI_Opcode__WritePull","IDI_Opcode__GOAck","IDI_Opcode__Data","IDI_Opcode__SnpData","IDI_Opcode__SnpCode","IDI_Opcode__SnpInv","IDI_Opcode__SnpCur","IDI_Opcode__BackInv","IDI_Opcode__RspSHitSE","IDI_Opcode__RspIHitI","IDI_Opcode__RspIHitSE","IDI_Opcode__RspVHitV","IDI_Opcode__RspVFwdV","IDI_Opcode__RspIFwdM","IDI_Opcode__RspSFwdM",NULL };

/*** end of enum declaration ***/
mu_1_IDI_Opcode mu_1_IDI_Opcode_undefined_var;

class mu_1_Coh_Op: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_Coh_Op& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_Coh_Op& val)
  {
    if (val.defined())
      return ( s << mu_1_Coh_Op::values[ int(val) - 47] );
    else return ( s << "Undefined" );
  };

  mu_1_Coh_Op (const char *name, int os): mu__byte(47, 56, 4, name, os) {};
  mu_1_Coh_Op (void): mu__byte(47, 56, 4) {};
  mu_1_Coh_Op (int val): mu__byte(47, 56, 4, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -47]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -47] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_Coh_Op::values[] = {"Coh_Op__Get_SE","Coh_Op__Get_E","Coh_Op__Get_S","Coh_Op__NoInvSnp_RdCur","Coh_Op__Wr_Inv","Coh_Op__Flush","Coh_Op__WB_2I","Coh_Op__No_Coh_Op","Coh_Op__NoInvSnp_CLWB","Coh_Op__RdCurr_ns",NULL };

/*** end of enum declaration ***/
mu_1_Coh_Op mu_1_Coh_Op_undefined_var;

class mu_1_UPI_Opcode: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_UPI_Opcode& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_UPI_Opcode& val)
  {
    if (val.defined())
      return ( s << mu_1_UPI_Opcode::values[ int(val) - 57] );
    else return ( s << "Undefined" );
  };

  mu_1_UPI_Opcode (const char *name, int os): mu__byte(57, 99, 6, name, os) {};
  mu_1_UPI_Opcode (void): mu__byte(57, 99, 6) {};
  mu_1_UPI_Opcode (int val): mu__byte(57, 99, 6, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -57]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -57] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_UPI_Opcode::values[] = {"UPI_Opcode__RdCode","UPI_Opcode__RdData","UPI_Opcode__ReqFwdCnflt","UPI_Opcode__RdDataMig","UPI_Opcode__RdInvOwn","UPI_Opcode__InvXtoI","UPI_Opcode__InvItoE","UPI_Opcode__RdInv","UPI_Opcode__InvItoM","UPI_Opcode__WbMtoI","UPI_Opcode__WbMtoS","UPI_Opcode__WbMtoE","UPI_Opcode__WbEtoI","UPI_Opcode__RdCur","UPI_Opcode__WbMtoIPtl","UPI_Opcode__WbMtoEPtl","UPI_Opcode__SI_CmpO","UPI_Opcode__E_CmpO","UPI_Opcode__FwdCnfltO","UPI_Opcode__Data_M","UPI_Opcode__M_CmpO","UPI_Opcode__CmpU","UPI_Opcode__SnpLCode","UPI_Opcode__SnpLData","UPI_Opcode__SnpLInv","UPI_Opcode__SnpLCurr","UPI_Opcode__SnpInvOwn","UPI_Opcode__SnpCode","UPI_Opcode__SnpData","UPI_Opcode__SnpDataMig","UPI_Opcode__RspI","UPI_Opcode__RspIWb","UPI_Opcode__RspS","UPI_Opcode__RspSWb","UPI_Opcode__RspCurData","UPI_Opcode__RspE","UPI_Opcode__RspFwdID","UPI_Opcode__RspFwdIWb","UPI_Opcode__RspFwdIC","UPI_Opcode__RspFwdSWb","UPI_Opcode__RspFwdS","UPI_Opcode__Data_SI","UPI_Opcode__Data_E",NULL };

/*** end of enum declaration ***/
mu_1_UPI_Opcode mu_1_UPI_Opcode_undefined_var;

class mu_1_Mem_Op: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_Mem_Op& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_Mem_Op& val)
  {
    if (val.defined())
      return ( s << mu_1_Mem_Op::values[ int(val) - 100] );
    else return ( s << "Undefined" );
  };

  mu_1_Mem_Op (const char *name, int os): mu__byte(100, 106, 3, name, os) {};
  mu_1_Mem_Op (void): mu__byte(100, 106, 3) {};
  mu_1_Mem_Op (int val): mu__byte(100, 106, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -100]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -100] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_Mem_Op::values[] = {"Mem_Op__Write_M","Mem_Op__Write_P","Mem_Op__Snoop_M","Mem_Op__Write_E","Mem_Op__Read","Mem_Op__Fwd","Mem_Op__Fill",NULL };

/*** end of enum declaration ***/
mu_1_Mem_Op mu_1_Mem_Op_undefined_var;

class mu_1_CacheState: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_CacheState& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_CacheState& val)
  {
    if (val.defined())
      return ( s << mu_1_CacheState::values[ int(val) - 107] );
    else return ( s << "Undefined" );
  };

  mu_1_CacheState (const char *name, int os): mu__byte(107, 110, 3, name, os) {};
  mu_1_CacheState (void): mu__byte(107, 110, 3) {};
  mu_1_CacheState (int val): mu__byte(107, 110, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -107]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -107] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_CacheState::values[] = {"CacheState__M","CacheState__E","CacheState__S","CacheState__I",NULL };

/*** end of enum declaration ***/
mu_1_CacheState mu_1_CacheState_undefined_var;

class mu_1_MFSState: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_MFSState& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_MFSState& val)
  {
    if (val.defined())
      return ( s << mu_1_MFSState::values[ int(val) - 111] );
    else return ( s << "Undefined" );
  };

  mu_1_MFSState (const char *name, int os): mu__byte(111, 114, 3, name, os) {};
  mu_1_MFSState (void): mu__byte(111, 114, 3) {};
  mu_1_MFSState (int val): mu__byte(111, 114, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -111]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -111] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_MFSState::values[] = {"MFSState__M","MFSState__E","MFSState__C","MFSState__I",NULL };

/*** end of enum declaration ***/
mu_1_MFSState mu_1_MFSState_undefined_var;

class mu_1_Resp_Op: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_Resp_Op& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_Resp_Op& val)
  {
    if (val.defined())
      return ( s << mu_1_Resp_Op::values[ int(val) - 115] );
    else return ( s << "Undefined" );
  };

  mu_1_Resp_Op (const char *name, int os): mu__byte(115, 118, 3, name, os) {};
  mu_1_Resp_Op (void): mu__byte(115, 118, 3) {};
  mu_1_Resp_Op (int val): mu__byte(115, 118, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -115]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -115] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_Resp_Op::values[] = {"Resp_Op__Rsp2I","Resp_Op__Rsp2S","Resp_Op__Rsp2E","Resp_Op__Unknown",NULL };

/*** end of enum declaration ***/
mu_1_Resp_Op mu_1_Resp_Op_undefined_var;

class mu_1_CXM_Opcode: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_CXM_Opcode& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_CXM_Opcode& val)
  {
    if (val.defined())
      return ( s << mu_1_CXM_Opcode::values[ int(val) - 119] );
    else return ( s << "Undefined" );
  };

  mu_1_CXM_Opcode (const char *name, int os): mu__byte(119, 124, 3, name, os) {};
  mu_1_CXM_Opcode (void): mu__byte(119, 124, 3) {};
  mu_1_CXM_Opcode (int val): mu__byte(119, 124, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -119]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -119] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_CXM_Opcode::values[] = {"CXM_Opcode__MemRd","CXM_Opcode__MemRdFwd","CXM_Opcode__MemWr","CXM_Opcode__MemWrPtl","CXM_Opcode__MemData","CXM_Opcode__Cmp",NULL };

/*** end of enum declaration ***/
mu_1_CXM_Opcode mu_1_CXM_Opcode_undefined_var;

class mu_1_TSTATE: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_TSTATE& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_TSTATE& val)
  {
    if (val.defined())
      return ( s << mu_1_TSTATE::values[ int(val) - 125] );
    else return ( s << "Undefined" );
  };

  mu_1_TSTATE (const char *name, int os): mu__byte(125, 128, 3, name, os) {};
  mu_1_TSTATE (void): mu__byte(125, 128, 3) {};
  mu_1_TSTATE (int val): mu__byte(125, 128, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -125]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -125] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_TSTATE::values[] = {"TSTATE__COH_BLOCKED","TSTATE__COH_WAIT_LKP","TSTATE__COH_SCHED_IFA","TSTATE__COH_SCHED_SNP",NULL };

/*** end of enum declaration ***/
mu_1_TSTATE mu_1_TSTATE_undefined_var;

class mu_1_CA_type: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_CA_type& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_CA_type& val)
  {
    if (val.defined())
      return ( s << mu_1_CA_type::values[ int(val) - 129] );
    else return ( s << "Undefined" );
  };

  mu_1_CA_type (const char *name, int os): mu__byte(129, 131, 2, name, os) {};
  mu_1_CA_type (void): mu__byte(129, 131, 2) {};
  mu_1_CA_type (int val): mu__byte(129, 131, 2, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -129]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -129] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_CA_type::values[] = {"CA_type__FTS","CA_type__EXC","CA_type__SOT",NULL };

/*** end of enum declaration ***/
mu_1_CA_type mu_1_CA_type_undefined_var;

class mu_1_Domain: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_Domain& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_Domain& val)
  {
    if (val.defined())
      return ( s << mu_1_Domain::values[ int(val) - 132] );
    else return ( s << "Undefined" );
  };

  mu_1_Domain (const char *name, int os): mu__byte(132, 133, 2, name, os) {};
  mu_1_Domain (void): mu__byte(132, 133, 2) {};
  mu_1_Domain (int val): mu__byte(132, 133, 2, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -132]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -132] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_Domain::values[] = {"Domain__COH","Domain__MEM",NULL };

/*** end of enum declaration ***/
mu_1_Domain mu_1_Domain_undefined_var;

class mu_1_MFSMode: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_MFSMode& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_MFSMode& val)
  {
    if (val.defined())
      return ( s << mu_1_MFSMode::values[ int(val) - 134] );
    else return ( s << "Undefined" );
  };

  mu_1_MFSMode (const char *name, int os): mu__byte(134, 135, 2, name, os) {};
  mu_1_MFSMode (void): mu__byte(134, 135, 2) {};
  mu_1_MFSMode (int val): mu__byte(134, 135, 2, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -134]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -134] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_MFSMode::values[] = {"MFSMode__Active","MFSMode__Off",NULL };

/*** end of enum declaration ***/
mu_1_MFSMode mu_1_MFSMode_undefined_var;

class mu_1_FOrDDataState: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_FOrDDataState& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_FOrDDataState& val)
  {
    if (val.defined())
      return ( s << mu_1_FOrDDataState::values[ int(val) - 136] );
    else return ( s << "Undefined" );
  };

  mu_1_FOrDDataState (const char *name, int os): mu__byte(136, 138, 2, name, os) {};
  mu_1_FOrDDataState (void): mu__byte(136, 138, 2) {};
  mu_1_FOrDDataState (int val): mu__byte(136, 138, 2, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -136]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -136] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_FOrDDataState::values[] = {"FOrDDataState__F","FOrDDataState__D","FOrDDataState__Un",NULL };

/*** end of enum declaration ***/
mu_1_FOrDDataState mu_1_FOrDDataState_undefined_var;

class mu_1_RTID_STATE: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_RTID_STATE& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_RTID_STATE& val)
  {
    if (val.defined())
      return ( s << mu_1_RTID_STATE::values[ int(val) - 139] );
    else return ( s << "Undefined" );
  };

  mu_1_RTID_STATE (const char *name, int os): mu__byte(139, 142, 3, name, os) {};
  mu_1_RTID_STATE (void): mu__byte(139, 142, 3) {};
  mu_1_RTID_STATE (int val): mu__byte(139, 142, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -139]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -139] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_RTID_STATE::values[] = {"RTID_STATE__Idle","RTID_STATE__SentReq","RTID_STATE__RcvdData","RTID_STATE__RcvdCmp",NULL };

/*** end of enum declaration ***/
mu_1_RTID_STATE mu_1_RTID_STATE_undefined_var;

class mu_1_CacheOp: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_CacheOp& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_CacheOp& val)
  {
    if (val.defined())
      return ( s << mu_1_CacheOp::values[ int(val) - 143] );
    else return ( s << "Undefined" );
  };

  mu_1_CacheOp (const char *name, int os): mu__byte(143, 145, 2, name, os) {};
  mu_1_CacheOp (void): mu__byte(143, 145, 2) {};
  mu_1_CacheOp (int val): mu__byte(143, 145, 2, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -143]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -143] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_CacheOp::values[] = {"CacheOp__ToI","CacheOp__ToS","CacheOp__ToEmptyE",NULL };

/*** end of enum declaration ***/
mu_1_CacheOp mu_1_CacheOp_undefined_var;

class mu_1_SRB_STATE: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_SRB_STATE& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_SRB_STATE& val)
  {
    if (val.defined())
      return ( s << mu_1_SRB_STATE::values[ int(val) - 146] );
    else return ( s << "Undefined" );
  };

  mu_1_SRB_STATE (const char *name, int os): mu__byte(146, 150, 3, name, os) {};
  mu_1_SRB_STATE (void): mu__byte(146, 150, 3) {};
  mu_1_SRB_STATE (int val): mu__byte(146, 150, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -146]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -146] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_SRB_STATE::values[] = {"SRB_STATE__Idle","SRB_STATE__Ready","SRB_STATE__Conflict","SRB_STATE__ReqSent","SRB_STATE__Resolved",NULL };

/*** end of enum declaration ***/
mu_1_SRB_STATE mu_1_SRB_STATE_undefined_var;

class mu_1__type_0
{
 public:
  mu_0_boolean array[ 2 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_0 (const char *n, int os) { set_self(n, os); };
  mu_1__type_0 ( void ) {};
  virtual ~mu_1__type_0 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 1 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_0& operator= (const mu_1__type_0& from)
  {
    for (int i = 0; i < 2; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_0& a, mu_1__type_0& b)
  {
    int w;
    for (int i=0; i<2; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_0& a, mu_1__type_0& b)
  {
    int w;
    for (int i=0; i<2; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<2; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<2; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 2; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 2; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 2; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 2; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 2; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 2; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_0::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_0::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_0::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 2; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_0::~mu_1__type_0()
{
}
/*** end array declaration ***/
mu_1__type_0 mu_1__type_0_undefined_var;

class mu_1__type_1
{
 public:
  mu_0_boolean array[ 2 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_1 (const char *n, int os) { set_self(n, os); };
  mu_1__type_1 ( void ) {};
  virtual ~mu_1__type_1 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 1 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_1& operator= (const mu_1__type_1& from)
  {
    for (int i = 0; i < 2; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_1& a, mu_1__type_1& b)
  {
    int w;
    for (int i=0; i<2; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_1& a, mu_1__type_1& b)
  {
    int w;
    for (int i=0; i<2; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<2; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<2; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 2; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 2; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 2; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 2; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 2; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 2; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_1::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_1::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_1::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 2; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_1::~mu_1__type_1()
{
}
/*** end array declaration ***/
mu_1__type_1 mu_1__type_1_undefined_var;

class mu_1_SFEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_0_boolean mu_CV_format;
  mu_1__type_0 mu_CV_bits_upi;
  mu_1__type_1 mu_CV_bits_idic;
  mu_1_Protocol mu_owner_protocol;
  mu_1_Agents mu_owner_id;
  mu_0_boolean mu_valid;
  mu_1_Address mu_address;
  mu_0_boolean mu_allocAvoid;
  mu_1_SFEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_SFEntry ( void ) {};

  virtual ~mu_1_SFEntry(); 
friend int CompareWeight(mu_1_SFEntry& a, mu_1_SFEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_CV_format, b.mu_CV_format);
    if (w!=0) return w;
    w = CompareWeight(a.mu_CV_bits_upi, b.mu_CV_bits_upi);
    if (w!=0) return w;
    w = CompareWeight(a.mu_CV_bits_idic, b.mu_CV_bits_idic);
    if (w!=0) return w;
    w = CompareWeight(a.mu_owner_protocol, b.mu_owner_protocol);
    if (w!=0) return w;
    w = CompareWeight(a.mu_owner_id, b.mu_owner_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_allocAvoid, b.mu_allocAvoid);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_SFEntry& a, mu_1_SFEntry& b)
  {
    int w;
    w = Compare(a.mu_CV_format, b.mu_CV_format);
    if (w!=0) return w;
    w = Compare(a.mu_CV_bits_upi, b.mu_CV_bits_upi);
    if (w!=0) return w;
    w = Compare(a.mu_CV_bits_idic, b.mu_CV_bits_idic);
    if (w!=0) return w;
    w = Compare(a.mu_owner_protocol, b.mu_owner_protocol);
    if (w!=0) return w;
    w = Compare(a.mu_owner_id, b.mu_owner_id);
    if (w!=0) return w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_allocAvoid, b.mu_allocAvoid);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_CV_format.MultisetSort();
    mu_CV_bits_upi.MultisetSort();
    mu_CV_bits_idic.MultisetSort();
    mu_owner_protocol.MultisetSort();
    mu_owner_id.MultisetSort();
    mu_valid.MultisetSort();
    mu_address.MultisetSort();
    mu_allocAvoid.MultisetSort();
  }
  void print_statistic()
  {
    mu_CV_format.print_statistic();
    mu_CV_bits_upi.print_statistic();
    mu_CV_bits_idic.print_statistic();
    mu_owner_protocol.print_statistic();
    mu_owner_id.print_statistic();
    mu_valid.print_statistic();
    mu_address.print_statistic();
    mu_allocAvoid.print_statistic();
  }
  void clear() {
    mu_CV_format.clear();
    mu_CV_bits_upi.clear();
    mu_CV_bits_idic.clear();
    mu_owner_protocol.clear();
    mu_owner_id.clear();
    mu_valid.clear();
    mu_address.clear();
    mu_allocAvoid.clear();
 };
  void undefine() {
    mu_CV_format.undefine();
    mu_CV_bits_upi.undefine();
    mu_CV_bits_idic.undefine();
    mu_owner_protocol.undefine();
    mu_owner_id.undefine();
    mu_valid.undefine();
    mu_address.undefine();
    mu_allocAvoid.undefine();
 };
  void reset() {
    mu_CV_format.reset();
    mu_CV_bits_upi.reset();
    mu_CV_bits_idic.reset();
    mu_owner_protocol.reset();
    mu_owner_id.reset();
    mu_valid.reset();
    mu_address.reset();
    mu_allocAvoid.reset();
 };
  void print() {
    mu_CV_format.print();
    mu_CV_bits_upi.print();
    mu_CV_bits_idic.print();
    mu_owner_protocol.print();
    mu_owner_id.print();
    mu_valid.print();
    mu_address.print();
    mu_allocAvoid.print();
  };
  void print_diff(state *prevstate) {
    mu_CV_format.print_diff(prevstate);
    mu_CV_bits_upi.print_diff(prevstate);
    mu_CV_bits_idic.print_diff(prevstate);
    mu_owner_protocol.print_diff(prevstate);
    mu_owner_id.print_diff(prevstate);
    mu_valid.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_allocAvoid.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_CV_format.to_state(thestate);
    mu_CV_bits_upi.to_state(thestate);
    mu_CV_bits_idic.to_state(thestate);
    mu_owner_protocol.to_state(thestate);
    mu_owner_id.to_state(thestate);
    mu_valid.to_state(thestate);
    mu_address.to_state(thestate);
    mu_allocAvoid.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_SFEntry& operator= (const mu_1_SFEntry& from) {
    mu_CV_format.value(from.mu_CV_format.value());
    mu_CV_bits_upi = from.mu_CV_bits_upi;
    mu_CV_bits_idic = from.mu_CV_bits_idic;
    mu_owner_protocol.value(from.mu_owner_protocol.value());
    mu_owner_id.value(from.mu_owner_id.value());
    mu_valid.value(from.mu_valid.value());
    mu_address.value(from.mu_address.value());
    mu_allocAvoid.value(from.mu_allocAvoid.value());
    return *this;
  };
};

  void mu_1_SFEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_SFEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_SFEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_CV_format.set_self_2(name, ".CV_format", os + 0 ); else mu_CV_format.set_self_2(NULL, NULL, 0);
  if (name) mu_CV_bits_upi.set_self_2(name, ".CV_bits_upi", os + 8 ); else mu_CV_bits_upi.set_self_2(NULL, NULL, 0);
  if (name) mu_CV_bits_idic.set_self_2(name, ".CV_bits_idic", os + 24 ); else mu_CV_bits_idic.set_self_2(NULL, NULL, 0);
  if (name) mu_owner_protocol.set_self_2(name, ".owner_protocol", os + 40 ); else mu_owner_protocol.set_self_2(NULL, NULL, 0);
  if (name) mu_owner_id.set_self_2(name, ".owner_id", os + 48 ); else mu_owner_id.set_self_2(NULL, NULL, 0);
  if (name) mu_valid.set_self_2(name, ".valid", os + 56 ); else mu_valid.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 64 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_allocAvoid.set_self_2(name, ".allocAvoid", os + 72 ); else mu_allocAvoid.set_self_2(NULL, NULL, 0);
}

mu_1_SFEntry::~mu_1_SFEntry()
{
}

/*** end record declaration ***/
mu_1_SFEntry mu_1_SFEntry_undefined_var;

class mu_1__type_2
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_2 (const char *n, int os) { set_self(n, os); };
  mu_1__type_2 ( void ) {};
  virtual ~mu_1__type_2 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_2& operator= (const mu_1__type_2& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_2& a, mu_1__type_2& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_2& a, mu_1__type_2& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_2::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_2::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_2::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_2::~mu_1__type_2()
{
}
/*** end array declaration ***/
mu_1__type_2 mu_1__type_2_undefined_var;

class mu_1__type_3
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_3 (const char *n, int os) { set_self(n, os); };
  mu_1__type_3 ( void ) {};
  virtual ~mu_1__type_3 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_3& operator= (const mu_1__type_3& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_3& a, mu_1__type_3& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_3& a, mu_1__type_3& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_3::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_3::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_3::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_3::~mu_1__type_3()
{
}
/*** end array declaration ***/
mu_1__type_3 mu_1__type_3_undefined_var;

class mu_1__type_4
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_4 (const char *n, int os) { set_self(n, os); };
  mu_1__type_4 ( void ) {};
  virtual ~mu_1__type_4 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_4& operator= (const mu_1__type_4& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_4& a, mu_1__type_4& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_4& a, mu_1__type_4& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_4::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_4::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_4::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_4::~mu_1__type_4()
{
}
/*** end array declaration ***/
mu_1__type_4 mu_1__type_4_undefined_var;

class mu_1__type_5
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_5 (const char *n, int os) { set_self(n, os); };
  mu_1__type_5 ( void ) {};
  virtual ~mu_1__type_5 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_5& operator= (const mu_1__type_5& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_5& a, mu_1__type_5& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_5& a, mu_1__type_5& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_5::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_5::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_5::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_5::~mu_1__type_5()
{
}
/*** end array declaration ***/
mu_1__type_5 mu_1__type_5_undefined_var;

class mu_1__type_6
{
 public:
  mu_1_UPI_Opcode array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_6 (const char *n, int os) { set_self(n, os); };
  mu_1__type_6 ( void ) {};
  virtual ~mu_1__type_6 ();
  mu_1_UPI_Opcode& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_6& operator= (const mu_1__type_6& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_6& a, mu_1__type_6& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_6& a, mu_1__type_6& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_6::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_6::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_6::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_6::~mu_1__type_6()
{
}
/*** end array declaration ***/
mu_1__type_6 mu_1__type_6_undefined_var;

class mu_1__type_7
{
 public:
  mu_1_IDI_Opcode array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_7 (const char *n, int os) { set_self(n, os); };
  mu_1__type_7 ( void ) {};
  virtual ~mu_1__type_7 ();
  mu_1_IDI_Opcode& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_7& operator= (const mu_1__type_7& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_7& a, mu_1__type_7& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_7& a, mu_1__type_7& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_7::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_7::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_7::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_7::~mu_1__type_7()
{
}
/*** end array declaration ***/
mu_1__type_7 mu_1__type_7_undefined_var;

class mu_1_TractorEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_0_boolean mu_valid;
  mu_1_Protocol mu_protocol;
  mu_1_IDI_Opcode mu_iopcode;
  mu_1_Agents mu_agent_id;
  mu_1_RTID mu_rtid;
  mu_1_Address mu_address;
  mu_1_Coh_Op mu_coh_op;
  mu_0_boolean mu_selfsnp;
  mu_1_UPI_Opcode mu_uopcode;
  mu_0_boolean mu_alloc_hint;
  mu_1_Line mu_data;
  mu_1_BE mu_be;
  mu_0_boolean mu_resp_sent;
  mu_0_boolean mu_data_sent;
  mu_0_boolean mu_sf_lookup_done;
  mu_0_boolean mu_snpneeded;
  mu_1__type_2 mu_upi_peer_snooped;
  mu_1__type_3 mu_idic_peer_snooped;
  mu_1__type_4 mu_upi_snoop_target;
  mu_1__type_5 mu_idic_snoop_target;
  mu_1__type_6 mu_upi_snoop_opcode;
  mu_1__type_7 mu_idic_snoop_opcode;
  mu_0_boolean mu_snpdone;
  mu_1_Agent_countp1 mu_ro_count;
  mu_0_boolean mu_data_recvd;
  mu_0_boolean mu_limit_S;
  mu_0_boolean mu_snoop_data_recvd;
  mu_0_boolean mu_one_fwd_resp_idic;
  mu_0_boolean mu_extcmp_sent;
  mu_1_IDI_Opcode mu_iresp_opcode;
  mu_0_boolean mu_wb_recvd;
  mu_1_HTID mu_next_entry_c;
  mu_1_HTID mu_next_entry_m;
  mu_0_boolean mu_mfs_lookup_done;
  mu_1_Mem_Op mu_mem_op_init;
  mu_0_boolean mu_mem_op_assigned;
  mu_0_boolean mu_mem_req_sent;
  mu_0_boolean mu_mem_resp_recvd;
  mu_0_boolean mu_in_mem_domain;
  mu_0_boolean mu_prlrd_req_sent;
  mu_0_boolean mu_prlrd_resp_recvd;
  mu_1_IFASize mu_ifa_id;
  mu_0_boolean mu_lateMfsLkupNeeded;
  mu_1_CacheState mu_resp_state;
  mu_1_MFSState mu_mfs_state;
  mu_0_boolean mu_mfs_hit;
  mu_1_MFS_WAYS mu_mfs_way;
  mu_0_boolean mu_late_mufasa_lookup_done;
  mu_0_boolean mu_mufasa_alloc_update_done;
  mu_0_boolean mu_mfsUpdateNeeded;
  mu_0_boolean mu_sf_hit;
  mu_1_SF_WAYS mu_sf_way;
  mu_1_SFEntry mu_next_sf_state;
  mu_0_boolean mu_sf_update_done;
  mu_0_boolean mu_mfs_read_done;
  mu_1_TractorEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_TractorEntry ( void ) {};

  virtual ~mu_1_TractorEntry(); 
friend int CompareWeight(mu_1_TractorEntry& a, mu_1_TractorEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_protocol, b.mu_protocol);
    if (w!=0) return w;
    w = CompareWeight(a.mu_iopcode, b.mu_iopcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_coh_op, b.mu_coh_op);
    if (w!=0) return w;
    w = CompareWeight(a.mu_selfsnp, b.mu_selfsnp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_uopcode, b.mu_uopcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_alloc_hint, b.mu_alloc_hint);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = CompareWeight(a.mu_resp_sent, b.mu_resp_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data_sent, b.mu_data_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_sf_lookup_done, b.mu_sf_lookup_done);
    if (w!=0) return w;
    w = CompareWeight(a.mu_snpneeded, b.mu_snpneeded);
    if (w!=0) return w;
    w = CompareWeight(a.mu_upi_peer_snooped, b.mu_upi_peer_snooped);
    if (w!=0) return w;
    w = CompareWeight(a.mu_idic_peer_snooped, b.mu_idic_peer_snooped);
    if (w!=0) return w;
    w = CompareWeight(a.mu_upi_snoop_target, b.mu_upi_snoop_target);
    if (w!=0) return w;
    w = CompareWeight(a.mu_idic_snoop_target, b.mu_idic_snoop_target);
    if (w!=0) return w;
    w = CompareWeight(a.mu_upi_snoop_opcode, b.mu_upi_snoop_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_idic_snoop_opcode, b.mu_idic_snoop_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_snpdone, b.mu_snpdone);
    if (w!=0) return w;
    w = CompareWeight(a.mu_ro_count, b.mu_ro_count);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data_recvd, b.mu_data_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_limit_S, b.mu_limit_S);
    if (w!=0) return w;
    w = CompareWeight(a.mu_snoop_data_recvd, b.mu_snoop_data_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_one_fwd_resp_idic, b.mu_one_fwd_resp_idic);
    if (w!=0) return w;
    w = CompareWeight(a.mu_extcmp_sent, b.mu_extcmp_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_iresp_opcode, b.mu_iresp_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_wb_recvd, b.mu_wb_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_next_entry_c, b.mu_next_entry_c);
    if (w!=0) return w;
    w = CompareWeight(a.mu_next_entry_m, b.mu_next_entry_m);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mfs_lookup_done, b.mu_mfs_lookup_done);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mem_op_init, b.mu_mem_op_init);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mem_op_assigned, b.mu_mem_op_assigned);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mem_req_sent, b.mu_mem_req_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mem_resp_recvd, b.mu_mem_resp_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_in_mem_domain, b.mu_in_mem_domain);
    if (w!=0) return w;
    w = CompareWeight(a.mu_prlrd_req_sent, b.mu_prlrd_req_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_prlrd_resp_recvd, b.mu_prlrd_resp_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_ifa_id, b.mu_ifa_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_lateMfsLkupNeeded, b.mu_lateMfsLkupNeeded);
    if (w!=0) return w;
    w = CompareWeight(a.mu_resp_state, b.mu_resp_state);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mfs_state, b.mu_mfs_state);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mfs_hit, b.mu_mfs_hit);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mfs_way, b.mu_mfs_way);
    if (w!=0) return w;
    w = CompareWeight(a.mu_late_mufasa_lookup_done, b.mu_late_mufasa_lookup_done);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mufasa_alloc_update_done, b.mu_mufasa_alloc_update_done);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mfsUpdateNeeded, b.mu_mfsUpdateNeeded);
    if (w!=0) return w;
    w = CompareWeight(a.mu_sf_hit, b.mu_sf_hit);
    if (w!=0) return w;
    w = CompareWeight(a.mu_sf_way, b.mu_sf_way);
    if (w!=0) return w;
    w = CompareWeight(a.mu_next_sf_state, b.mu_next_sf_state);
    if (w!=0) return w;
    w = CompareWeight(a.mu_sf_update_done, b.mu_sf_update_done);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mfs_read_done, b.mu_mfs_read_done);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_TractorEntry& a, mu_1_TractorEntry& b)
  {
    int w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = Compare(a.mu_protocol, b.mu_protocol);
    if (w!=0) return w;
    w = Compare(a.mu_iopcode, b.mu_iopcode);
    if (w!=0) return w;
    w = Compare(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = Compare(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_coh_op, b.mu_coh_op);
    if (w!=0) return w;
    w = Compare(a.mu_selfsnp, b.mu_selfsnp);
    if (w!=0) return w;
    w = Compare(a.mu_uopcode, b.mu_uopcode);
    if (w!=0) return w;
    w = Compare(a.mu_alloc_hint, b.mu_alloc_hint);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = Compare(a.mu_resp_sent, b.mu_resp_sent);
    if (w!=0) return w;
    w = Compare(a.mu_data_sent, b.mu_data_sent);
    if (w!=0) return w;
    w = Compare(a.mu_sf_lookup_done, b.mu_sf_lookup_done);
    if (w!=0) return w;
    w = Compare(a.mu_snpneeded, b.mu_snpneeded);
    if (w!=0) return w;
    w = Compare(a.mu_upi_peer_snooped, b.mu_upi_peer_snooped);
    if (w!=0) return w;
    w = Compare(a.mu_idic_peer_snooped, b.mu_idic_peer_snooped);
    if (w!=0) return w;
    w = Compare(a.mu_upi_snoop_target, b.mu_upi_snoop_target);
    if (w!=0) return w;
    w = Compare(a.mu_idic_snoop_target, b.mu_idic_snoop_target);
    if (w!=0) return w;
    w = Compare(a.mu_upi_snoop_opcode, b.mu_upi_snoop_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_idic_snoop_opcode, b.mu_idic_snoop_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_snpdone, b.mu_snpdone);
    if (w!=0) return w;
    w = Compare(a.mu_ro_count, b.mu_ro_count);
    if (w!=0) return w;
    w = Compare(a.mu_data_recvd, b.mu_data_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_limit_S, b.mu_limit_S);
    if (w!=0) return w;
    w = Compare(a.mu_snoop_data_recvd, b.mu_snoop_data_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_one_fwd_resp_idic, b.mu_one_fwd_resp_idic);
    if (w!=0) return w;
    w = Compare(a.mu_extcmp_sent, b.mu_extcmp_sent);
    if (w!=0) return w;
    w = Compare(a.mu_iresp_opcode, b.mu_iresp_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_wb_recvd, b.mu_wb_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_next_entry_c, b.mu_next_entry_c);
    if (w!=0) return w;
    w = Compare(a.mu_next_entry_m, b.mu_next_entry_m);
    if (w!=0) return w;
    w = Compare(a.mu_mfs_lookup_done, b.mu_mfs_lookup_done);
    if (w!=0) return w;
    w = Compare(a.mu_mem_op_init, b.mu_mem_op_init);
    if (w!=0) return w;
    w = Compare(a.mu_mem_op_assigned, b.mu_mem_op_assigned);
    if (w!=0) return w;
    w = Compare(a.mu_mem_req_sent, b.mu_mem_req_sent);
    if (w!=0) return w;
    w = Compare(a.mu_mem_resp_recvd, b.mu_mem_resp_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_in_mem_domain, b.mu_in_mem_domain);
    if (w!=0) return w;
    w = Compare(a.mu_prlrd_req_sent, b.mu_prlrd_req_sent);
    if (w!=0) return w;
    w = Compare(a.mu_prlrd_resp_recvd, b.mu_prlrd_resp_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_ifa_id, b.mu_ifa_id);
    if (w!=0) return w;
    w = Compare(a.mu_lateMfsLkupNeeded, b.mu_lateMfsLkupNeeded);
    if (w!=0) return w;
    w = Compare(a.mu_resp_state, b.mu_resp_state);
    if (w!=0) return w;
    w = Compare(a.mu_mfs_state, b.mu_mfs_state);
    if (w!=0) return w;
    w = Compare(a.mu_mfs_hit, b.mu_mfs_hit);
    if (w!=0) return w;
    w = Compare(a.mu_mfs_way, b.mu_mfs_way);
    if (w!=0) return w;
    w = Compare(a.mu_late_mufasa_lookup_done, b.mu_late_mufasa_lookup_done);
    if (w!=0) return w;
    w = Compare(a.mu_mufasa_alloc_update_done, b.mu_mufasa_alloc_update_done);
    if (w!=0) return w;
    w = Compare(a.mu_mfsUpdateNeeded, b.mu_mfsUpdateNeeded);
    if (w!=0) return w;
    w = Compare(a.mu_sf_hit, b.mu_sf_hit);
    if (w!=0) return w;
    w = Compare(a.mu_sf_way, b.mu_sf_way);
    if (w!=0) return w;
    w = Compare(a.mu_next_sf_state, b.mu_next_sf_state);
    if (w!=0) return w;
    w = Compare(a.mu_sf_update_done, b.mu_sf_update_done);
    if (w!=0) return w;
    w = Compare(a.mu_mfs_read_done, b.mu_mfs_read_done);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_valid.MultisetSort();
    mu_protocol.MultisetSort();
    mu_iopcode.MultisetSort();
    mu_agent_id.MultisetSort();
    mu_rtid.MultisetSort();
    mu_address.MultisetSort();
    mu_coh_op.MultisetSort();
    mu_selfsnp.MultisetSort();
    mu_uopcode.MultisetSort();
    mu_alloc_hint.MultisetSort();
    mu_data.MultisetSort();
    mu_be.MultisetSort();
    mu_resp_sent.MultisetSort();
    mu_data_sent.MultisetSort();
    mu_sf_lookup_done.MultisetSort();
    mu_snpneeded.MultisetSort();
    mu_upi_peer_snooped.MultisetSort();
    mu_idic_peer_snooped.MultisetSort();
    mu_upi_snoop_target.MultisetSort();
    mu_idic_snoop_target.MultisetSort();
    mu_upi_snoop_opcode.MultisetSort();
    mu_idic_snoop_opcode.MultisetSort();
    mu_snpdone.MultisetSort();
    mu_ro_count.MultisetSort();
    mu_data_recvd.MultisetSort();
    mu_limit_S.MultisetSort();
    mu_snoop_data_recvd.MultisetSort();
    mu_one_fwd_resp_idic.MultisetSort();
    mu_extcmp_sent.MultisetSort();
    mu_iresp_opcode.MultisetSort();
    mu_wb_recvd.MultisetSort();
    mu_next_entry_c.MultisetSort();
    mu_next_entry_m.MultisetSort();
    mu_mfs_lookup_done.MultisetSort();
    mu_mem_op_init.MultisetSort();
    mu_mem_op_assigned.MultisetSort();
    mu_mem_req_sent.MultisetSort();
    mu_mem_resp_recvd.MultisetSort();
    mu_in_mem_domain.MultisetSort();
    mu_prlrd_req_sent.MultisetSort();
    mu_prlrd_resp_recvd.MultisetSort();
    mu_ifa_id.MultisetSort();
    mu_lateMfsLkupNeeded.MultisetSort();
    mu_resp_state.MultisetSort();
    mu_mfs_state.MultisetSort();
    mu_mfs_hit.MultisetSort();
    mu_mfs_way.MultisetSort();
    mu_late_mufasa_lookup_done.MultisetSort();
    mu_mufasa_alloc_update_done.MultisetSort();
    mu_mfsUpdateNeeded.MultisetSort();
    mu_sf_hit.MultisetSort();
    mu_sf_way.MultisetSort();
    mu_next_sf_state.MultisetSort();
    mu_sf_update_done.MultisetSort();
    mu_mfs_read_done.MultisetSort();
  }
  void print_statistic()
  {
    mu_valid.print_statistic();
    mu_protocol.print_statistic();
    mu_iopcode.print_statistic();
    mu_agent_id.print_statistic();
    mu_rtid.print_statistic();
    mu_address.print_statistic();
    mu_coh_op.print_statistic();
    mu_selfsnp.print_statistic();
    mu_uopcode.print_statistic();
    mu_alloc_hint.print_statistic();
    mu_data.print_statistic();
    mu_be.print_statistic();
    mu_resp_sent.print_statistic();
    mu_data_sent.print_statistic();
    mu_sf_lookup_done.print_statistic();
    mu_snpneeded.print_statistic();
    mu_upi_peer_snooped.print_statistic();
    mu_idic_peer_snooped.print_statistic();
    mu_upi_snoop_target.print_statistic();
    mu_idic_snoop_target.print_statistic();
    mu_upi_snoop_opcode.print_statistic();
    mu_idic_snoop_opcode.print_statistic();
    mu_snpdone.print_statistic();
    mu_ro_count.print_statistic();
    mu_data_recvd.print_statistic();
    mu_limit_S.print_statistic();
    mu_snoop_data_recvd.print_statistic();
    mu_one_fwd_resp_idic.print_statistic();
    mu_extcmp_sent.print_statistic();
    mu_iresp_opcode.print_statistic();
    mu_wb_recvd.print_statistic();
    mu_next_entry_c.print_statistic();
    mu_next_entry_m.print_statistic();
    mu_mfs_lookup_done.print_statistic();
    mu_mem_op_init.print_statistic();
    mu_mem_op_assigned.print_statistic();
    mu_mem_req_sent.print_statistic();
    mu_mem_resp_recvd.print_statistic();
    mu_in_mem_domain.print_statistic();
    mu_prlrd_req_sent.print_statistic();
    mu_prlrd_resp_recvd.print_statistic();
    mu_ifa_id.print_statistic();
    mu_lateMfsLkupNeeded.print_statistic();
    mu_resp_state.print_statistic();
    mu_mfs_state.print_statistic();
    mu_mfs_hit.print_statistic();
    mu_mfs_way.print_statistic();
    mu_late_mufasa_lookup_done.print_statistic();
    mu_mufasa_alloc_update_done.print_statistic();
    mu_mfsUpdateNeeded.print_statistic();
    mu_sf_hit.print_statistic();
    mu_sf_way.print_statistic();
    mu_next_sf_state.print_statistic();
    mu_sf_update_done.print_statistic();
    mu_mfs_read_done.print_statistic();
  }
  void clear() {
    mu_valid.clear();
    mu_protocol.clear();
    mu_iopcode.clear();
    mu_agent_id.clear();
    mu_rtid.clear();
    mu_address.clear();
    mu_coh_op.clear();
    mu_selfsnp.clear();
    mu_uopcode.clear();
    mu_alloc_hint.clear();
    mu_data.clear();
    mu_be.clear();
    mu_resp_sent.clear();
    mu_data_sent.clear();
    mu_sf_lookup_done.clear();
    mu_snpneeded.clear();
    mu_upi_peer_snooped.clear();
    mu_idic_peer_snooped.clear();
    mu_upi_snoop_target.clear();
    mu_idic_snoop_target.clear();
    mu_upi_snoop_opcode.clear();
    mu_idic_snoop_opcode.clear();
    mu_snpdone.clear();
    mu_ro_count.clear();
    mu_data_recvd.clear();
    mu_limit_S.clear();
    mu_snoop_data_recvd.clear();
    mu_one_fwd_resp_idic.clear();
    mu_extcmp_sent.clear();
    mu_iresp_opcode.clear();
    mu_wb_recvd.clear();
    mu_next_entry_c.clear();
    mu_next_entry_m.clear();
    mu_mfs_lookup_done.clear();
    mu_mem_op_init.clear();
    mu_mem_op_assigned.clear();
    mu_mem_req_sent.clear();
    mu_mem_resp_recvd.clear();
    mu_in_mem_domain.clear();
    mu_prlrd_req_sent.clear();
    mu_prlrd_resp_recvd.clear();
    mu_ifa_id.clear();
    mu_lateMfsLkupNeeded.clear();
    mu_resp_state.clear();
    mu_mfs_state.clear();
    mu_mfs_hit.clear();
    mu_mfs_way.clear();
    mu_late_mufasa_lookup_done.clear();
    mu_mufasa_alloc_update_done.clear();
    mu_mfsUpdateNeeded.clear();
    mu_sf_hit.clear();
    mu_sf_way.clear();
    mu_next_sf_state.clear();
    mu_sf_update_done.clear();
    mu_mfs_read_done.clear();
 };
  void undefine() {
    mu_valid.undefine();
    mu_protocol.undefine();
    mu_iopcode.undefine();
    mu_agent_id.undefine();
    mu_rtid.undefine();
    mu_address.undefine();
    mu_coh_op.undefine();
    mu_selfsnp.undefine();
    mu_uopcode.undefine();
    mu_alloc_hint.undefine();
    mu_data.undefine();
    mu_be.undefine();
    mu_resp_sent.undefine();
    mu_data_sent.undefine();
    mu_sf_lookup_done.undefine();
    mu_snpneeded.undefine();
    mu_upi_peer_snooped.undefine();
    mu_idic_peer_snooped.undefine();
    mu_upi_snoop_target.undefine();
    mu_idic_snoop_target.undefine();
    mu_upi_snoop_opcode.undefine();
    mu_idic_snoop_opcode.undefine();
    mu_snpdone.undefine();
    mu_ro_count.undefine();
    mu_data_recvd.undefine();
    mu_limit_S.undefine();
    mu_snoop_data_recvd.undefine();
    mu_one_fwd_resp_idic.undefine();
    mu_extcmp_sent.undefine();
    mu_iresp_opcode.undefine();
    mu_wb_recvd.undefine();
    mu_next_entry_c.undefine();
    mu_next_entry_m.undefine();
    mu_mfs_lookup_done.undefine();
    mu_mem_op_init.undefine();
    mu_mem_op_assigned.undefine();
    mu_mem_req_sent.undefine();
    mu_mem_resp_recvd.undefine();
    mu_in_mem_domain.undefine();
    mu_prlrd_req_sent.undefine();
    mu_prlrd_resp_recvd.undefine();
    mu_ifa_id.undefine();
    mu_lateMfsLkupNeeded.undefine();
    mu_resp_state.undefine();
    mu_mfs_state.undefine();
    mu_mfs_hit.undefine();
    mu_mfs_way.undefine();
    mu_late_mufasa_lookup_done.undefine();
    mu_mufasa_alloc_update_done.undefine();
    mu_mfsUpdateNeeded.undefine();
    mu_sf_hit.undefine();
    mu_sf_way.undefine();
    mu_next_sf_state.undefine();
    mu_sf_update_done.undefine();
    mu_mfs_read_done.undefine();
 };
  void reset() {
    mu_valid.reset();
    mu_protocol.reset();
    mu_iopcode.reset();
    mu_agent_id.reset();
    mu_rtid.reset();
    mu_address.reset();
    mu_coh_op.reset();
    mu_selfsnp.reset();
    mu_uopcode.reset();
    mu_alloc_hint.reset();
    mu_data.reset();
    mu_be.reset();
    mu_resp_sent.reset();
    mu_data_sent.reset();
    mu_sf_lookup_done.reset();
    mu_snpneeded.reset();
    mu_upi_peer_snooped.reset();
    mu_idic_peer_snooped.reset();
    mu_upi_snoop_target.reset();
    mu_idic_snoop_target.reset();
    mu_upi_snoop_opcode.reset();
    mu_idic_snoop_opcode.reset();
    mu_snpdone.reset();
    mu_ro_count.reset();
    mu_data_recvd.reset();
    mu_limit_S.reset();
    mu_snoop_data_recvd.reset();
    mu_one_fwd_resp_idic.reset();
    mu_extcmp_sent.reset();
    mu_iresp_opcode.reset();
    mu_wb_recvd.reset();
    mu_next_entry_c.reset();
    mu_next_entry_m.reset();
    mu_mfs_lookup_done.reset();
    mu_mem_op_init.reset();
    mu_mem_op_assigned.reset();
    mu_mem_req_sent.reset();
    mu_mem_resp_recvd.reset();
    mu_in_mem_domain.reset();
    mu_prlrd_req_sent.reset();
    mu_prlrd_resp_recvd.reset();
    mu_ifa_id.reset();
    mu_lateMfsLkupNeeded.reset();
    mu_resp_state.reset();
    mu_mfs_state.reset();
    mu_mfs_hit.reset();
    mu_mfs_way.reset();
    mu_late_mufasa_lookup_done.reset();
    mu_mufasa_alloc_update_done.reset();
    mu_mfsUpdateNeeded.reset();
    mu_sf_hit.reset();
    mu_sf_way.reset();
    mu_next_sf_state.reset();
    mu_sf_update_done.reset();
    mu_mfs_read_done.reset();
 };
  void print() {
    mu_valid.print();
    mu_protocol.print();
    mu_iopcode.print();
    mu_agent_id.print();
    mu_rtid.print();
    mu_address.print();
    mu_coh_op.print();
    mu_selfsnp.print();
    mu_uopcode.print();
    mu_alloc_hint.print();
    mu_data.print();
    mu_be.print();
    mu_resp_sent.print();
    mu_data_sent.print();
    mu_sf_lookup_done.print();
    mu_snpneeded.print();
    mu_upi_peer_snooped.print();
    mu_idic_peer_snooped.print();
    mu_upi_snoop_target.print();
    mu_idic_snoop_target.print();
    mu_upi_snoop_opcode.print();
    mu_idic_snoop_opcode.print();
    mu_snpdone.print();
    mu_ro_count.print();
    mu_data_recvd.print();
    mu_limit_S.print();
    mu_snoop_data_recvd.print();
    mu_one_fwd_resp_idic.print();
    mu_extcmp_sent.print();
    mu_iresp_opcode.print();
    mu_wb_recvd.print();
    mu_next_entry_c.print();
    mu_next_entry_m.print();
    mu_mfs_lookup_done.print();
    mu_mem_op_init.print();
    mu_mem_op_assigned.print();
    mu_mem_req_sent.print();
    mu_mem_resp_recvd.print();
    mu_in_mem_domain.print();
    mu_prlrd_req_sent.print();
    mu_prlrd_resp_recvd.print();
    mu_ifa_id.print();
    mu_lateMfsLkupNeeded.print();
    mu_resp_state.print();
    mu_mfs_state.print();
    mu_mfs_hit.print();
    mu_mfs_way.print();
    mu_late_mufasa_lookup_done.print();
    mu_mufasa_alloc_update_done.print();
    mu_mfsUpdateNeeded.print();
    mu_sf_hit.print();
    mu_sf_way.print();
    mu_next_sf_state.print();
    mu_sf_update_done.print();
    mu_mfs_read_done.print();
  };
  void print_diff(state *prevstate) {
    mu_valid.print_diff(prevstate);
    mu_protocol.print_diff(prevstate);
    mu_iopcode.print_diff(prevstate);
    mu_agent_id.print_diff(prevstate);
    mu_rtid.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_coh_op.print_diff(prevstate);
    mu_selfsnp.print_diff(prevstate);
    mu_uopcode.print_diff(prevstate);
    mu_alloc_hint.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_be.print_diff(prevstate);
    mu_resp_sent.print_diff(prevstate);
    mu_data_sent.print_diff(prevstate);
    mu_sf_lookup_done.print_diff(prevstate);
    mu_snpneeded.print_diff(prevstate);
    mu_upi_peer_snooped.print_diff(prevstate);
    mu_idic_peer_snooped.print_diff(prevstate);
    mu_upi_snoop_target.print_diff(prevstate);
    mu_idic_snoop_target.print_diff(prevstate);
    mu_upi_snoop_opcode.print_diff(prevstate);
    mu_idic_snoop_opcode.print_diff(prevstate);
    mu_snpdone.print_diff(prevstate);
    mu_ro_count.print_diff(prevstate);
    mu_data_recvd.print_diff(prevstate);
    mu_limit_S.print_diff(prevstate);
    mu_snoop_data_recvd.print_diff(prevstate);
    mu_one_fwd_resp_idic.print_diff(prevstate);
    mu_extcmp_sent.print_diff(prevstate);
    mu_iresp_opcode.print_diff(prevstate);
    mu_wb_recvd.print_diff(prevstate);
    mu_next_entry_c.print_diff(prevstate);
    mu_next_entry_m.print_diff(prevstate);
    mu_mfs_lookup_done.print_diff(prevstate);
    mu_mem_op_init.print_diff(prevstate);
    mu_mem_op_assigned.print_diff(prevstate);
    mu_mem_req_sent.print_diff(prevstate);
    mu_mem_resp_recvd.print_diff(prevstate);
    mu_in_mem_domain.print_diff(prevstate);
    mu_prlrd_req_sent.print_diff(prevstate);
    mu_prlrd_resp_recvd.print_diff(prevstate);
    mu_ifa_id.print_diff(prevstate);
    mu_lateMfsLkupNeeded.print_diff(prevstate);
    mu_resp_state.print_diff(prevstate);
    mu_mfs_state.print_diff(prevstate);
    mu_mfs_hit.print_diff(prevstate);
    mu_mfs_way.print_diff(prevstate);
    mu_late_mufasa_lookup_done.print_diff(prevstate);
    mu_mufasa_alloc_update_done.print_diff(prevstate);
    mu_mfsUpdateNeeded.print_diff(prevstate);
    mu_sf_hit.print_diff(prevstate);
    mu_sf_way.print_diff(prevstate);
    mu_next_sf_state.print_diff(prevstate);
    mu_sf_update_done.print_diff(prevstate);
    mu_mfs_read_done.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_valid.to_state(thestate);
    mu_protocol.to_state(thestate);
    mu_iopcode.to_state(thestate);
    mu_agent_id.to_state(thestate);
    mu_rtid.to_state(thestate);
    mu_address.to_state(thestate);
    mu_coh_op.to_state(thestate);
    mu_selfsnp.to_state(thestate);
    mu_uopcode.to_state(thestate);
    mu_alloc_hint.to_state(thestate);
    mu_data.to_state(thestate);
    mu_be.to_state(thestate);
    mu_resp_sent.to_state(thestate);
    mu_data_sent.to_state(thestate);
    mu_sf_lookup_done.to_state(thestate);
    mu_snpneeded.to_state(thestate);
    mu_upi_peer_snooped.to_state(thestate);
    mu_idic_peer_snooped.to_state(thestate);
    mu_upi_snoop_target.to_state(thestate);
    mu_idic_snoop_target.to_state(thestate);
    mu_upi_snoop_opcode.to_state(thestate);
    mu_idic_snoop_opcode.to_state(thestate);
    mu_snpdone.to_state(thestate);
    mu_ro_count.to_state(thestate);
    mu_data_recvd.to_state(thestate);
    mu_limit_S.to_state(thestate);
    mu_snoop_data_recvd.to_state(thestate);
    mu_one_fwd_resp_idic.to_state(thestate);
    mu_extcmp_sent.to_state(thestate);
    mu_iresp_opcode.to_state(thestate);
    mu_wb_recvd.to_state(thestate);
    mu_next_entry_c.to_state(thestate);
    mu_next_entry_m.to_state(thestate);
    mu_mfs_lookup_done.to_state(thestate);
    mu_mem_op_init.to_state(thestate);
    mu_mem_op_assigned.to_state(thestate);
    mu_mem_req_sent.to_state(thestate);
    mu_mem_resp_recvd.to_state(thestate);
    mu_in_mem_domain.to_state(thestate);
    mu_prlrd_req_sent.to_state(thestate);
    mu_prlrd_resp_recvd.to_state(thestate);
    mu_ifa_id.to_state(thestate);
    mu_lateMfsLkupNeeded.to_state(thestate);
    mu_resp_state.to_state(thestate);
    mu_mfs_state.to_state(thestate);
    mu_mfs_hit.to_state(thestate);
    mu_mfs_way.to_state(thestate);
    mu_late_mufasa_lookup_done.to_state(thestate);
    mu_mufasa_alloc_update_done.to_state(thestate);
    mu_mfsUpdateNeeded.to_state(thestate);
    mu_sf_hit.to_state(thestate);
    mu_sf_way.to_state(thestate);
    mu_next_sf_state.to_state(thestate);
    mu_sf_update_done.to_state(thestate);
    mu_mfs_read_done.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_TractorEntry& operator= (const mu_1_TractorEntry& from) {
    mu_valid.value(from.mu_valid.value());
    mu_protocol.value(from.mu_protocol.value());
    mu_iopcode.value(from.mu_iopcode.value());
    mu_agent_id.value(from.mu_agent_id.value());
    mu_rtid.value(from.mu_rtid.value());
    mu_address.value(from.mu_address.value());
    mu_coh_op.value(from.mu_coh_op.value());
    mu_selfsnp.value(from.mu_selfsnp.value());
    mu_uopcode.value(from.mu_uopcode.value());
    mu_alloc_hint.value(from.mu_alloc_hint.value());
    mu_data = from.mu_data;
    mu_be = from.mu_be;
    mu_resp_sent.value(from.mu_resp_sent.value());
    mu_data_sent.value(from.mu_data_sent.value());
    mu_sf_lookup_done.value(from.mu_sf_lookup_done.value());
    mu_snpneeded.value(from.mu_snpneeded.value());
    mu_upi_peer_snooped = from.mu_upi_peer_snooped;
    mu_idic_peer_snooped = from.mu_idic_peer_snooped;
    mu_upi_snoop_target = from.mu_upi_snoop_target;
    mu_idic_snoop_target = from.mu_idic_snoop_target;
    mu_upi_snoop_opcode = from.mu_upi_snoop_opcode;
    mu_idic_snoop_opcode = from.mu_idic_snoop_opcode;
    mu_snpdone.value(from.mu_snpdone.value());
    mu_ro_count.value(from.mu_ro_count.value());
    mu_data_recvd.value(from.mu_data_recvd.value());
    mu_limit_S.value(from.mu_limit_S.value());
    mu_snoop_data_recvd.value(from.mu_snoop_data_recvd.value());
    mu_one_fwd_resp_idic.value(from.mu_one_fwd_resp_idic.value());
    mu_extcmp_sent.value(from.mu_extcmp_sent.value());
    mu_iresp_opcode.value(from.mu_iresp_opcode.value());
    mu_wb_recvd.value(from.mu_wb_recvd.value());
    mu_next_entry_c.value(from.mu_next_entry_c.value());
    mu_next_entry_m.value(from.mu_next_entry_m.value());
    mu_mfs_lookup_done.value(from.mu_mfs_lookup_done.value());
    mu_mem_op_init.value(from.mu_mem_op_init.value());
    mu_mem_op_assigned.value(from.mu_mem_op_assigned.value());
    mu_mem_req_sent.value(from.mu_mem_req_sent.value());
    mu_mem_resp_recvd.value(from.mu_mem_resp_recvd.value());
    mu_in_mem_domain.value(from.mu_in_mem_domain.value());
    mu_prlrd_req_sent.value(from.mu_prlrd_req_sent.value());
    mu_prlrd_resp_recvd.value(from.mu_prlrd_resp_recvd.value());
    mu_ifa_id.value(from.mu_ifa_id.value());
    mu_lateMfsLkupNeeded.value(from.mu_lateMfsLkupNeeded.value());
    mu_resp_state.value(from.mu_resp_state.value());
    mu_mfs_state.value(from.mu_mfs_state.value());
    mu_mfs_hit.value(from.mu_mfs_hit.value());
    mu_mfs_way.value(from.mu_mfs_way.value());
    mu_late_mufasa_lookup_done.value(from.mu_late_mufasa_lookup_done.value());
    mu_mufasa_alloc_update_done.value(from.mu_mufasa_alloc_update_done.value());
    mu_mfsUpdateNeeded.value(from.mu_mfsUpdateNeeded.value());
    mu_sf_hit.value(from.mu_sf_hit.value());
    mu_sf_way.value(from.mu_sf_way.value());
    mu_next_sf_state = from.mu_next_sf_state;
    mu_sf_update_done.value(from.mu_sf_update_done.value());
    mu_mfs_read_done.value(from.mu_mfs_read_done.value());
    return *this;
  };
};

  void mu_1_TractorEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_TractorEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_TractorEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_valid.set_self_2(name, ".valid", os + 0 ); else mu_valid.set_self_2(NULL, NULL, 0);
  if (name) mu_protocol.set_self_2(name, ".protocol", os + 8 ); else mu_protocol.set_self_2(NULL, NULL, 0);
  if (name) mu_iopcode.set_self_2(name, ".iopcode", os + 16 ); else mu_iopcode.set_self_2(NULL, NULL, 0);
  if (name) mu_agent_id.set_self_2(name, ".agent_id", os + 24 ); else mu_agent_id.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid.set_self_2(name, ".rtid", os + 32 ); else mu_rtid.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 40 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_coh_op.set_self_2(name, ".coh_op", os + 48 ); else mu_coh_op.set_self_2(NULL, NULL, 0);
  if (name) mu_selfsnp.set_self_2(name, ".selfsnp", os + 56 ); else mu_selfsnp.set_self_2(NULL, NULL, 0);
  if (name) mu_uopcode.set_self_2(name, ".uopcode", os + 64 ); else mu_uopcode.set_self_2(NULL, NULL, 0);
  if (name) mu_alloc_hint.set_self_2(name, ".alloc_hint", os + 72 ); else mu_alloc_hint.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 80 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_be.set_self_2(name, ".be", os + 88 ); else mu_be.set_self_2(NULL, NULL, 0);
  if (name) mu_resp_sent.set_self_2(name, ".resp_sent", os + 96 ); else mu_resp_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_data_sent.set_self_2(name, ".data_sent", os + 104 ); else mu_data_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_sf_lookup_done.set_self_2(name, ".sf_lookup_done", os + 112 ); else mu_sf_lookup_done.set_self_2(NULL, NULL, 0);
  if (name) mu_snpneeded.set_self_2(name, ".snpneeded", os + 120 ); else mu_snpneeded.set_self_2(NULL, NULL, 0);
  if (name) mu_upi_peer_snooped.set_self_2(name, ".upi_peer_snooped", os + 128 ); else mu_upi_peer_snooped.set_self_2(NULL, NULL, 0);
  if (name) mu_idic_peer_snooped.set_self_2(name, ".idic_peer_snooped", os + 152 ); else mu_idic_peer_snooped.set_self_2(NULL, NULL, 0);
  if (name) mu_upi_snoop_target.set_self_2(name, ".upi_snoop_target", os + 176 ); else mu_upi_snoop_target.set_self_2(NULL, NULL, 0);
  if (name) mu_idic_snoop_target.set_self_2(name, ".idic_snoop_target", os + 200 ); else mu_idic_snoop_target.set_self_2(NULL, NULL, 0);
  if (name) mu_upi_snoop_opcode.set_self_2(name, ".upi_snoop_opcode", os + 224 ); else mu_upi_snoop_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_idic_snoop_opcode.set_self_2(name, ".idic_snoop_opcode", os + 248 ); else mu_idic_snoop_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_snpdone.set_self_2(name, ".snpdone", os + 272 ); else mu_snpdone.set_self_2(NULL, NULL, 0);
  if (name) mu_ro_count.set_self_2(name, ".ro_count", os + 280 ); else mu_ro_count.set_self_2(NULL, NULL, 0);
  if (name) mu_data_recvd.set_self_2(name, ".data_recvd", os + 288 ); else mu_data_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_limit_S.set_self_2(name, ".limit_S", os + 296 ); else mu_limit_S.set_self_2(NULL, NULL, 0);
  if (name) mu_snoop_data_recvd.set_self_2(name, ".snoop_data_recvd", os + 304 ); else mu_snoop_data_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_one_fwd_resp_idic.set_self_2(name, ".one_fwd_resp_idic", os + 312 ); else mu_one_fwd_resp_idic.set_self_2(NULL, NULL, 0);
  if (name) mu_extcmp_sent.set_self_2(name, ".extcmp_sent", os + 320 ); else mu_extcmp_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_iresp_opcode.set_self_2(name, ".iresp_opcode", os + 328 ); else mu_iresp_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_wb_recvd.set_self_2(name, ".wb_recvd", os + 336 ); else mu_wb_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_next_entry_c.set_self_2(name, ".next_entry_c", os + 344 ); else mu_next_entry_c.set_self_2(NULL, NULL, 0);
  if (name) mu_next_entry_m.set_self_2(name, ".next_entry_m", os + 352 ); else mu_next_entry_m.set_self_2(NULL, NULL, 0);
  if (name) mu_mfs_lookup_done.set_self_2(name, ".mfs_lookup_done", os + 360 ); else mu_mfs_lookup_done.set_self_2(NULL, NULL, 0);
  if (name) mu_mem_op_init.set_self_2(name, ".mem_op_init", os + 368 ); else mu_mem_op_init.set_self_2(NULL, NULL, 0);
  if (name) mu_mem_op_assigned.set_self_2(name, ".mem_op_assigned", os + 376 ); else mu_mem_op_assigned.set_self_2(NULL, NULL, 0);
  if (name) mu_mem_req_sent.set_self_2(name, ".mem_req_sent", os + 384 ); else mu_mem_req_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_mem_resp_recvd.set_self_2(name, ".mem_resp_recvd", os + 392 ); else mu_mem_resp_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_in_mem_domain.set_self_2(name, ".in_mem_domain", os + 400 ); else mu_in_mem_domain.set_self_2(NULL, NULL, 0);
  if (name) mu_prlrd_req_sent.set_self_2(name, ".prlrd_req_sent", os + 408 ); else mu_prlrd_req_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_prlrd_resp_recvd.set_self_2(name, ".prlrd_resp_recvd", os + 416 ); else mu_prlrd_resp_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_ifa_id.set_self_2(name, ".ifa_id", os + 424 ); else mu_ifa_id.set_self_2(NULL, NULL, 0);
  if (name) mu_lateMfsLkupNeeded.set_self_2(name, ".lateMfsLkupNeeded", os + 432 ); else mu_lateMfsLkupNeeded.set_self_2(NULL, NULL, 0);
  if (name) mu_resp_state.set_self_2(name, ".resp_state", os + 440 ); else mu_resp_state.set_self_2(NULL, NULL, 0);
  if (name) mu_mfs_state.set_self_2(name, ".mfs_state", os + 448 ); else mu_mfs_state.set_self_2(NULL, NULL, 0);
  if (name) mu_mfs_hit.set_self_2(name, ".mfs_hit", os + 456 ); else mu_mfs_hit.set_self_2(NULL, NULL, 0);
  if (name) mu_mfs_way.set_self_2(name, ".mfs_way", os + 464 ); else mu_mfs_way.set_self_2(NULL, NULL, 0);
  if (name) mu_late_mufasa_lookup_done.set_self_2(name, ".late_mufasa_lookup_done", os + 472 ); else mu_late_mufasa_lookup_done.set_self_2(NULL, NULL, 0);
  if (name) mu_mufasa_alloc_update_done.set_self_2(name, ".mufasa_alloc_update_done", os + 480 ); else mu_mufasa_alloc_update_done.set_self_2(NULL, NULL, 0);
  if (name) mu_mfsUpdateNeeded.set_self_2(name, ".mfsUpdateNeeded", os + 488 ); else mu_mfsUpdateNeeded.set_self_2(NULL, NULL, 0);
  if (name) mu_sf_hit.set_self_2(name, ".sf_hit", os + 496 ); else mu_sf_hit.set_self_2(NULL, NULL, 0);
  if (name) mu_sf_way.set_self_2(name, ".sf_way", os + 504 ); else mu_sf_way.set_self_2(NULL, NULL, 0);
  if (name) mu_next_sf_state.set_self_2(name, ".next_sf_state", os + 512 ); else mu_next_sf_state.set_self_2(NULL, NULL, 0);
  if (name) mu_sf_update_done.set_self_2(name, ".sf_update_done", os + 592 ); else mu_sf_update_done.set_self_2(NULL, NULL, 0);
  if (name) mu_mfs_read_done.set_self_2(name, ".mfs_read_done", os + 600 ); else mu_mfs_read_done.set_self_2(NULL, NULL, 0);
}

mu_1_TractorEntry::~mu_1_TractorEntry()
{
}

/*** end record declaration ***/
mu_1_TractorEntry mu_1_TractorEntry_undefined_var;

class mu_1_UPIPacket
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_UPI_Opcode mu_opcode;
  mu_1_UPIAgents mu_crnid;
  mu_1_Address mu_address;
  mu_1_HTID mu_htid;
  mu_1_UPIAgents mu_responder_id;
  mu_1_RTID mu_rtid;
  mu_1_Line mu_data;
  mu_1_BE mu_be;
  mu_0_boolean mu_alloc_hint;
  mu_1_UPIPacket ( const char *n, int os ) { set_self(n,os); };
  mu_1_UPIPacket ( void ) {};

  virtual ~mu_1_UPIPacket(); 
friend int CompareWeight(mu_1_UPIPacket& a, mu_1_UPIPacket& b)
  {
    int w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_crnid, b.mu_crnid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_responder_id, b.mu_responder_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = CompareWeight(a.mu_alloc_hint, b.mu_alloc_hint);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_UPIPacket& a, mu_1_UPIPacket& b)
  {
    int w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_crnid, b.mu_crnid);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = Compare(a.mu_responder_id, b.mu_responder_id);
    if (w!=0) return w;
    w = Compare(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = Compare(a.mu_alloc_hint, b.mu_alloc_hint);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_opcode.MultisetSort();
    mu_crnid.MultisetSort();
    mu_address.MultisetSort();
    mu_htid.MultisetSort();
    mu_responder_id.MultisetSort();
    mu_rtid.MultisetSort();
    mu_data.MultisetSort();
    mu_be.MultisetSort();
    mu_alloc_hint.MultisetSort();
  }
  void print_statistic()
  {
    mu_opcode.print_statistic();
    mu_crnid.print_statistic();
    mu_address.print_statistic();
    mu_htid.print_statistic();
    mu_responder_id.print_statistic();
    mu_rtid.print_statistic();
    mu_data.print_statistic();
    mu_be.print_statistic();
    mu_alloc_hint.print_statistic();
  }
  void clear() {
    mu_opcode.clear();
    mu_crnid.clear();
    mu_address.clear();
    mu_htid.clear();
    mu_responder_id.clear();
    mu_rtid.clear();
    mu_data.clear();
    mu_be.clear();
    mu_alloc_hint.clear();
 };
  void undefine() {
    mu_opcode.undefine();
    mu_crnid.undefine();
    mu_address.undefine();
    mu_htid.undefine();
    mu_responder_id.undefine();
    mu_rtid.undefine();
    mu_data.undefine();
    mu_be.undefine();
    mu_alloc_hint.undefine();
 };
  void reset() {
    mu_opcode.reset();
    mu_crnid.reset();
    mu_address.reset();
    mu_htid.reset();
    mu_responder_id.reset();
    mu_rtid.reset();
    mu_data.reset();
    mu_be.reset();
    mu_alloc_hint.reset();
 };
  void print() {
    mu_opcode.print();
    mu_crnid.print();
    mu_address.print();
    mu_htid.print();
    mu_responder_id.print();
    mu_rtid.print();
    mu_data.print();
    mu_be.print();
    mu_alloc_hint.print();
  };
  void print_diff(state *prevstate) {
    mu_opcode.print_diff(prevstate);
    mu_crnid.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_htid.print_diff(prevstate);
    mu_responder_id.print_diff(prevstate);
    mu_rtid.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_be.print_diff(prevstate);
    mu_alloc_hint.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_opcode.to_state(thestate);
    mu_crnid.to_state(thestate);
    mu_address.to_state(thestate);
    mu_htid.to_state(thestate);
    mu_responder_id.to_state(thestate);
    mu_rtid.to_state(thestate);
    mu_data.to_state(thestate);
    mu_be.to_state(thestate);
    mu_alloc_hint.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_UPIPacket& operator= (const mu_1_UPIPacket& from) {
    mu_opcode.value(from.mu_opcode.value());
    mu_crnid.value(from.mu_crnid.value());
    mu_address.value(from.mu_address.value());
    mu_htid.value(from.mu_htid.value());
    mu_responder_id.value(from.mu_responder_id.value());
    mu_rtid.value(from.mu_rtid.value());
    mu_data = from.mu_data;
    mu_be = from.mu_be;
    mu_alloc_hint.value(from.mu_alloc_hint.value());
    return *this;
  };
};

  void mu_1_UPIPacket::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_UPIPacket::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_UPIPacket::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_opcode.set_self_2(name, ".opcode", os + 0 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_crnid.set_self_2(name, ".crnid", os + 8 ); else mu_crnid.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 16 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_htid.set_self_2(name, ".htid", os + 24 ); else mu_htid.set_self_2(NULL, NULL, 0);
  if (name) mu_responder_id.set_self_2(name, ".responder_id", os + 32 ); else mu_responder_id.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid.set_self_2(name, ".rtid", os + 40 ); else mu_rtid.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 48 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_be.set_self_2(name, ".be", os + 56 ); else mu_be.set_self_2(NULL, NULL, 0);
  if (name) mu_alloc_hint.set_self_2(name, ".alloc_hint", os + 64 ); else mu_alloc_hint.set_self_2(NULL, NULL, 0);
}

mu_1_UPIPacket::~mu_1_UPIPacket()
{
}

/*** end record declaration ***/
mu_1_UPIPacket mu_1_UPIPacket_undefined_var;

class mu_1_IDIPacket
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_IDI_Opcode mu_opcode;
  mu_1_RTID mu_rtid;
  mu_1_HTID mu_htid;
  mu_1_CacheState mu_cachestate;
  mu_1_Address mu_address;
  mu_1_Line mu_data;
  mu_0_boolean mu_selfsnp;
  mu_1_IDICAgents mu_responder_id;
  mu_0_boolean mu_bogus;
  mu_1_BE mu_be;
  mu_0_boolean mu_alloc_hint;
  mu_1_IDIPacket ( const char *n, int os ) { set_self(n,os); };
  mu_1_IDIPacket ( void ) {};

  virtual ~mu_1_IDIPacket(); 
friend int CompareWeight(mu_1_IDIPacket& a, mu_1_IDIPacket& b)
  {
    int w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_cachestate, b.mu_cachestate);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_selfsnp, b.mu_selfsnp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_responder_id, b.mu_responder_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_bogus, b.mu_bogus);
    if (w!=0) return w;
    w = CompareWeight(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = CompareWeight(a.mu_alloc_hint, b.mu_alloc_hint);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_IDIPacket& a, mu_1_IDIPacket& b)
  {
    int w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = Compare(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = Compare(a.mu_cachestate, b.mu_cachestate);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_selfsnp, b.mu_selfsnp);
    if (w!=0) return w;
    w = Compare(a.mu_responder_id, b.mu_responder_id);
    if (w!=0) return w;
    w = Compare(a.mu_bogus, b.mu_bogus);
    if (w!=0) return w;
    w = Compare(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = Compare(a.mu_alloc_hint, b.mu_alloc_hint);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_opcode.MultisetSort();
    mu_rtid.MultisetSort();
    mu_htid.MultisetSort();
    mu_cachestate.MultisetSort();
    mu_address.MultisetSort();
    mu_data.MultisetSort();
    mu_selfsnp.MultisetSort();
    mu_responder_id.MultisetSort();
    mu_bogus.MultisetSort();
    mu_be.MultisetSort();
    mu_alloc_hint.MultisetSort();
  }
  void print_statistic()
  {
    mu_opcode.print_statistic();
    mu_rtid.print_statistic();
    mu_htid.print_statistic();
    mu_cachestate.print_statistic();
    mu_address.print_statistic();
    mu_data.print_statistic();
    mu_selfsnp.print_statistic();
    mu_responder_id.print_statistic();
    mu_bogus.print_statistic();
    mu_be.print_statistic();
    mu_alloc_hint.print_statistic();
  }
  void clear() {
    mu_opcode.clear();
    mu_rtid.clear();
    mu_htid.clear();
    mu_cachestate.clear();
    mu_address.clear();
    mu_data.clear();
    mu_selfsnp.clear();
    mu_responder_id.clear();
    mu_bogus.clear();
    mu_be.clear();
    mu_alloc_hint.clear();
 };
  void undefine() {
    mu_opcode.undefine();
    mu_rtid.undefine();
    mu_htid.undefine();
    mu_cachestate.undefine();
    mu_address.undefine();
    mu_data.undefine();
    mu_selfsnp.undefine();
    mu_responder_id.undefine();
    mu_bogus.undefine();
    mu_be.undefine();
    mu_alloc_hint.undefine();
 };
  void reset() {
    mu_opcode.reset();
    mu_rtid.reset();
    mu_htid.reset();
    mu_cachestate.reset();
    mu_address.reset();
    mu_data.reset();
    mu_selfsnp.reset();
    mu_responder_id.reset();
    mu_bogus.reset();
    mu_be.reset();
    mu_alloc_hint.reset();
 };
  void print() {
    mu_opcode.print();
    mu_rtid.print();
    mu_htid.print();
    mu_cachestate.print();
    mu_address.print();
    mu_data.print();
    mu_selfsnp.print();
    mu_responder_id.print();
    mu_bogus.print();
    mu_be.print();
    mu_alloc_hint.print();
  };
  void print_diff(state *prevstate) {
    mu_opcode.print_diff(prevstate);
    mu_rtid.print_diff(prevstate);
    mu_htid.print_diff(prevstate);
    mu_cachestate.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_selfsnp.print_diff(prevstate);
    mu_responder_id.print_diff(prevstate);
    mu_bogus.print_diff(prevstate);
    mu_be.print_diff(prevstate);
    mu_alloc_hint.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_opcode.to_state(thestate);
    mu_rtid.to_state(thestate);
    mu_htid.to_state(thestate);
    mu_cachestate.to_state(thestate);
    mu_address.to_state(thestate);
    mu_data.to_state(thestate);
    mu_selfsnp.to_state(thestate);
    mu_responder_id.to_state(thestate);
    mu_bogus.to_state(thestate);
    mu_be.to_state(thestate);
    mu_alloc_hint.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_IDIPacket& operator= (const mu_1_IDIPacket& from) {
    mu_opcode.value(from.mu_opcode.value());
    mu_rtid.value(from.mu_rtid.value());
    mu_htid.value(from.mu_htid.value());
    mu_cachestate.value(from.mu_cachestate.value());
    mu_address.value(from.mu_address.value());
    mu_data = from.mu_data;
    mu_selfsnp.value(from.mu_selfsnp.value());
    mu_responder_id.value(from.mu_responder_id.value());
    mu_bogus.value(from.mu_bogus.value());
    mu_be = from.mu_be;
    mu_alloc_hint.value(from.mu_alloc_hint.value());
    return *this;
  };
};

  void mu_1_IDIPacket::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_IDIPacket::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_IDIPacket::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_opcode.set_self_2(name, ".opcode", os + 0 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid.set_self_2(name, ".rtid", os + 8 ); else mu_rtid.set_self_2(NULL, NULL, 0);
  if (name) mu_htid.set_self_2(name, ".htid", os + 16 ); else mu_htid.set_self_2(NULL, NULL, 0);
  if (name) mu_cachestate.set_self_2(name, ".cachestate", os + 24 ); else mu_cachestate.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 32 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 40 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_selfsnp.set_self_2(name, ".selfsnp", os + 48 ); else mu_selfsnp.set_self_2(NULL, NULL, 0);
  if (name) mu_responder_id.set_self_2(name, ".responder_id", os + 56 ); else mu_responder_id.set_self_2(NULL, NULL, 0);
  if (name) mu_bogus.set_self_2(name, ".bogus", os + 64 ); else mu_bogus.set_self_2(NULL, NULL, 0);
  if (name) mu_be.set_self_2(name, ".be", os + 72 ); else mu_be.set_self_2(NULL, NULL, 0);
  if (name) mu_alloc_hint.set_self_2(name, ".alloc_hint", os + 80 ); else mu_alloc_hint.set_self_2(NULL, NULL, 0);
}

mu_1_IDIPacket::~mu_1_IDIPacket()
{
}

/*** end record declaration ***/
mu_1_IDIPacket mu_1_IDIPacket_undefined_var;

class mu_1_AgentPacket
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_IDIPacket mu_packet;
  mu_1_IDICAgents mu_network_id;
  mu_1_AgentPacket ( const char *n, int os ) { set_self(n,os); };
  mu_1_AgentPacket ( void ) {};

  virtual ~mu_1_AgentPacket(); 
friend int CompareWeight(mu_1_AgentPacket& a, mu_1_AgentPacket& b)
  {
    int w;
    w = CompareWeight(a.mu_packet, b.mu_packet);
    if (w!=0) return w;
    w = CompareWeight(a.mu_network_id, b.mu_network_id);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_AgentPacket& a, mu_1_AgentPacket& b)
  {
    int w;
    w = Compare(a.mu_packet, b.mu_packet);
    if (w!=0) return w;
    w = Compare(a.mu_network_id, b.mu_network_id);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_packet.MultisetSort();
    mu_network_id.MultisetSort();
  }
  void print_statistic()
  {
    mu_packet.print_statistic();
    mu_network_id.print_statistic();
  }
  void clear() {
    mu_packet.clear();
    mu_network_id.clear();
 };
  void undefine() {
    mu_packet.undefine();
    mu_network_id.undefine();
 };
  void reset() {
    mu_packet.reset();
    mu_network_id.reset();
 };
  void print() {
    mu_packet.print();
    mu_network_id.print();
  };
  void print_diff(state *prevstate) {
    mu_packet.print_diff(prevstate);
    mu_network_id.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_packet.to_state(thestate);
    mu_network_id.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_AgentPacket& operator= (const mu_1_AgentPacket& from) {
    mu_packet = from.mu_packet;
    mu_network_id.value(from.mu_network_id.value());
    return *this;
  };
};

  void mu_1_AgentPacket::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_AgentPacket::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_AgentPacket::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_packet.set_self_2(name, ".packet", os + 0 ); else mu_packet.set_self_2(NULL, NULL, 0);
  if (name) mu_network_id.set_self_2(name, ".network_id", os + 88 ); else mu_network_id.set_self_2(NULL, NULL, 0);
}

mu_1_AgentPacket::~mu_1_AgentPacket()
{
}

/*** end record declaration ***/
mu_1_AgentPacket mu_1_AgentPacket_undefined_var;

class mu_1_LinkedList
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_0_boolean mu_valid;
  mu_1_Address mu_address;
  mu_1_HTID mu_head;
  mu_1_HTID mu_tail;
  mu_1_LinkedList ( const char *n, int os ) { set_self(n,os); };
  mu_1_LinkedList ( void ) {};

  virtual ~mu_1_LinkedList(); 
friend int CompareWeight(mu_1_LinkedList& a, mu_1_LinkedList& b)
  {
    int w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_head, b.mu_head);
    if (w!=0) return w;
    w = CompareWeight(a.mu_tail, b.mu_tail);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_LinkedList& a, mu_1_LinkedList& b)
  {
    int w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_head, b.mu_head);
    if (w!=0) return w;
    w = Compare(a.mu_tail, b.mu_tail);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_valid.MultisetSort();
    mu_address.MultisetSort();
    mu_head.MultisetSort();
    mu_tail.MultisetSort();
  }
  void print_statistic()
  {
    mu_valid.print_statistic();
    mu_address.print_statistic();
    mu_head.print_statistic();
    mu_tail.print_statistic();
  }
  void clear() {
    mu_valid.clear();
    mu_address.clear();
    mu_head.clear();
    mu_tail.clear();
 };
  void undefine() {
    mu_valid.undefine();
    mu_address.undefine();
    mu_head.undefine();
    mu_tail.undefine();
 };
  void reset() {
    mu_valid.reset();
    mu_address.reset();
    mu_head.reset();
    mu_tail.reset();
 };
  void print() {
    mu_valid.print();
    mu_address.print();
    mu_head.print();
    mu_tail.print();
  };
  void print_diff(state *prevstate) {
    mu_valid.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_head.print_diff(prevstate);
    mu_tail.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_valid.to_state(thestate);
    mu_address.to_state(thestate);
    mu_head.to_state(thestate);
    mu_tail.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_LinkedList& operator= (const mu_1_LinkedList& from) {
    mu_valid.value(from.mu_valid.value());
    mu_address.value(from.mu_address.value());
    mu_head.value(from.mu_head.value());
    mu_tail.value(from.mu_tail.value());
    return *this;
  };
};

  void mu_1_LinkedList::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_LinkedList::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_LinkedList::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_valid.set_self_2(name, ".valid", os + 0 ); else mu_valid.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 8 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_head.set_self_2(name, ".head", os + 16 ); else mu_head.set_self_2(NULL, NULL, 0);
  if (name) mu_tail.set_self_2(name, ".tail", os + 24 ); else mu_tail.set_self_2(NULL, NULL, 0);
}

mu_1_LinkedList::~mu_1_LinkedList()
{
}

/*** end record declaration ***/
mu_1_LinkedList mu_1_LinkedList_undefined_var;

class mu_1_CXMPacket
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_CXM_Opcode mu_opcode;
  mu_1_Protocol mu_protocol;
  mu_1_Agents mu_agent_id;
  mu_1_RTID mu_rtid;
  mu_1_Address mu_address;
  mu_1_MEM_TXNID mu_txnid;
  mu_1_Line mu_data;
  mu_1_BE mu_be;
  mu_0_boolean mu_prlrd;
  mu_1_CXMPacket ( const char *n, int os ) { set_self(n,os); };
  mu_1_CXMPacket ( void ) {};

  virtual ~mu_1_CXMPacket(); 
friend int CompareWeight(mu_1_CXMPacket& a, mu_1_CXMPacket& b)
  {
    int w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_protocol, b.mu_protocol);
    if (w!=0) return w;
    w = CompareWeight(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_txnid, b.mu_txnid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = CompareWeight(a.mu_prlrd, b.mu_prlrd);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_CXMPacket& a, mu_1_CXMPacket& b)
  {
    int w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_protocol, b.mu_protocol);
    if (w!=0) return w;
    w = Compare(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = Compare(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_txnid, b.mu_txnid);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = Compare(a.mu_prlrd, b.mu_prlrd);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_opcode.MultisetSort();
    mu_protocol.MultisetSort();
    mu_agent_id.MultisetSort();
    mu_rtid.MultisetSort();
    mu_address.MultisetSort();
    mu_txnid.MultisetSort();
    mu_data.MultisetSort();
    mu_be.MultisetSort();
    mu_prlrd.MultisetSort();
  }
  void print_statistic()
  {
    mu_opcode.print_statistic();
    mu_protocol.print_statistic();
    mu_agent_id.print_statistic();
    mu_rtid.print_statistic();
    mu_address.print_statistic();
    mu_txnid.print_statistic();
    mu_data.print_statistic();
    mu_be.print_statistic();
    mu_prlrd.print_statistic();
  }
  void clear() {
    mu_opcode.clear();
    mu_protocol.clear();
    mu_agent_id.clear();
    mu_rtid.clear();
    mu_address.clear();
    mu_txnid.clear();
    mu_data.clear();
    mu_be.clear();
    mu_prlrd.clear();
 };
  void undefine() {
    mu_opcode.undefine();
    mu_protocol.undefine();
    mu_agent_id.undefine();
    mu_rtid.undefine();
    mu_address.undefine();
    mu_txnid.undefine();
    mu_data.undefine();
    mu_be.undefine();
    mu_prlrd.undefine();
 };
  void reset() {
    mu_opcode.reset();
    mu_protocol.reset();
    mu_agent_id.reset();
    mu_rtid.reset();
    mu_address.reset();
    mu_txnid.reset();
    mu_data.reset();
    mu_be.reset();
    mu_prlrd.reset();
 };
  void print() {
    mu_opcode.print();
    mu_protocol.print();
    mu_agent_id.print();
    mu_rtid.print();
    mu_address.print();
    mu_txnid.print();
    mu_data.print();
    mu_be.print();
    mu_prlrd.print();
  };
  void print_diff(state *prevstate) {
    mu_opcode.print_diff(prevstate);
    mu_protocol.print_diff(prevstate);
    mu_agent_id.print_diff(prevstate);
    mu_rtid.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_txnid.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_be.print_diff(prevstate);
    mu_prlrd.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_opcode.to_state(thestate);
    mu_protocol.to_state(thestate);
    mu_agent_id.to_state(thestate);
    mu_rtid.to_state(thestate);
    mu_address.to_state(thestate);
    mu_txnid.to_state(thestate);
    mu_data.to_state(thestate);
    mu_be.to_state(thestate);
    mu_prlrd.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_CXMPacket& operator= (const mu_1_CXMPacket& from) {
    mu_opcode.value(from.mu_opcode.value());
    mu_protocol.value(from.mu_protocol.value());
    mu_agent_id.value(from.mu_agent_id.value());
    mu_rtid.value(from.mu_rtid.value());
    mu_address.value(from.mu_address.value());
    mu_txnid.value(from.mu_txnid.value());
    mu_data = from.mu_data;
    mu_be = from.mu_be;
    mu_prlrd.value(from.mu_prlrd.value());
    return *this;
  };
};

  void mu_1_CXMPacket::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_CXMPacket::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_CXMPacket::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_opcode.set_self_2(name, ".opcode", os + 0 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_protocol.set_self_2(name, ".protocol", os + 8 ); else mu_protocol.set_self_2(NULL, NULL, 0);
  if (name) mu_agent_id.set_self_2(name, ".agent_id", os + 16 ); else mu_agent_id.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid.set_self_2(name, ".rtid", os + 24 ); else mu_rtid.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 32 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_txnid.set_self_2(name, ".txnid", os + 40 ); else mu_txnid.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 48 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_be.set_self_2(name, ".be", os + 56 ); else mu_be.set_self_2(NULL, NULL, 0);
  if (name) mu_prlrd.set_self_2(name, ".prlrd", os + 64 ); else mu_prlrd.set_self_2(NULL, NULL, 0);
}

mu_1_CXMPacket::~mu_1_CXMPacket()
{
}

/*** end record declaration ***/
mu_1_CXMPacket mu_1_CXMPacket_undefined_var;

class mu_1_MemTOREntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_0_boolean mu_valid;
  mu_1_CXM_Opcode mu_opcode;
  mu_1_Address mu_address;
  mu_1_MEM_TXNID mu_txnid;
  mu_1_Line mu_data;
  mu_1_BE mu_be;
  mu_0_boolean mu_prlrd;
  mu_1_Protocol mu_protocol;
  mu_1_RTID mu_rtid;
  mu_1_Agents mu_agent_id;
  mu_1_MemTOREntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_MemTOREntry ( void ) {};

  virtual ~mu_1_MemTOREntry(); 
friend int CompareWeight(mu_1_MemTOREntry& a, mu_1_MemTOREntry& b)
  {
    int w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_txnid, b.mu_txnid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = CompareWeight(a.mu_prlrd, b.mu_prlrd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_protocol, b.mu_protocol);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_MemTOREntry& a, mu_1_MemTOREntry& b)
  {
    int w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_txnid, b.mu_txnid);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_be, b.mu_be);
    if (w!=0) return w;
    w = Compare(a.mu_prlrd, b.mu_prlrd);
    if (w!=0) return w;
    w = Compare(a.mu_protocol, b.mu_protocol);
    if (w!=0) return w;
    w = Compare(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = Compare(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_valid.MultisetSort();
    mu_opcode.MultisetSort();
    mu_address.MultisetSort();
    mu_txnid.MultisetSort();
    mu_data.MultisetSort();
    mu_be.MultisetSort();
    mu_prlrd.MultisetSort();
    mu_protocol.MultisetSort();
    mu_rtid.MultisetSort();
    mu_agent_id.MultisetSort();
  }
  void print_statistic()
  {
    mu_valid.print_statistic();
    mu_opcode.print_statistic();
    mu_address.print_statistic();
    mu_txnid.print_statistic();
    mu_data.print_statistic();
    mu_be.print_statistic();
    mu_prlrd.print_statistic();
    mu_protocol.print_statistic();
    mu_rtid.print_statistic();
    mu_agent_id.print_statistic();
  }
  void clear() {
    mu_valid.clear();
    mu_opcode.clear();
    mu_address.clear();
    mu_txnid.clear();
    mu_data.clear();
    mu_be.clear();
    mu_prlrd.clear();
    mu_protocol.clear();
    mu_rtid.clear();
    mu_agent_id.clear();
 };
  void undefine() {
    mu_valid.undefine();
    mu_opcode.undefine();
    mu_address.undefine();
    mu_txnid.undefine();
    mu_data.undefine();
    mu_be.undefine();
    mu_prlrd.undefine();
    mu_protocol.undefine();
    mu_rtid.undefine();
    mu_agent_id.undefine();
 };
  void reset() {
    mu_valid.reset();
    mu_opcode.reset();
    mu_address.reset();
    mu_txnid.reset();
    mu_data.reset();
    mu_be.reset();
    mu_prlrd.reset();
    mu_protocol.reset();
    mu_rtid.reset();
    mu_agent_id.reset();
 };
  void print() {
    mu_valid.print();
    mu_opcode.print();
    mu_address.print();
    mu_txnid.print();
    mu_data.print();
    mu_be.print();
    mu_prlrd.print();
    mu_protocol.print();
    mu_rtid.print();
    mu_agent_id.print();
  };
  void print_diff(state *prevstate) {
    mu_valid.print_diff(prevstate);
    mu_opcode.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_txnid.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_be.print_diff(prevstate);
    mu_prlrd.print_diff(prevstate);
    mu_protocol.print_diff(prevstate);
    mu_rtid.print_diff(prevstate);
    mu_agent_id.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_valid.to_state(thestate);
    mu_opcode.to_state(thestate);
    mu_address.to_state(thestate);
    mu_txnid.to_state(thestate);
    mu_data.to_state(thestate);
    mu_be.to_state(thestate);
    mu_prlrd.to_state(thestate);
    mu_protocol.to_state(thestate);
    mu_rtid.to_state(thestate);
    mu_agent_id.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_MemTOREntry& operator= (const mu_1_MemTOREntry& from) {
    mu_valid.value(from.mu_valid.value());
    mu_opcode.value(from.mu_opcode.value());
    mu_address.value(from.mu_address.value());
    mu_txnid.value(from.mu_txnid.value());
    mu_data = from.mu_data;
    mu_be = from.mu_be;
    mu_prlrd.value(from.mu_prlrd.value());
    mu_protocol.value(from.mu_protocol.value());
    mu_rtid.value(from.mu_rtid.value());
    mu_agent_id.value(from.mu_agent_id.value());
    return *this;
  };
};

  void mu_1_MemTOREntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_MemTOREntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_MemTOREntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_valid.set_self_2(name, ".valid", os + 0 ); else mu_valid.set_self_2(NULL, NULL, 0);
  if (name) mu_opcode.set_self_2(name, ".opcode", os + 8 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 16 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_txnid.set_self_2(name, ".txnid", os + 24 ); else mu_txnid.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 32 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_be.set_self_2(name, ".be", os + 40 ); else mu_be.set_self_2(NULL, NULL, 0);
  if (name) mu_prlrd.set_self_2(name, ".prlrd", os + 48 ); else mu_prlrd.set_self_2(NULL, NULL, 0);
  if (name) mu_protocol.set_self_2(name, ".protocol", os + 56 ); else mu_protocol.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid.set_self_2(name, ".rtid", os + 64 ); else mu_rtid.set_self_2(NULL, NULL, 0);
  if (name) mu_agent_id.set_self_2(name, ".agent_id", os + 72 ); else mu_agent_id.set_self_2(NULL, NULL, 0);
}

mu_1_MemTOREntry::~mu_1_MemTOREntry()
{
}

/*** end record declaration ***/
mu_1_MemTOREntry mu_1_MemTOREntry_undefined_var;

class mu_1_MFSEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_MFSState mu_state;
  mu_1_Line mu_data;
  mu_1_Address mu_address;
  mu_0_boolean mu_valid;
  mu_1_MFSEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_MFSEntry ( void ) {};

  virtual ~mu_1_MFSEntry(); 
friend int CompareWeight(mu_1_MFSEntry& a, mu_1_MFSEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_MFSEntry& a, mu_1_MFSEntry& b)
  {
    int w;
    w = Compare(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_state.MultisetSort();
    mu_data.MultisetSort();
    mu_address.MultisetSort();
    mu_valid.MultisetSort();
  }
  void print_statistic()
  {
    mu_state.print_statistic();
    mu_data.print_statistic();
    mu_address.print_statistic();
    mu_valid.print_statistic();
  }
  void clear() {
    mu_state.clear();
    mu_data.clear();
    mu_address.clear();
    mu_valid.clear();
 };
  void undefine() {
    mu_state.undefine();
    mu_data.undefine();
    mu_address.undefine();
    mu_valid.undefine();
 };
  void reset() {
    mu_state.reset();
    mu_data.reset();
    mu_address.reset();
    mu_valid.reset();
 };
  void print() {
    mu_state.print();
    mu_data.print();
    mu_address.print();
    mu_valid.print();
  };
  void print_diff(state *prevstate) {
    mu_state.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_valid.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_state.to_state(thestate);
    mu_data.to_state(thestate);
    mu_address.to_state(thestate);
    mu_valid.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_MFSEntry& operator= (const mu_1_MFSEntry& from) {
    mu_state.value(from.mu_state.value());
    mu_data = from.mu_data;
    mu_address.value(from.mu_address.value());
    mu_valid.value(from.mu_valid.value());
    return *this;
  };
};

  void mu_1_MFSEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_MFSEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_MFSEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_state.set_self_2(name, ".state", os + 0 ); else mu_state.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 8 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 16 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_valid.set_self_2(name, ".valid", os + 24 ); else mu_valid.set_self_2(NULL, NULL, 0);
}

mu_1_MFSEntry::~mu_1_MFSEntry()
{
}

/*** end record declaration ***/
mu_1_MFSEntry mu_1_MFSEntry_undefined_var;

class mu_1_MonitorEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_Address mu_address;
  mu_1_IDICAgents mu_agent_id;
  mu_0_boolean mu_valid;
  mu_1_MonitorEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_MonitorEntry ( void ) {};

  virtual ~mu_1_MonitorEntry(); 
friend int CompareWeight(mu_1_MonitorEntry& a, mu_1_MonitorEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_MonitorEntry& a, mu_1_MonitorEntry& b)
  {
    int w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_address.MultisetSort();
    mu_agent_id.MultisetSort();
    mu_valid.MultisetSort();
  }
  void print_statistic()
  {
    mu_address.print_statistic();
    mu_agent_id.print_statistic();
    mu_valid.print_statistic();
  }
  void clear() {
    mu_address.clear();
    mu_agent_id.clear();
    mu_valid.clear();
 };
  void undefine() {
    mu_address.undefine();
    mu_agent_id.undefine();
    mu_valid.undefine();
 };
  void reset() {
    mu_address.reset();
    mu_agent_id.reset();
    mu_valid.reset();
 };
  void print() {
    mu_address.print();
    mu_agent_id.print();
    mu_valid.print();
  };
  void print_diff(state *prevstate) {
    mu_address.print_diff(prevstate);
    mu_agent_id.print_diff(prevstate);
    mu_valid.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_address.to_state(thestate);
    mu_agent_id.to_state(thestate);
    mu_valid.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_MonitorEntry& operator= (const mu_1_MonitorEntry& from) {
    mu_address.value(from.mu_address.value());
    mu_agent_id.value(from.mu_agent_id.value());
    mu_valid.value(from.mu_valid.value());
    return *this;
  };
};

  void mu_1_MonitorEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_MonitorEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_MonitorEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_address.set_self_2(name, ".address", os + 0 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_agent_id.set_self_2(name, ".agent_id", os + 8 ); else mu_agent_id.set_self_2(NULL, NULL, 0);
  if (name) mu_valid.set_self_2(name, ".valid", os + 16 ); else mu_valid.set_self_2(NULL, NULL, 0);
}

mu_1_MonitorEntry::~mu_1_MonitorEntry()
{
}

/*** end record declaration ***/
mu_1_MonitorEntry mu_1_MonitorEntry_undefined_var;

class mu_1_IFAEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_0_boolean mu_snpRspDone;
  mu_1_FOrDDataState mu_FOrDData;
  mu_1_HTID mu_tractor_id;
  mu_1_RTID mu_rtid;
  mu_1_Agents mu_agent_id;
  mu_1_Protocol mu_req_protocol;
  mu_0_boolean mu_valid;
  mu_1_Line mu_data;
  mu_0_boolean mu_dataE;
  mu_1_IFAEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_IFAEntry ( void ) {};

  virtual ~mu_1_IFAEntry(); 
friend int CompareWeight(mu_1_IFAEntry& a, mu_1_IFAEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_snpRspDone, b.mu_snpRspDone);
    if (w!=0) return w;
    w = CompareWeight(a.mu_FOrDData, b.mu_FOrDData);
    if (w!=0) return w;
    w = CompareWeight(a.mu_tractor_id, b.mu_tractor_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_req_protocol, b.mu_req_protocol);
    if (w!=0) return w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_dataE, b.mu_dataE);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_IFAEntry& a, mu_1_IFAEntry& b)
  {
    int w;
    w = Compare(a.mu_snpRspDone, b.mu_snpRspDone);
    if (w!=0) return w;
    w = Compare(a.mu_FOrDData, b.mu_FOrDData);
    if (w!=0) return w;
    w = Compare(a.mu_tractor_id, b.mu_tractor_id);
    if (w!=0) return w;
    w = Compare(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = Compare(a.mu_agent_id, b.mu_agent_id);
    if (w!=0) return w;
    w = Compare(a.mu_req_protocol, b.mu_req_protocol);
    if (w!=0) return w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_dataE, b.mu_dataE);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_snpRspDone.MultisetSort();
    mu_FOrDData.MultisetSort();
    mu_tractor_id.MultisetSort();
    mu_rtid.MultisetSort();
    mu_agent_id.MultisetSort();
    mu_req_protocol.MultisetSort();
    mu_valid.MultisetSort();
    mu_data.MultisetSort();
    mu_dataE.MultisetSort();
  }
  void print_statistic()
  {
    mu_snpRspDone.print_statistic();
    mu_FOrDData.print_statistic();
    mu_tractor_id.print_statistic();
    mu_rtid.print_statistic();
    mu_agent_id.print_statistic();
    mu_req_protocol.print_statistic();
    mu_valid.print_statistic();
    mu_data.print_statistic();
    mu_dataE.print_statistic();
  }
  void clear() {
    mu_snpRspDone.clear();
    mu_FOrDData.clear();
    mu_tractor_id.clear();
    mu_rtid.clear();
    mu_agent_id.clear();
    mu_req_protocol.clear();
    mu_valid.clear();
    mu_data.clear();
    mu_dataE.clear();
 };
  void undefine() {
    mu_snpRspDone.undefine();
    mu_FOrDData.undefine();
    mu_tractor_id.undefine();
    mu_rtid.undefine();
    mu_agent_id.undefine();
    mu_req_protocol.undefine();
    mu_valid.undefine();
    mu_data.undefine();
    mu_dataE.undefine();
 };
  void reset() {
    mu_snpRspDone.reset();
    mu_FOrDData.reset();
    mu_tractor_id.reset();
    mu_rtid.reset();
    mu_agent_id.reset();
    mu_req_protocol.reset();
    mu_valid.reset();
    mu_data.reset();
    mu_dataE.reset();
 };
  void print() {
    mu_snpRspDone.print();
    mu_FOrDData.print();
    mu_tractor_id.print();
    mu_rtid.print();
    mu_agent_id.print();
    mu_req_protocol.print();
    mu_valid.print();
    mu_data.print();
    mu_dataE.print();
  };
  void print_diff(state *prevstate) {
    mu_snpRspDone.print_diff(prevstate);
    mu_FOrDData.print_diff(prevstate);
    mu_tractor_id.print_diff(prevstate);
    mu_rtid.print_diff(prevstate);
    mu_agent_id.print_diff(prevstate);
    mu_req_protocol.print_diff(prevstate);
    mu_valid.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_dataE.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_snpRspDone.to_state(thestate);
    mu_FOrDData.to_state(thestate);
    mu_tractor_id.to_state(thestate);
    mu_rtid.to_state(thestate);
    mu_agent_id.to_state(thestate);
    mu_req_protocol.to_state(thestate);
    mu_valid.to_state(thestate);
    mu_data.to_state(thestate);
    mu_dataE.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_IFAEntry& operator= (const mu_1_IFAEntry& from) {
    mu_snpRspDone.value(from.mu_snpRspDone.value());
    mu_FOrDData.value(from.mu_FOrDData.value());
    mu_tractor_id.value(from.mu_tractor_id.value());
    mu_rtid.value(from.mu_rtid.value());
    mu_agent_id.value(from.mu_agent_id.value());
    mu_req_protocol.value(from.mu_req_protocol.value());
    mu_valid.value(from.mu_valid.value());
    mu_data = from.mu_data;
    mu_dataE.value(from.mu_dataE.value());
    return *this;
  };
};

  void mu_1_IFAEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_IFAEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_IFAEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_snpRspDone.set_self_2(name, ".snpRspDone", os + 0 ); else mu_snpRspDone.set_self_2(NULL, NULL, 0);
  if (name) mu_FOrDData.set_self_2(name, ".FOrDData", os + 8 ); else mu_FOrDData.set_self_2(NULL, NULL, 0);
  if (name) mu_tractor_id.set_self_2(name, ".tractor_id", os + 16 ); else mu_tractor_id.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid.set_self_2(name, ".rtid", os + 24 ); else mu_rtid.set_self_2(NULL, NULL, 0);
  if (name) mu_agent_id.set_self_2(name, ".agent_id", os + 32 ); else mu_agent_id.set_self_2(NULL, NULL, 0);
  if (name) mu_req_protocol.set_self_2(name, ".req_protocol", os + 40 ); else mu_req_protocol.set_self_2(NULL, NULL, 0);
  if (name) mu_valid.set_self_2(name, ".valid", os + 48 ); else mu_valid.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 56 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_dataE.set_self_2(name, ".dataE", os + 64 ); else mu_dataE.set_self_2(NULL, NULL, 0);
}

mu_1_IFAEntry::~mu_1_IFAEntry()
{
}

/*** end record declaration ***/
mu_1_IFAEntry mu_1_IFAEntry_undefined_var;

class mu_1__type_8
{
 public:
  mu_1_TractorEntry array[ 2 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_8 (const char *n, int os) { set_self(n, os); };
  mu_1__type_8 ( void ) {};
  virtual ~mu_1__type_8 ();
  mu_1_TractorEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 1 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_8& operator= (const mu_1__type_8& from)
  {
    for (int i = 0; i < 2; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_8& a, mu_1__type_8& b)
  {
    int w;
    for (int i=0; i<2; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_8& a, mu_1__type_8& b)
  {
    int w;
    for (int i=0; i<2; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<2; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<2; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 2; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 2; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 2; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 2; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 2; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 2; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_8::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_8::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_8::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 2; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 608 + os);
    delete[] s;
  }
};
mu_1__type_8::~mu_1__type_8()
{
}
/*** end array declaration ***/
mu_1__type_8 mu_1__type_8_undefined_var;

class mu_1__type_9
{
 public:
  mu_1_Line array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_9 (const char *n, int os) { set_self(n, os); };
  mu_1__type_9 ( void ) {};
  virtual ~mu_1__type_9 ();
  mu_1_Line& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_9& operator= (const mu_1__type_9& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_9& a, mu_1__type_9& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_9& a, mu_1__type_9& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_9::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_9::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_9::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_9::~mu_1__type_9()
{
}
/*** end array declaration ***/
mu_1__type_9 mu_1__type_9_undefined_var;

class mu_1__type_10
{
 public:
  mu_1_SFEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_10 (const char *n, int os) { set_self(n, os); };
  mu_1__type_10 ( void ) {};
  virtual ~mu_1__type_10 ();
  mu_1_SFEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_10& operator= (const mu_1__type_10& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_10& a, mu_1__type_10& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_10& a, mu_1__type_10& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_10::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_10::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_10::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 80 + os);
    delete[] s;
  }
};
mu_1__type_10::~mu_1__type_10()
{
}
/*** end array declaration ***/
mu_1__type_10 mu_1__type_10_undefined_var;

class mu_1__type_11
{
 public:
  mu_1_UPIPacket array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_11 (const char *n, int os) { set_self(n, os); };
  mu_1__type_11 ( void ) {};
  virtual ~mu_1__type_11 ();
  mu_1_UPIPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_11& operator= (const mu_1__type_11& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_11& a, mu_1__type_11& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_11& a, mu_1__type_11& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_11::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_11::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_11::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 72 + os);
    delete[] s;
  }
};
mu_1__type_11::~mu_1__type_11()
{
}
/*** end array declaration ***/
mu_1__type_11 mu_1__type_11_undefined_var;

class mu_1__type_12
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_12 (const char *n, int os) { set_self(n, os); };
  mu_1__type_12 ( void ) {};
  virtual ~mu_1__type_12 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_12& operator= (const mu_1__type_12& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_12& a, mu_1__type_12& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_12& a, mu_1__type_12& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_12::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_12::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_12::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_12::~mu_1__type_12()
{
}
/*** end array declaration ***/
mu_1__type_12 mu_1__type_12_undefined_var;

class mu_1__type_13
{
 public:
  mu_1_AgentPacket array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_13 (const char *n, int os) { set_self(n, os); };
  mu_1__type_13 ( void ) {};
  virtual ~mu_1__type_13 ();
  mu_1_AgentPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_13& operator= (const mu_1__type_13& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_13& a, mu_1__type_13& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_13& a, mu_1__type_13& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_13::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_13::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_13::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 96 + os);
    delete[] s;
  }
};
mu_1__type_13::~mu_1__type_13()
{
}
/*** end array declaration ***/
mu_1__type_13 mu_1__type_13_undefined_var;

class mu_1__type_14
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_14 (const char *n, int os) { set_self(n, os); };
  mu_1__type_14 ( void ) {};
  virtual ~mu_1__type_14 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_14& operator= (const mu_1__type_14& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_14& a, mu_1__type_14& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_14& a, mu_1__type_14& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_14::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_14::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_14::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_14::~mu_1__type_14()
{
}
/*** end array declaration ***/
mu_1__type_14 mu_1__type_14_undefined_var;

class mu_1__type_15
{
 public:
  mu_1_LinkedList array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_15 (const char *n, int os) { set_self(n, os); };
  mu_1__type_15 ( void ) {};
  virtual ~mu_1__type_15 ();
  mu_1_LinkedList& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_15& operator= (const mu_1__type_15& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_15& a, mu_1__type_15& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_15& a, mu_1__type_15& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_15::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_15::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_15::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 32 + os);
    delete[] s;
  }
};
mu_1__type_15::~mu_1__type_15()
{
}
/*** end array declaration ***/
mu_1__type_15 mu_1__type_15_undefined_var;

class mu_1__type_16
{
 public:
  mu_1_LinkedList array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_16 (const char *n, int os) { set_self(n, os); };
  mu_1__type_16 ( void ) {};
  virtual ~mu_1__type_16 ();
  mu_1_LinkedList& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_16& operator= (const mu_1__type_16& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_16& a, mu_1__type_16& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_16& a, mu_1__type_16& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_16::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_16::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_16::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 32 + os);
    delete[] s;
  }
};
mu_1__type_16::~mu_1__type_16()
{
}
/*** end array declaration ***/
mu_1__type_16 mu_1__type_16_undefined_var;

class mu_1__type_17
{
 public:
  mu_1_CXMPacket array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_17 (const char *n, int os) { set_self(n, os); };
  mu_1__type_17 ( void ) {};
  virtual ~mu_1__type_17 ();
  mu_1_CXMPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_17& operator= (const mu_1__type_17& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_17& a, mu_1__type_17& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_17& a, mu_1__type_17& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_17::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_17::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_17::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 72 + os);
    delete[] s;
  }
};
mu_1__type_17::~mu_1__type_17()
{
}
/*** end array declaration ***/
mu_1__type_17 mu_1__type_17_undefined_var;

class mu_1__type_18
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_18 (const char *n, int os) { set_self(n, os); };
  mu_1__type_18 ( void ) {};
  virtual ~mu_1__type_18 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_18& operator= (const mu_1__type_18& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_18& a, mu_1__type_18& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_18& a, mu_1__type_18& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_18::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_18::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_18::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_18::~mu_1__type_18()
{
}
/*** end array declaration ***/
mu_1__type_18 mu_1__type_18_undefined_var;

class mu_1__type_19
{
 public:
  mu_1_CXMPacket array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_19 (const char *n, int os) { set_self(n, os); };
  mu_1__type_19 ( void ) {};
  virtual ~mu_1__type_19 ();
  mu_1_CXMPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_19& operator= (const mu_1__type_19& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_19& a, mu_1__type_19& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_19& a, mu_1__type_19& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_19::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_19::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_19::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 72 + os);
    delete[] s;
  }
};
mu_1__type_19::~mu_1__type_19()
{
}
/*** end array declaration ***/
mu_1__type_19 mu_1__type_19_undefined_var;

class mu_1__type_20
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_20 (const char *n, int os) { set_self(n, os); };
  mu_1__type_20 ( void ) {};
  virtual ~mu_1__type_20 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_20& operator= (const mu_1__type_20& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_20& a, mu_1__type_20& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_20& a, mu_1__type_20& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_20::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_20::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_20::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_20::~mu_1__type_20()
{
}
/*** end array declaration ***/
mu_1__type_20 mu_1__type_20_undefined_var;

class mu_1__type_21
{
 public:
  mu_1_MemTOREntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_21 (const char *n, int os) { set_self(n, os); };
  mu_1__type_21 ( void ) {};
  virtual ~mu_1__type_21 ();
  mu_1_MemTOREntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_21& operator= (const mu_1__type_21& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_21& a, mu_1__type_21& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_21& a, mu_1__type_21& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_21::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_21::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_21::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 80 + os);
    delete[] s;
  }
};
mu_1__type_21::~mu_1__type_21()
{
}
/*** end array declaration ***/
mu_1__type_21 mu_1__type_21_undefined_var;

class mu_1__type_22
{
 public:
  mu_1_MFSEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_22 (const char *n, int os) { set_self(n, os); };
  mu_1__type_22 ( void ) {};
  virtual ~mu_1__type_22 ();
  mu_1_MFSEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_22& operator= (const mu_1__type_22& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_22& a, mu_1__type_22& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_22& a, mu_1__type_22& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_22::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_22::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_22::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 32 + os);
    delete[] s;
  }
};
mu_1__type_22::~mu_1__type_22()
{
}
/*** end array declaration ***/
mu_1__type_22 mu_1__type_22_undefined_var;

class mu_1__type_23
{
 public:
  mu_1_MonitorEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_23 (const char *n, int os) { set_self(n, os); };
  mu_1__type_23 ( void ) {};
  virtual ~mu_1__type_23 ();
  mu_1_MonitorEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_23& operator= (const mu_1__type_23& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_23& a, mu_1__type_23& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_23& a, mu_1__type_23& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_23::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_23::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_23::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 24 + os);
    delete[] s;
  }
};
mu_1__type_23::~mu_1__type_23()
{
}
/*** end array declaration ***/
mu_1__type_23 mu_1__type_23_undefined_var;

class mu_1__type_24
{
 public:
  mu_1_IFAEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_24 (const char *n, int os) { set_self(n, os); };
  mu_1__type_24 ( void ) {};
  virtual ~mu_1__type_24 ();
  mu_1_IFAEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_24& operator= (const mu_1__type_24& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_24& a, mu_1__type_24& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_24& a, mu_1__type_24& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_24::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_24::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_24::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 72 + os);
    delete[] s;
  }
};
mu_1__type_24::~mu_1__type_24()
{
}
/*** end array declaration ***/
mu_1__type_24 mu_1__type_24_undefined_var;

class mu_1_HBo
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1__type_8 mu_tractor;
  mu_1__type_9 mu_mem;
  mu_1__type_10 mu_sf;
  mu_1_UPIPacket mu_UPIOutPacket;
  mu_1_UPIPacket mu_from_ca;
  mu_1__type_11 mu_to_ca;
  mu_1__type_12 mu_to_ca__update;
  mu_1_AgentPacket mu_AgentOutPacket;
  mu_1_AgentPacket mu_from_idicagent;
  mu_1__type_13 mu_to_idicagent;
  mu_1__type_14 mu_to_idicagent__update;
  mu_1__type_15 mu_coh_ll;
  mu_1__type_16 mu_mem_ll;
  mu_1_CXMPacket mu_CXMOutPacket;
  mu_1__type_17 mu_from_mc_to_santa;
  mu_1__type_18 mu_from_mc_to_santa__update;
  mu_1__type_19 mu_from_mc_to_idiclink;
  mu_1__type_20 mu_from_mc_to_idiclink__update;
  mu_1__type_21 mu_mct;
  mu_1_MEM_TORIDp1 mu_count;
  mu_1__type_22 mu_mufasa;
  mu_1__type_23 mu_monitor;
  mu_1__type_24 mu_ifa;
  mu_1_HBo ( const char *n, int os ) { set_self(n,os); };
  mu_1_HBo ( void ) {};

  virtual ~mu_1_HBo(); 
friend int CompareWeight(mu_1_HBo& a, mu_1_HBo& b)
  {
    int w;
    w = CompareWeight(a.mu_tractor, b.mu_tractor);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mem, b.mu_mem);
    if (w!=0) return w;
    w = CompareWeight(a.mu_sf, b.mu_sf);
    if (w!=0) return w;
    w = CompareWeight(a.mu_UPIOutPacket, b.mu_UPIOutPacket);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_ca, b.mu_from_ca);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ca, b.mu_to_ca);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ca__update, b.mu_to_ca__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_AgentOutPacket, b.mu_AgentOutPacket);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_idicagent, b.mu_from_idicagent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_idicagent, b.mu_to_idicagent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_idicagent__update, b.mu_to_idicagent__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_coh_ll, b.mu_coh_ll);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mem_ll, b.mu_mem_ll);
    if (w!=0) return w;
    w = CompareWeight(a.mu_CXMOutPacket, b.mu_CXMOutPacket);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_mc_to_santa, b.mu_from_mc_to_santa);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_mc_to_santa__update, b.mu_from_mc_to_santa__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_mc_to_idiclink, b.mu_from_mc_to_idiclink);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_mc_to_idiclink__update, b.mu_from_mc_to_idiclink__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mct, b.mu_mct);
    if (w!=0) return w;
    w = CompareWeight(a.mu_count, b.mu_count);
    if (w!=0) return w;
    w = CompareWeight(a.mu_mufasa, b.mu_mufasa);
    if (w!=0) return w;
    w = CompareWeight(a.mu_monitor, b.mu_monitor);
    if (w!=0) return w;
    w = CompareWeight(a.mu_ifa, b.mu_ifa);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_HBo& a, mu_1_HBo& b)
  {
    int w;
    w = Compare(a.mu_tractor, b.mu_tractor);
    if (w!=0) return w;
    w = Compare(a.mu_mem, b.mu_mem);
    if (w!=0) return w;
    w = Compare(a.mu_sf, b.mu_sf);
    if (w!=0) return w;
    w = Compare(a.mu_UPIOutPacket, b.mu_UPIOutPacket);
    if (w!=0) return w;
    w = Compare(a.mu_from_ca, b.mu_from_ca);
    if (w!=0) return w;
    w = Compare(a.mu_to_ca, b.mu_to_ca);
    if (w!=0) return w;
    w = Compare(a.mu_to_ca__update, b.mu_to_ca__update);
    if (w!=0) return w;
    w = Compare(a.mu_AgentOutPacket, b.mu_AgentOutPacket);
    if (w!=0) return w;
    w = Compare(a.mu_from_idicagent, b.mu_from_idicagent);
    if (w!=0) return w;
    w = Compare(a.mu_to_idicagent, b.mu_to_idicagent);
    if (w!=0) return w;
    w = Compare(a.mu_to_idicagent__update, b.mu_to_idicagent__update);
    if (w!=0) return w;
    w = Compare(a.mu_coh_ll, b.mu_coh_ll);
    if (w!=0) return w;
    w = Compare(a.mu_mem_ll, b.mu_mem_ll);
    if (w!=0) return w;
    w = Compare(a.mu_CXMOutPacket, b.mu_CXMOutPacket);
    if (w!=0) return w;
    w = Compare(a.mu_from_mc_to_santa, b.mu_from_mc_to_santa);
    if (w!=0) return w;
    w = Compare(a.mu_from_mc_to_santa__update, b.mu_from_mc_to_santa__update);
    if (w!=0) return w;
    w = Compare(a.mu_from_mc_to_idiclink, b.mu_from_mc_to_idiclink);
    if (w!=0) return w;
    w = Compare(a.mu_from_mc_to_idiclink__update, b.mu_from_mc_to_idiclink__update);
    if (w!=0) return w;
    w = Compare(a.mu_mct, b.mu_mct);
    if (w!=0) return w;
    w = Compare(a.mu_count, b.mu_count);
    if (w!=0) return w;
    w = Compare(a.mu_mufasa, b.mu_mufasa);
    if (w!=0) return w;
    w = Compare(a.mu_monitor, b.mu_monitor);
    if (w!=0) return w;
    w = Compare(a.mu_ifa, b.mu_ifa);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_tractor.MultisetSort();
    mu_mem.MultisetSort();
    mu_sf.MultisetSort();
    mu_UPIOutPacket.MultisetSort();
    mu_from_ca.MultisetSort();
    mu_to_ca.MultisetSort();
    mu_to_ca__update.MultisetSort();
    mu_AgentOutPacket.MultisetSort();
    mu_from_idicagent.MultisetSort();
    mu_to_idicagent.MultisetSort();
    mu_to_idicagent__update.MultisetSort();
    mu_coh_ll.MultisetSort();
    mu_mem_ll.MultisetSort();
    mu_CXMOutPacket.MultisetSort();
    mu_from_mc_to_santa.MultisetSort();
    mu_from_mc_to_santa__update.MultisetSort();
    mu_from_mc_to_idiclink.MultisetSort();
    mu_from_mc_to_idiclink__update.MultisetSort();
    mu_mct.MultisetSort();
    mu_count.MultisetSort();
    mu_mufasa.MultisetSort();
    mu_monitor.MultisetSort();
    mu_ifa.MultisetSort();
  }
  void print_statistic()
  {
    mu_tractor.print_statistic();
    mu_mem.print_statistic();
    mu_sf.print_statistic();
    mu_UPIOutPacket.print_statistic();
    mu_from_ca.print_statistic();
    mu_to_ca.print_statistic();
    mu_to_ca__update.print_statistic();
    mu_AgentOutPacket.print_statistic();
    mu_from_idicagent.print_statistic();
    mu_to_idicagent.print_statistic();
    mu_to_idicagent__update.print_statistic();
    mu_coh_ll.print_statistic();
    mu_mem_ll.print_statistic();
    mu_CXMOutPacket.print_statistic();
    mu_from_mc_to_santa.print_statistic();
    mu_from_mc_to_santa__update.print_statistic();
    mu_from_mc_to_idiclink.print_statistic();
    mu_from_mc_to_idiclink__update.print_statistic();
    mu_mct.print_statistic();
    mu_count.print_statistic();
    mu_mufasa.print_statistic();
    mu_monitor.print_statistic();
    mu_ifa.print_statistic();
  }
  void clear() {
    mu_tractor.clear();
    mu_mem.clear();
    mu_sf.clear();
    mu_UPIOutPacket.clear();
    mu_from_ca.clear();
    mu_to_ca.clear();
    mu_to_ca__update.clear();
    mu_AgentOutPacket.clear();
    mu_from_idicagent.clear();
    mu_to_idicagent.clear();
    mu_to_idicagent__update.clear();
    mu_coh_ll.clear();
    mu_mem_ll.clear();
    mu_CXMOutPacket.clear();
    mu_from_mc_to_santa.clear();
    mu_from_mc_to_santa__update.clear();
    mu_from_mc_to_idiclink.clear();
    mu_from_mc_to_idiclink__update.clear();
    mu_mct.clear();
    mu_count.clear();
    mu_mufasa.clear();
    mu_monitor.clear();
    mu_ifa.clear();
 };
  void undefine() {
    mu_tractor.undefine();
    mu_mem.undefine();
    mu_sf.undefine();
    mu_UPIOutPacket.undefine();
    mu_from_ca.undefine();
    mu_to_ca.undefine();
    mu_to_ca__update.undefine();
    mu_AgentOutPacket.undefine();
    mu_from_idicagent.undefine();
    mu_to_idicagent.undefine();
    mu_to_idicagent__update.undefine();
    mu_coh_ll.undefine();
    mu_mem_ll.undefine();
    mu_CXMOutPacket.undefine();
    mu_from_mc_to_santa.undefine();
    mu_from_mc_to_santa__update.undefine();
    mu_from_mc_to_idiclink.undefine();
    mu_from_mc_to_idiclink__update.undefine();
    mu_mct.undefine();
    mu_count.undefine();
    mu_mufasa.undefine();
    mu_monitor.undefine();
    mu_ifa.undefine();
 };
  void reset() {
    mu_tractor.reset();
    mu_mem.reset();
    mu_sf.reset();
    mu_UPIOutPacket.reset();
    mu_from_ca.reset();
    mu_to_ca.reset();
    mu_to_ca__update.reset();
    mu_AgentOutPacket.reset();
    mu_from_idicagent.reset();
    mu_to_idicagent.reset();
    mu_to_idicagent__update.reset();
    mu_coh_ll.reset();
    mu_mem_ll.reset();
    mu_CXMOutPacket.reset();
    mu_from_mc_to_santa.reset();
    mu_from_mc_to_santa__update.reset();
    mu_from_mc_to_idiclink.reset();
    mu_from_mc_to_idiclink__update.reset();
    mu_mct.reset();
    mu_count.reset();
    mu_mufasa.reset();
    mu_monitor.reset();
    mu_ifa.reset();
 };
  void print() {
    mu_tractor.print();
    mu_mem.print();
    mu_sf.print();
    mu_UPIOutPacket.print();
    mu_from_ca.print();
    mu_to_ca.print();
    mu_to_ca__update.print();
    mu_AgentOutPacket.print();
    mu_from_idicagent.print();
    mu_to_idicagent.print();
    mu_to_idicagent__update.print();
    mu_coh_ll.print();
    mu_mem_ll.print();
    mu_CXMOutPacket.print();
    mu_from_mc_to_santa.print();
    mu_from_mc_to_santa__update.print();
    mu_from_mc_to_idiclink.print();
    mu_from_mc_to_idiclink__update.print();
    mu_mct.print();
    mu_count.print();
    mu_mufasa.print();
    mu_monitor.print();
    mu_ifa.print();
  };
  void print_diff(state *prevstate) {
    mu_tractor.print_diff(prevstate);
    mu_mem.print_diff(prevstate);
    mu_sf.print_diff(prevstate);
    mu_UPIOutPacket.print_diff(prevstate);
    mu_from_ca.print_diff(prevstate);
    mu_to_ca.print_diff(prevstate);
    mu_to_ca__update.print_diff(prevstate);
    mu_AgentOutPacket.print_diff(prevstate);
    mu_from_idicagent.print_diff(prevstate);
    mu_to_idicagent.print_diff(prevstate);
    mu_to_idicagent__update.print_diff(prevstate);
    mu_coh_ll.print_diff(prevstate);
    mu_mem_ll.print_diff(prevstate);
    mu_CXMOutPacket.print_diff(prevstate);
    mu_from_mc_to_santa.print_diff(prevstate);
    mu_from_mc_to_santa__update.print_diff(prevstate);
    mu_from_mc_to_idiclink.print_diff(prevstate);
    mu_from_mc_to_idiclink__update.print_diff(prevstate);
    mu_mct.print_diff(prevstate);
    mu_count.print_diff(prevstate);
    mu_mufasa.print_diff(prevstate);
    mu_monitor.print_diff(prevstate);
    mu_ifa.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_tractor.to_state(thestate);
    mu_mem.to_state(thestate);
    mu_sf.to_state(thestate);
    mu_UPIOutPacket.to_state(thestate);
    mu_from_ca.to_state(thestate);
    mu_to_ca.to_state(thestate);
    mu_to_ca__update.to_state(thestate);
    mu_AgentOutPacket.to_state(thestate);
    mu_from_idicagent.to_state(thestate);
    mu_to_idicagent.to_state(thestate);
    mu_to_idicagent__update.to_state(thestate);
    mu_coh_ll.to_state(thestate);
    mu_mem_ll.to_state(thestate);
    mu_CXMOutPacket.to_state(thestate);
    mu_from_mc_to_santa.to_state(thestate);
    mu_from_mc_to_santa__update.to_state(thestate);
    mu_from_mc_to_idiclink.to_state(thestate);
    mu_from_mc_to_idiclink__update.to_state(thestate);
    mu_mct.to_state(thestate);
    mu_count.to_state(thestate);
    mu_mufasa.to_state(thestate);
    mu_monitor.to_state(thestate);
    mu_ifa.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_HBo& operator= (const mu_1_HBo& from) {
    mu_tractor = from.mu_tractor;
    mu_mem = from.mu_mem;
    mu_sf = from.mu_sf;
    mu_UPIOutPacket = from.mu_UPIOutPacket;
    mu_from_ca = from.mu_from_ca;
    mu_to_ca = from.mu_to_ca;
    mu_to_ca__update = from.mu_to_ca__update;
    mu_AgentOutPacket = from.mu_AgentOutPacket;
    mu_from_idicagent = from.mu_from_idicagent;
    mu_to_idicagent = from.mu_to_idicagent;
    mu_to_idicagent__update = from.mu_to_idicagent__update;
    mu_coh_ll = from.mu_coh_ll;
    mu_mem_ll = from.mu_mem_ll;
    mu_CXMOutPacket = from.mu_CXMOutPacket;
    mu_from_mc_to_santa = from.mu_from_mc_to_santa;
    mu_from_mc_to_santa__update = from.mu_from_mc_to_santa__update;
    mu_from_mc_to_idiclink = from.mu_from_mc_to_idiclink;
    mu_from_mc_to_idiclink__update = from.mu_from_mc_to_idiclink__update;
    mu_mct = from.mu_mct;
    mu_count.value(from.mu_count.value());
    mu_mufasa = from.mu_mufasa;
    mu_monitor = from.mu_monitor;
    mu_ifa = from.mu_ifa;
    return *this;
  };
};

  void mu_1_HBo::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_HBo::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_HBo::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_tractor.set_self_2(name, ".tractor", os + 0 ); else mu_tractor.set_self_2(NULL, NULL, 0);
  if (name) mu_mem.set_self_2(name, ".mem", os + 1216 ); else mu_mem.set_self_2(NULL, NULL, 0);
  if (name) mu_sf.set_self_2(name, ".sf", os + 1224 ); else mu_sf.set_self_2(NULL, NULL, 0);
  if (name) mu_UPIOutPacket.set_self_2(name, ".UPIOutPacket", os + 1304 ); else mu_UPIOutPacket.set_self_2(NULL, NULL, 0);
  if (name) mu_from_ca.set_self_2(name, ".from_ca", os + 1376 ); else mu_from_ca.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ca.set_self_2(name, ".to_ca", os + 1448 ); else mu_to_ca.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ca__update.set_self_2(name, ".to_ca__update", os + 1664 ); else mu_to_ca__update.set_self_2(NULL, NULL, 0);
  if (name) mu_AgentOutPacket.set_self_2(name, ".AgentOutPacket", os + 1688 ); else mu_AgentOutPacket.set_self_2(NULL, NULL, 0);
  if (name) mu_from_idicagent.set_self_2(name, ".from_idicagent", os + 1784 ); else mu_from_idicagent.set_self_2(NULL, NULL, 0);
  if (name) mu_to_idicagent.set_self_2(name, ".to_idicagent", os + 1880 ); else mu_to_idicagent.set_self_2(NULL, NULL, 0);
  if (name) mu_to_idicagent__update.set_self_2(name, ".to_idicagent__update", os + 2168 ); else mu_to_idicagent__update.set_self_2(NULL, NULL, 0);
  if (name) mu_coh_ll.set_self_2(name, ".coh_ll", os + 2192 ); else mu_coh_ll.set_self_2(NULL, NULL, 0);
  if (name) mu_mem_ll.set_self_2(name, ".mem_ll", os + 2224 ); else mu_mem_ll.set_self_2(NULL, NULL, 0);
  if (name) mu_CXMOutPacket.set_self_2(name, ".CXMOutPacket", os + 2256 ); else mu_CXMOutPacket.set_self_2(NULL, NULL, 0);
  if (name) mu_from_mc_to_santa.set_self_2(name, ".from_mc_to_santa", os + 2328 ); else mu_from_mc_to_santa.set_self_2(NULL, NULL, 0);
  if (name) mu_from_mc_to_santa__update.set_self_2(name, ".from_mc_to_santa__update", os + 2544 ); else mu_from_mc_to_santa__update.set_self_2(NULL, NULL, 0);
  if (name) mu_from_mc_to_idiclink.set_self_2(name, ".from_mc_to_idiclink", os + 2568 ); else mu_from_mc_to_idiclink.set_self_2(NULL, NULL, 0);
  if (name) mu_from_mc_to_idiclink__update.set_self_2(name, ".from_mc_to_idiclink__update", os + 2784 ); else mu_from_mc_to_idiclink__update.set_self_2(NULL, NULL, 0);
  if (name) mu_mct.set_self_2(name, ".mct", os + 2808 ); else mu_mct.set_self_2(NULL, NULL, 0);
  if (name) mu_count.set_self_2(name, ".count", os + 2888 ); else mu_count.set_self_2(NULL, NULL, 0);
  if (name) mu_mufasa.set_self_2(name, ".mufasa", os + 2896 ); else mu_mufasa.set_self_2(NULL, NULL, 0);
  if (name) mu_monitor.set_self_2(name, ".monitor", os + 2928 ); else mu_monitor.set_self_2(NULL, NULL, 0);
  if (name) mu_ifa.set_self_2(name, ".ifa", os + 2952 ); else mu_ifa.set_self_2(NULL, NULL, 0);
}

mu_1_HBo::~mu_1_HBo()
{
}

/*** end record declaration ***/
mu_1_HBo mu_1_HBo_undefined_var;

class mu_1_TOREntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_UPI_Opcode mu_opcode;
  mu_1_Address mu_address;
  mu_1_RTID_STATE mu_state;
  mu_1_RTID mu_torid;
  mu_0_boolean mu_conflict;
  mu_0_boolean mu_stale;
  mu_1_TOREntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_TOREntry ( void ) {};

  virtual ~mu_1_TOREntry(); 
friend int CompareWeight(mu_1_TOREntry& a, mu_1_TOREntry& b)
  {
    int w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = CompareWeight(a.mu_torid, b.mu_torid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_conflict, b.mu_conflict);
    if (w!=0) return w;
    w = CompareWeight(a.mu_stale, b.mu_stale);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_TOREntry& a, mu_1_TOREntry& b)
  {
    int w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = Compare(a.mu_torid, b.mu_torid);
    if (w!=0) return w;
    w = Compare(a.mu_conflict, b.mu_conflict);
    if (w!=0) return w;
    w = Compare(a.mu_stale, b.mu_stale);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_opcode.MultisetSort();
    mu_address.MultisetSort();
    mu_state.MultisetSort();
    mu_torid.MultisetSort();
    mu_conflict.MultisetSort();
    mu_stale.MultisetSort();
  }
  void print_statistic()
  {
    mu_opcode.print_statistic();
    mu_address.print_statistic();
    mu_state.print_statistic();
    mu_torid.print_statistic();
    mu_conflict.print_statistic();
    mu_stale.print_statistic();
  }
  void clear() {
    mu_opcode.clear();
    mu_address.clear();
    mu_state.clear();
    mu_torid.clear();
    mu_conflict.clear();
    mu_stale.clear();
 };
  void undefine() {
    mu_opcode.undefine();
    mu_address.undefine();
    mu_state.undefine();
    mu_torid.undefine();
    mu_conflict.undefine();
    mu_stale.undefine();
 };
  void reset() {
    mu_opcode.reset();
    mu_address.reset();
    mu_state.reset();
    mu_torid.reset();
    mu_conflict.reset();
    mu_stale.reset();
 };
  void print() {
    mu_opcode.print();
    mu_address.print();
    mu_state.print();
    mu_torid.print();
    mu_conflict.print();
    mu_stale.print();
  };
  void print_diff(state *prevstate) {
    mu_opcode.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_state.print_diff(prevstate);
    mu_torid.print_diff(prevstate);
    mu_conflict.print_diff(prevstate);
    mu_stale.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_opcode.to_state(thestate);
    mu_address.to_state(thestate);
    mu_state.to_state(thestate);
    mu_torid.to_state(thestate);
    mu_conflict.to_state(thestate);
    mu_stale.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_TOREntry& operator= (const mu_1_TOREntry& from) {
    mu_opcode.value(from.mu_opcode.value());
    mu_address.value(from.mu_address.value());
    mu_state.value(from.mu_state.value());
    mu_torid.value(from.mu_torid.value());
    mu_conflict.value(from.mu_conflict.value());
    mu_stale.value(from.mu_stale.value());
    return *this;
  };
};

  void mu_1_TOREntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_TOREntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_TOREntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_opcode.set_self_2(name, ".opcode", os + 0 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 8 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_state.set_self_2(name, ".state", os + 16 ); else mu_state.set_self_2(NULL, NULL, 0);
  if (name) mu_torid.set_self_2(name, ".torid", os + 24 ); else mu_torid.set_self_2(NULL, NULL, 0);
  if (name) mu_conflict.set_self_2(name, ".conflict", os + 32 ); else mu_conflict.set_self_2(NULL, NULL, 0);
  if (name) mu_stale.set_self_2(name, ".stale", os + 40 ); else mu_stale.set_self_2(NULL, NULL, 0);
}

mu_1_TOREntry::~mu_1_TOREntry()
{
}

/*** end record declaration ***/
mu_1_TOREntry mu_1_TOREntry_undefined_var;

class mu_1_CA_SnoopEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_SRB_STATE mu_state;
  mu_1_HTID mu_htid;
  mu_1_UPI_Opcode mu_opcode;
  mu_1_RTID mu_fwdtid;
  mu_1_RTID mu_rtid;
  mu_1_UPIAgents mu_crnid;
  mu_1_CA_SnoopEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_CA_SnoopEntry ( void ) {};

  virtual ~mu_1_CA_SnoopEntry(); 
friend int CompareWeight(mu_1_CA_SnoopEntry& a, mu_1_CA_SnoopEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = CompareWeight(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_fwdtid, b.mu_fwdtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_crnid, b.mu_crnid);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_CA_SnoopEntry& a, mu_1_CA_SnoopEntry& b)
  {
    int w;
    w = Compare(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = Compare(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_fwdtid, b.mu_fwdtid);
    if (w!=0) return w;
    w = Compare(a.mu_rtid, b.mu_rtid);
    if (w!=0) return w;
    w = Compare(a.mu_crnid, b.mu_crnid);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_state.MultisetSort();
    mu_htid.MultisetSort();
    mu_opcode.MultisetSort();
    mu_fwdtid.MultisetSort();
    mu_rtid.MultisetSort();
    mu_crnid.MultisetSort();
  }
  void print_statistic()
  {
    mu_state.print_statistic();
    mu_htid.print_statistic();
    mu_opcode.print_statistic();
    mu_fwdtid.print_statistic();
    mu_rtid.print_statistic();
    mu_crnid.print_statistic();
  }
  void clear() {
    mu_state.clear();
    mu_htid.clear();
    mu_opcode.clear();
    mu_fwdtid.clear();
    mu_rtid.clear();
    mu_crnid.clear();
 };
  void undefine() {
    mu_state.undefine();
    mu_htid.undefine();
    mu_opcode.undefine();
    mu_fwdtid.undefine();
    mu_rtid.undefine();
    mu_crnid.undefine();
 };
  void reset() {
    mu_state.reset();
    mu_htid.reset();
    mu_opcode.reset();
    mu_fwdtid.reset();
    mu_rtid.reset();
    mu_crnid.reset();
 };
  void print() {
    mu_state.print();
    mu_htid.print();
    mu_opcode.print();
    mu_fwdtid.print();
    mu_rtid.print();
    mu_crnid.print();
  };
  void print_diff(state *prevstate) {
    mu_state.print_diff(prevstate);
    mu_htid.print_diff(prevstate);
    mu_opcode.print_diff(prevstate);
    mu_fwdtid.print_diff(prevstate);
    mu_rtid.print_diff(prevstate);
    mu_crnid.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_state.to_state(thestate);
    mu_htid.to_state(thestate);
    mu_opcode.to_state(thestate);
    mu_fwdtid.to_state(thestate);
    mu_rtid.to_state(thestate);
    mu_crnid.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_CA_SnoopEntry& operator= (const mu_1_CA_SnoopEntry& from) {
    mu_state.value(from.mu_state.value());
    mu_htid.value(from.mu_htid.value());
    mu_opcode.value(from.mu_opcode.value());
    mu_fwdtid.value(from.mu_fwdtid.value());
    mu_rtid.value(from.mu_rtid.value());
    mu_crnid.value(from.mu_crnid.value());
    return *this;
  };
};

  void mu_1_CA_SnoopEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_CA_SnoopEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_CA_SnoopEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_state.set_self_2(name, ".state", os + 0 ); else mu_state.set_self_2(NULL, NULL, 0);
  if (name) mu_htid.set_self_2(name, ".htid", os + 8 ); else mu_htid.set_self_2(NULL, NULL, 0);
  if (name) mu_opcode.set_self_2(name, ".opcode", os + 16 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_fwdtid.set_self_2(name, ".fwdtid", os + 24 ); else mu_fwdtid.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid.set_self_2(name, ".rtid", os + 32 ); else mu_rtid.set_self_2(NULL, NULL, 0);
  if (name) mu_crnid.set_self_2(name, ".crnid", os + 40 ); else mu_crnid.set_self_2(NULL, NULL, 0);
}

mu_1_CA_SnoopEntry::~mu_1_CA_SnoopEntry()
{
}

/*** end record declaration ***/
mu_1_CA_SnoopEntry mu_1_CA_SnoopEntry_undefined_var;

class mu_1_CacheEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_CacheState mu_state;
  mu_1_Line mu_data;
  mu_1_BE mu_be;
  mu_1_CacheEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_CacheEntry ( void ) {};

  virtual ~mu_1_CacheEntry(); 
friend int CompareWeight(mu_1_CacheEntry& a, mu_1_CacheEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_be, b.mu_be);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_CacheEntry& a, mu_1_CacheEntry& b)
  {
    int w;
    w = Compare(a.mu_state, b.mu_state);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_be, b.mu_be);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_state.MultisetSort();
    mu_data.MultisetSort();
    mu_be.MultisetSort();
  }
  void print_statistic()
  {
    mu_state.print_statistic();
    mu_data.print_statistic();
    mu_be.print_statistic();
  }
  void clear() {
    mu_state.clear();
    mu_data.clear();
    mu_be.clear();
 };
  void undefine() {
    mu_state.undefine();
    mu_data.undefine();
    mu_be.undefine();
 };
  void reset() {
    mu_state.reset();
    mu_data.reset();
    mu_be.reset();
 };
  void print() {
    mu_state.print();
    mu_data.print();
    mu_be.print();
  };
  void print_diff(state *prevstate) {
    mu_state.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_be.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_state.to_state(thestate);
    mu_data.to_state(thestate);
    mu_be.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_CacheEntry& operator= (const mu_1_CacheEntry& from) {
    mu_state.value(from.mu_state.value());
    mu_data = from.mu_data;
    mu_be = from.mu_be;
    return *this;
  };
};

  void mu_1_CacheEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_CacheEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_CacheEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_state.set_self_2(name, ".state", os + 0 ); else mu_state.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 8 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_be.set_self_2(name, ".be", os + 16 ); else mu_be.set_self_2(NULL, NULL, 0);
}

mu_1_CacheEntry::~mu_1_CacheEntry()
{
}

/*** end record declaration ***/
mu_1_CacheEntry mu_1_CacheEntry_undefined_var;

class mu_1__type_25
{
 public:
  mu_1_TOREntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_25 (const char *n, int os) { set_self(n, os); };
  mu_1__type_25 ( void ) {};
  virtual ~mu_1__type_25 ();
  mu_1_TOREntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_25& operator= (const mu_1__type_25& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_25& a, mu_1__type_25& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_25& a, mu_1__type_25& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_25::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_25::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_25::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 48 + os);
    delete[] s;
  }
};
mu_1__type_25::~mu_1__type_25()
{
}
/*** end array declaration ***/
mu_1__type_25 mu_1__type_25_undefined_var;

class mu_1__type_26
{
 public:
  mu_1_CA_SnoopEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_26 (const char *n, int os) { set_self(n, os); };
  mu_1__type_26 ( void ) {};
  virtual ~mu_1__type_26 ();
  mu_1_CA_SnoopEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_26& operator= (const mu_1__type_26& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_26& a, mu_1__type_26& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_26& a, mu_1__type_26& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_26::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_26::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_26::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 48 + os);
    delete[] s;
  }
};
mu_1__type_26::~mu_1__type_26()
{
}
/*** end array declaration ***/
mu_1__type_26 mu_1__type_26_undefined_var;

class mu_1__type_27
{
 public:
  mu_1_CacheEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_27 (const char *n, int os) { set_self(n, os); };
  mu_1__type_27 ( void ) {};
  virtual ~mu_1__type_27 ();
  mu_1_CacheEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_27& operator= (const mu_1__type_27& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_27& a, mu_1__type_27& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_27& a, mu_1__type_27& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_27::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_27::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_27::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 24 + os);
    delete[] s;
  }
};
mu_1__type_27::~mu_1__type_27()
{
}
/*** end array declaration ***/
mu_1__type_27 mu_1__type_27_undefined_var;

class mu_1__type_28
{
 public:
  mu_0_boolean array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_28 (const char *n, int os) { set_self(n, os); };
  mu_1__type_28 ( void ) {};
  virtual ~mu_1__type_28 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_28& operator= (const mu_1__type_28& from)
  {
      array[0].value(from.array[0].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_28& a, mu_1__type_28& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_28& a, mu_1__type_28& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_28::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_28::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_28::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_28::~mu_1__type_28()
{
}
/*** end array declaration ***/
mu_1__type_28 mu_1__type_28_undefined_var;

class mu_1__type_29
{
 public:
  mu_1_UPIPacket array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_29 (const char *n, int os) { set_self(n, os); };
  mu_1__type_29 ( void ) {};
  virtual ~mu_1__type_29 ();
  mu_1_UPIPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_29& operator= (const mu_1__type_29& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_29& a, mu_1__type_29& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_29& a, mu_1__type_29& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_29::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_29::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_29::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 72 + os);
    delete[] s;
  }
};
mu_1__type_29::~mu_1__type_29()
{
}
/*** end array declaration ***/
mu_1__type_29 mu_1__type_29_undefined_var;

class mu_1__type_30
{
 public:
  mu_0_boolean array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_30 (const char *n, int os) { set_self(n, os); };
  mu_1__type_30 ( void ) {};
  virtual ~mu_1__type_30 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_30& operator= (const mu_1__type_30& from)
  {
    for (int i = 0; i < 3; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_30& a, mu_1__type_30& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_30& a, mu_1__type_30& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_30::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_30::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_30::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_30::~mu_1__type_30()
{
}
/*** end array declaration ***/
mu_1__type_30 mu_1__type_30_undefined_var;

class mu_1_CA
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_UPIPacket mu_to_hbo;
  mu_0_boolean mu_to_hbo__update;
  mu_1_UPIPacket mu_from_hbo;
  mu_1__type_25 mu_tor;
  mu_1__type_26 mu_snoopq;
  mu_1_UPIAgents mu_crnid;
  mu_1__type_27 mu_cache;
  mu_1__type_28 mu_rtid_usedby_snp;
  mu_0_boolean mu_forwardFromS;
  mu_1__type_29 mu_to_ca;
  mu_1__type_30 mu_to_ca__update;
  mu_1_UPIPacket mu_from_ca;
  mu_1_IDIPacket mu_from_santa;
  mu_1_CA ( const char *n, int os ) { set_self(n,os); };
  mu_1_CA ( void ) {};

  virtual ~mu_1_CA(); 
friend int CompareWeight(mu_1_CA& a, mu_1_CA& b)
  {
    int w;
    w = CompareWeight(a.mu_to_hbo, b.mu_to_hbo);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_hbo__update, b.mu_to_hbo__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_hbo, b.mu_from_hbo);
    if (w!=0) return w;
    w = CompareWeight(a.mu_tor, b.mu_tor);
    if (w!=0) return w;
    w = CompareWeight(a.mu_snoopq, b.mu_snoopq);
    if (w!=0) return w;
    w = CompareWeight(a.mu_crnid, b.mu_crnid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_cache, b.mu_cache);
    if (w!=0) return w;
    w = CompareWeight(a.mu_rtid_usedby_snp, b.mu_rtid_usedby_snp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_forwardFromS, b.mu_forwardFromS);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ca, b.mu_to_ca);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ca__update, b.mu_to_ca__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_ca, b.mu_from_ca);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_santa, b.mu_from_santa);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_CA& a, mu_1_CA& b)
  {
    int w;
    w = Compare(a.mu_to_hbo, b.mu_to_hbo);
    if (w!=0) return w;
    w = Compare(a.mu_to_hbo__update, b.mu_to_hbo__update);
    if (w!=0) return w;
    w = Compare(a.mu_from_hbo, b.mu_from_hbo);
    if (w!=0) return w;
    w = Compare(a.mu_tor, b.mu_tor);
    if (w!=0) return w;
    w = Compare(a.mu_snoopq, b.mu_snoopq);
    if (w!=0) return w;
    w = Compare(a.mu_crnid, b.mu_crnid);
    if (w!=0) return w;
    w = Compare(a.mu_cache, b.mu_cache);
    if (w!=0) return w;
    w = Compare(a.mu_rtid_usedby_snp, b.mu_rtid_usedby_snp);
    if (w!=0) return w;
    w = Compare(a.mu_forwardFromS, b.mu_forwardFromS);
    if (w!=0) return w;
    w = Compare(a.mu_to_ca, b.mu_to_ca);
    if (w!=0) return w;
    w = Compare(a.mu_to_ca__update, b.mu_to_ca__update);
    if (w!=0) return w;
    w = Compare(a.mu_from_ca, b.mu_from_ca);
    if (w!=0) return w;
    w = Compare(a.mu_from_santa, b.mu_from_santa);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_to_hbo.MultisetSort();
    mu_to_hbo__update.MultisetSort();
    mu_from_hbo.MultisetSort();
    mu_tor.MultisetSort();
    mu_snoopq.MultisetSort();
    mu_crnid.MultisetSort();
    mu_cache.MultisetSort();
    mu_rtid_usedby_snp.MultisetSort();
    mu_forwardFromS.MultisetSort();
    mu_to_ca.MultisetSort();
    mu_to_ca__update.MultisetSort();
    mu_from_ca.MultisetSort();
    mu_from_santa.MultisetSort();
  }
  void print_statistic()
  {
    mu_to_hbo.print_statistic();
    mu_to_hbo__update.print_statistic();
    mu_from_hbo.print_statistic();
    mu_tor.print_statistic();
    mu_snoopq.print_statistic();
    mu_crnid.print_statistic();
    mu_cache.print_statistic();
    mu_rtid_usedby_snp.print_statistic();
    mu_forwardFromS.print_statistic();
    mu_to_ca.print_statistic();
    mu_to_ca__update.print_statistic();
    mu_from_ca.print_statistic();
    mu_from_santa.print_statistic();
  }
  void clear() {
    mu_to_hbo.clear();
    mu_to_hbo__update.clear();
    mu_from_hbo.clear();
    mu_tor.clear();
    mu_snoopq.clear();
    mu_crnid.clear();
    mu_cache.clear();
    mu_rtid_usedby_snp.clear();
    mu_forwardFromS.clear();
    mu_to_ca.clear();
    mu_to_ca__update.clear();
    mu_from_ca.clear();
    mu_from_santa.clear();
 };
  void undefine() {
    mu_to_hbo.undefine();
    mu_to_hbo__update.undefine();
    mu_from_hbo.undefine();
    mu_tor.undefine();
    mu_snoopq.undefine();
    mu_crnid.undefine();
    mu_cache.undefine();
    mu_rtid_usedby_snp.undefine();
    mu_forwardFromS.undefine();
    mu_to_ca.undefine();
    mu_to_ca__update.undefine();
    mu_from_ca.undefine();
    mu_from_santa.undefine();
 };
  void reset() {
    mu_to_hbo.reset();
    mu_to_hbo__update.reset();
    mu_from_hbo.reset();
    mu_tor.reset();
    mu_snoopq.reset();
    mu_crnid.reset();
    mu_cache.reset();
    mu_rtid_usedby_snp.reset();
    mu_forwardFromS.reset();
    mu_to_ca.reset();
    mu_to_ca__update.reset();
    mu_from_ca.reset();
    mu_from_santa.reset();
 };
  void print() {
    mu_to_hbo.print();
    mu_to_hbo__update.print();
    mu_from_hbo.print();
    mu_tor.print();
    mu_snoopq.print();
    mu_crnid.print();
    mu_cache.print();
    mu_rtid_usedby_snp.print();
    mu_forwardFromS.print();
    mu_to_ca.print();
    mu_to_ca__update.print();
    mu_from_ca.print();
    mu_from_santa.print();
  };
  void print_diff(state *prevstate) {
    mu_to_hbo.print_diff(prevstate);
    mu_to_hbo__update.print_diff(prevstate);
    mu_from_hbo.print_diff(prevstate);
    mu_tor.print_diff(prevstate);
    mu_snoopq.print_diff(prevstate);
    mu_crnid.print_diff(prevstate);
    mu_cache.print_diff(prevstate);
    mu_rtid_usedby_snp.print_diff(prevstate);
    mu_forwardFromS.print_diff(prevstate);
    mu_to_ca.print_diff(prevstate);
    mu_to_ca__update.print_diff(prevstate);
    mu_from_ca.print_diff(prevstate);
    mu_from_santa.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_to_hbo.to_state(thestate);
    mu_to_hbo__update.to_state(thestate);
    mu_from_hbo.to_state(thestate);
    mu_tor.to_state(thestate);
    mu_snoopq.to_state(thestate);
    mu_crnid.to_state(thestate);
    mu_cache.to_state(thestate);
    mu_rtid_usedby_snp.to_state(thestate);
    mu_forwardFromS.to_state(thestate);
    mu_to_ca.to_state(thestate);
    mu_to_ca__update.to_state(thestate);
    mu_from_ca.to_state(thestate);
    mu_from_santa.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_CA& operator= (const mu_1_CA& from) {
    mu_to_hbo = from.mu_to_hbo;
    mu_to_hbo__update.value(from.mu_to_hbo__update.value());
    mu_from_hbo = from.mu_from_hbo;
    mu_tor = from.mu_tor;
    mu_snoopq = from.mu_snoopq;
    mu_crnid.value(from.mu_crnid.value());
    mu_cache = from.mu_cache;
    mu_rtid_usedby_snp = from.mu_rtid_usedby_snp;
    mu_forwardFromS.value(from.mu_forwardFromS.value());
    mu_to_ca = from.mu_to_ca;
    mu_to_ca__update = from.mu_to_ca__update;
    mu_from_ca = from.mu_from_ca;
    mu_from_santa = from.mu_from_santa;
    return *this;
  };
};

  void mu_1_CA::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_CA::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_CA::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_to_hbo.set_self_2(name, ".to_hbo", os + 0 ); else mu_to_hbo.set_self_2(NULL, NULL, 0);
  if (name) mu_to_hbo__update.set_self_2(name, ".to_hbo__update", os + 72 ); else mu_to_hbo__update.set_self_2(NULL, NULL, 0);
  if (name) mu_from_hbo.set_self_2(name, ".from_hbo", os + 80 ); else mu_from_hbo.set_self_2(NULL, NULL, 0);
  if (name) mu_tor.set_self_2(name, ".tor", os + 152 ); else mu_tor.set_self_2(NULL, NULL, 0);
  if (name) mu_snoopq.set_self_2(name, ".snoopq", os + 200 ); else mu_snoopq.set_self_2(NULL, NULL, 0);
  if (name) mu_crnid.set_self_2(name, ".crnid", os + 248 ); else mu_crnid.set_self_2(NULL, NULL, 0);
  if (name) mu_cache.set_self_2(name, ".cache", os + 256 ); else mu_cache.set_self_2(NULL, NULL, 0);
  if (name) mu_rtid_usedby_snp.set_self_2(name, ".rtid_usedby_snp", os + 280 ); else mu_rtid_usedby_snp.set_self_2(NULL, NULL, 0);
  if (name) mu_forwardFromS.set_self_2(name, ".forwardFromS", os + 288 ); else mu_forwardFromS.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ca.set_self_2(name, ".to_ca", os + 296 ); else mu_to_ca.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ca__update.set_self_2(name, ".to_ca__update", os + 512 ); else mu_to_ca__update.set_self_2(NULL, NULL, 0);
  if (name) mu_from_ca.set_self_2(name, ".from_ca", os + 536 ); else mu_from_ca.set_self_2(NULL, NULL, 0);
  if (name) mu_from_santa.set_self_2(name, ".from_santa", os + 608 ); else mu_from_santa.set_self_2(NULL, NULL, 0);
}

mu_1_CA::~mu_1_CA()
{
}

/*** end record declaration ***/
mu_1_CA mu_1_CA_undefined_var;

class mu_1_Index__1: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Index__1& val) { return mu__byte::operator=((int) val); };
  mu_1_Index__1 (const char *name, int os): mu__byte(0, 0, 1, name, os) {};
  mu_1_Index__1 (void): mu__byte(0, 0, 1) {};
  mu_1_Index__1 (int val): mu__byte(0, 0, 1, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Index__1 mu_1_Index__1_undefined_var;

class mu_1_Count: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Count& val) { return mu__byte::operator=((int) val); };
  mu_1_Count (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1_Count (void): mu__byte(0, 1, 2) {};
  mu_1_Count (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Count mu_1_Count_undefined_var;

class mu_1_Count__1: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_Count__1& val) { return mu__byte::operator=((int) val); };
  mu_1_Count__1 (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1_Count__1 (void): mu__byte(0, 1, 2) {};
  mu_1_Count__1 (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_Count__1 mu_1_Count__1_undefined_var;

class mu_1__type_31
{
 public:
  mu_1_UPIPacket array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_31 (const char *n, int os) { set_self(n, os); };
  mu_1__type_31 ( void ) {};
  virtual ~mu_1__type_31 ();
  mu_1_UPIPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_31& operator= (const mu_1__type_31& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_31& a, mu_1__type_31& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_31& a, mu_1__type_31& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_31::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_31::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_31::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 72 + os);
    delete[] s;
  }
};
mu_1__type_31::~mu_1__type_31()
{
}
/*** end array declaration ***/
mu_1__type_31 mu_1__type_31_undefined_var;

class mu_1_UChannel__1
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_Index__1 mu_Index;
  mu_1_Count__1 mu_Count;
  mu_1__type_31 mu_pkts;
  mu_1_Count__1 mu_count;
  mu_1_UChannel__1 ( const char *n, int os ) { set_self(n,os); };
  mu_1_UChannel__1 ( void ) {};

  virtual ~mu_1_UChannel__1(); 
friend int CompareWeight(mu_1_UChannel__1& a, mu_1_UChannel__1& b)
  {
    int w;
    w = CompareWeight(a.mu_Index, b.mu_Index);
    if (w!=0) return w;
    w = CompareWeight(a.mu_Count, b.mu_Count);
    if (w!=0) return w;
    w = CompareWeight(a.mu_pkts, b.mu_pkts);
    if (w!=0) return w;
    w = CompareWeight(a.mu_count, b.mu_count);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_UChannel__1& a, mu_1_UChannel__1& b)
  {
    int w;
    w = Compare(a.mu_Index, b.mu_Index);
    if (w!=0) return w;
    w = Compare(a.mu_Count, b.mu_Count);
    if (w!=0) return w;
    w = Compare(a.mu_pkts, b.mu_pkts);
    if (w!=0) return w;
    w = Compare(a.mu_count, b.mu_count);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_Index.MultisetSort();
    mu_Count.MultisetSort();
    mu_pkts.MultisetSort();
    mu_count.MultisetSort();
  }
  void print_statistic()
  {
    mu_Index.print_statistic();
    mu_Count.print_statistic();
    mu_pkts.print_statistic();
    mu_count.print_statistic();
  }
  void clear() {
    mu_Index.clear();
    mu_Count.clear();
    mu_pkts.clear();
    mu_count.clear();
 };
  void undefine() {
    mu_Index.undefine();
    mu_Count.undefine();
    mu_pkts.undefine();
    mu_count.undefine();
 };
  void reset() {
    mu_Index.reset();
    mu_Count.reset();
    mu_pkts.reset();
    mu_count.reset();
 };
  void print() {
    mu_Index.print();
    mu_Count.print();
    mu_pkts.print();
    mu_count.print();
  };
  void print_diff(state *prevstate) {
    mu_Index.print_diff(prevstate);
    mu_Count.print_diff(prevstate);
    mu_pkts.print_diff(prevstate);
    mu_count.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_Index.to_state(thestate);
    mu_Count.to_state(thestate);
    mu_pkts.to_state(thestate);
    mu_count.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_UChannel__1& operator= (const mu_1_UChannel__1& from) {
    mu_Index.value(from.mu_Index.value());
    mu_Count.value(from.mu_Count.value());
    mu_pkts = from.mu_pkts;
    mu_count.value(from.mu_count.value());
    return *this;
  };
};

  void mu_1_UChannel__1::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_UChannel__1::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_UChannel__1::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_Index.set_self_2(name, ".Index", os + 0 ); else mu_Index.set_self_2(NULL, NULL, 0);
  if (name) mu_Count.set_self_2(name, ".Count", os + 8 ); else mu_Count.set_self_2(NULL, NULL, 0);
  if (name) mu_pkts.set_self_2(name, ".pkts", os + 16 ); else mu_pkts.set_self_2(NULL, NULL, 0);
  if (name) mu_count.set_self_2(name, ".count", os + 88 ); else mu_count.set_self_2(NULL, NULL, 0);
}

mu_1_UChannel__1::~mu_1_UChannel__1()
{
}

/*** end record declaration ***/
mu_1_UChannel__1 mu_1_UChannel__1_undefined_var;

class mu_1__type_32
{
 public:
  mu_1_CXMPacket array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_32 (const char *n, int os) { set_self(n, os); };
  mu_1__type_32 ( void ) {};
  virtual ~mu_1__type_32 ();
  mu_1_CXMPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_32& operator= (const mu_1__type_32& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_32& a, mu_1__type_32& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_32& a, mu_1__type_32& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_32::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_32::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_32::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 72 + os);
    delete[] s;
  }
};
mu_1__type_32::~mu_1__type_32()
{
}
/*** end array declaration ***/
mu_1__type_32 mu_1__type_32_undefined_var;

class mu_1_CChannel__1
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_Index__1 mu_Index;
  mu_1_Count__1 mu_Count;
  mu_1__type_32 mu_pkts;
  mu_1_Count__1 mu_count;
  mu_1_CChannel__1 ( const char *n, int os ) { set_self(n,os); };
  mu_1_CChannel__1 ( void ) {};

  virtual ~mu_1_CChannel__1(); 
friend int CompareWeight(mu_1_CChannel__1& a, mu_1_CChannel__1& b)
  {
    int w;
    w = CompareWeight(a.mu_Index, b.mu_Index);
    if (w!=0) return w;
    w = CompareWeight(a.mu_Count, b.mu_Count);
    if (w!=0) return w;
    w = CompareWeight(a.mu_pkts, b.mu_pkts);
    if (w!=0) return w;
    w = CompareWeight(a.mu_count, b.mu_count);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_CChannel__1& a, mu_1_CChannel__1& b)
  {
    int w;
    w = Compare(a.mu_Index, b.mu_Index);
    if (w!=0) return w;
    w = Compare(a.mu_Count, b.mu_Count);
    if (w!=0) return w;
    w = Compare(a.mu_pkts, b.mu_pkts);
    if (w!=0) return w;
    w = Compare(a.mu_count, b.mu_count);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_Index.MultisetSort();
    mu_Count.MultisetSort();
    mu_pkts.MultisetSort();
    mu_count.MultisetSort();
  }
  void print_statistic()
  {
    mu_Index.print_statistic();
    mu_Count.print_statistic();
    mu_pkts.print_statistic();
    mu_count.print_statistic();
  }
  void clear() {
    mu_Index.clear();
    mu_Count.clear();
    mu_pkts.clear();
    mu_count.clear();
 };
  void undefine() {
    mu_Index.undefine();
    mu_Count.undefine();
    mu_pkts.undefine();
    mu_count.undefine();
 };
  void reset() {
    mu_Index.reset();
    mu_Count.reset();
    mu_pkts.reset();
    mu_count.reset();
 };
  void print() {
    mu_Index.print();
    mu_Count.print();
    mu_pkts.print();
    mu_count.print();
  };
  void print_diff(state *prevstate) {
    mu_Index.print_diff(prevstate);
    mu_Count.print_diff(prevstate);
    mu_pkts.print_diff(prevstate);
    mu_count.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_Index.to_state(thestate);
    mu_Count.to_state(thestate);
    mu_pkts.to_state(thestate);
    mu_count.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_CChannel__1& operator= (const mu_1_CChannel__1& from) {
    mu_Index.value(from.mu_Index.value());
    mu_Count.value(from.mu_Count.value());
    mu_pkts = from.mu_pkts;
    mu_count.value(from.mu_count.value());
    return *this;
  };
};

  void mu_1_CChannel__1::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_CChannel__1::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_CChannel__1::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_Index.set_self_2(name, ".Index", os + 0 ); else mu_Index.set_self_2(NULL, NULL, 0);
  if (name) mu_Count.set_self_2(name, ".Count", os + 8 ); else mu_Count.set_self_2(NULL, NULL, 0);
  if (name) mu_pkts.set_self_2(name, ".pkts", os + 16 ); else mu_pkts.set_self_2(NULL, NULL, 0);
  if (name) mu_count.set_self_2(name, ".count", os + 88 ); else mu_count.set_self_2(NULL, NULL, 0);
}

mu_1_CChannel__1::~mu_1_CChannel__1()
{
}

/*** end record declaration ***/
mu_1_CChannel__1 mu_1_CChannel__1_undefined_var;

class mu_1_ULink
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_UChannel__1 mu_CAReq;
  mu_1_UChannel__1 mu_CAWb;
  mu_1_UChannel__1 mu_HASnp;
  mu_1_UChannel__1 mu_CAResp;
  mu_1_UChannel__1 mu_HAResp;
  mu_1_CChannel__1 mu_MCResp;
  mu_1_UPIPacket mu_from_ca;
  mu_1_UPIPacket mu_to_ha;
  mu_0_boolean mu_to_ha__update;
  mu_1_UPIPacket mu_from_ha;
  mu_1_UPIPacket mu_to_ca;
  mu_0_boolean mu_to_ca__update;
  mu_1_CXMPacket mu_from_mc;
  mu_1_IDIPacket mu_to_core;
  mu_0_boolean mu_to_core__update;
  mu_1_ULink ( const char *n, int os ) { set_self(n,os); };
  mu_1_ULink ( void ) {};

  virtual ~mu_1_ULink(); 
friend int CompareWeight(mu_1_ULink& a, mu_1_ULink& b)
  {
    int w;
    w = CompareWeight(a.mu_CAReq, b.mu_CAReq);
    if (w!=0) return w;
    w = CompareWeight(a.mu_CAWb, b.mu_CAWb);
    if (w!=0) return w;
    w = CompareWeight(a.mu_HASnp, b.mu_HASnp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_CAResp, b.mu_CAResp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_HAResp, b.mu_HAResp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_MCResp, b.mu_MCResp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_ca, b.mu_from_ca);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ha, b.mu_to_ha);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ha__update, b.mu_to_ha__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_ha, b.mu_from_ha);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ca, b.mu_to_ca);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_ca__update, b.mu_to_ca__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_mc, b.mu_from_mc);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_core, b.mu_to_core);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_core__update, b.mu_to_core__update);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_ULink& a, mu_1_ULink& b)
  {
    int w;
    w = Compare(a.mu_CAReq, b.mu_CAReq);
    if (w!=0) return w;
    w = Compare(a.mu_CAWb, b.mu_CAWb);
    if (w!=0) return w;
    w = Compare(a.mu_HASnp, b.mu_HASnp);
    if (w!=0) return w;
    w = Compare(a.mu_CAResp, b.mu_CAResp);
    if (w!=0) return w;
    w = Compare(a.mu_HAResp, b.mu_HAResp);
    if (w!=0) return w;
    w = Compare(a.mu_MCResp, b.mu_MCResp);
    if (w!=0) return w;
    w = Compare(a.mu_from_ca, b.mu_from_ca);
    if (w!=0) return w;
    w = Compare(a.mu_to_ha, b.mu_to_ha);
    if (w!=0) return w;
    w = Compare(a.mu_to_ha__update, b.mu_to_ha__update);
    if (w!=0) return w;
    w = Compare(a.mu_from_ha, b.mu_from_ha);
    if (w!=0) return w;
    w = Compare(a.mu_to_ca, b.mu_to_ca);
    if (w!=0) return w;
    w = Compare(a.mu_to_ca__update, b.mu_to_ca__update);
    if (w!=0) return w;
    w = Compare(a.mu_from_mc, b.mu_from_mc);
    if (w!=0) return w;
    w = Compare(a.mu_to_core, b.mu_to_core);
    if (w!=0) return w;
    w = Compare(a.mu_to_core__update, b.mu_to_core__update);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_CAReq.MultisetSort();
    mu_CAWb.MultisetSort();
    mu_HASnp.MultisetSort();
    mu_CAResp.MultisetSort();
    mu_HAResp.MultisetSort();
    mu_MCResp.MultisetSort();
    mu_from_ca.MultisetSort();
    mu_to_ha.MultisetSort();
    mu_to_ha__update.MultisetSort();
    mu_from_ha.MultisetSort();
    mu_to_ca.MultisetSort();
    mu_to_ca__update.MultisetSort();
    mu_from_mc.MultisetSort();
    mu_to_core.MultisetSort();
    mu_to_core__update.MultisetSort();
  }
  void print_statistic()
  {
    mu_CAReq.print_statistic();
    mu_CAWb.print_statistic();
    mu_HASnp.print_statistic();
    mu_CAResp.print_statistic();
    mu_HAResp.print_statistic();
    mu_MCResp.print_statistic();
    mu_from_ca.print_statistic();
    mu_to_ha.print_statistic();
    mu_to_ha__update.print_statistic();
    mu_from_ha.print_statistic();
    mu_to_ca.print_statistic();
    mu_to_ca__update.print_statistic();
    mu_from_mc.print_statistic();
    mu_to_core.print_statistic();
    mu_to_core__update.print_statistic();
  }
  void clear() {
    mu_CAReq.clear();
    mu_CAWb.clear();
    mu_HASnp.clear();
    mu_CAResp.clear();
    mu_HAResp.clear();
    mu_MCResp.clear();
    mu_from_ca.clear();
    mu_to_ha.clear();
    mu_to_ha__update.clear();
    mu_from_ha.clear();
    mu_to_ca.clear();
    mu_to_ca__update.clear();
    mu_from_mc.clear();
    mu_to_core.clear();
    mu_to_core__update.clear();
 };
  void undefine() {
    mu_CAReq.undefine();
    mu_CAWb.undefine();
    mu_HASnp.undefine();
    mu_CAResp.undefine();
    mu_HAResp.undefine();
    mu_MCResp.undefine();
    mu_from_ca.undefine();
    mu_to_ha.undefine();
    mu_to_ha__update.undefine();
    mu_from_ha.undefine();
    mu_to_ca.undefine();
    mu_to_ca__update.undefine();
    mu_from_mc.undefine();
    mu_to_core.undefine();
    mu_to_core__update.undefine();
 };
  void reset() {
    mu_CAReq.reset();
    mu_CAWb.reset();
    mu_HASnp.reset();
    mu_CAResp.reset();
    mu_HAResp.reset();
    mu_MCResp.reset();
    mu_from_ca.reset();
    mu_to_ha.reset();
    mu_to_ha__update.reset();
    mu_from_ha.reset();
    mu_to_ca.reset();
    mu_to_ca__update.reset();
    mu_from_mc.reset();
    mu_to_core.reset();
    mu_to_core__update.reset();
 };
  void print() {
    mu_CAReq.print();
    mu_CAWb.print();
    mu_HASnp.print();
    mu_CAResp.print();
    mu_HAResp.print();
    mu_MCResp.print();
    mu_from_ca.print();
    mu_to_ha.print();
    mu_to_ha__update.print();
    mu_from_ha.print();
    mu_to_ca.print();
    mu_to_ca__update.print();
    mu_from_mc.print();
    mu_to_core.print();
    mu_to_core__update.print();
  };
  void print_diff(state *prevstate) {
    mu_CAReq.print_diff(prevstate);
    mu_CAWb.print_diff(prevstate);
    mu_HASnp.print_diff(prevstate);
    mu_CAResp.print_diff(prevstate);
    mu_HAResp.print_diff(prevstate);
    mu_MCResp.print_diff(prevstate);
    mu_from_ca.print_diff(prevstate);
    mu_to_ha.print_diff(prevstate);
    mu_to_ha__update.print_diff(prevstate);
    mu_from_ha.print_diff(prevstate);
    mu_to_ca.print_diff(prevstate);
    mu_to_ca__update.print_diff(prevstate);
    mu_from_mc.print_diff(prevstate);
    mu_to_core.print_diff(prevstate);
    mu_to_core__update.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_CAReq.to_state(thestate);
    mu_CAWb.to_state(thestate);
    mu_HASnp.to_state(thestate);
    mu_CAResp.to_state(thestate);
    mu_HAResp.to_state(thestate);
    mu_MCResp.to_state(thestate);
    mu_from_ca.to_state(thestate);
    mu_to_ha.to_state(thestate);
    mu_to_ha__update.to_state(thestate);
    mu_from_ha.to_state(thestate);
    mu_to_ca.to_state(thestate);
    mu_to_ca__update.to_state(thestate);
    mu_from_mc.to_state(thestate);
    mu_to_core.to_state(thestate);
    mu_to_core__update.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_ULink& operator= (const mu_1_ULink& from) {
    mu_CAReq = from.mu_CAReq;
    mu_CAWb = from.mu_CAWb;
    mu_HASnp = from.mu_HASnp;
    mu_CAResp = from.mu_CAResp;
    mu_HAResp = from.mu_HAResp;
    mu_MCResp = from.mu_MCResp;
    mu_from_ca = from.mu_from_ca;
    mu_to_ha = from.mu_to_ha;
    mu_to_ha__update.value(from.mu_to_ha__update.value());
    mu_from_ha = from.mu_from_ha;
    mu_to_ca = from.mu_to_ca;
    mu_to_ca__update.value(from.mu_to_ca__update.value());
    mu_from_mc = from.mu_from_mc;
    mu_to_core = from.mu_to_core;
    mu_to_core__update.value(from.mu_to_core__update.value());
    return *this;
  };
};

  void mu_1_ULink::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_ULink::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_ULink::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_CAReq.set_self_2(name, ".CAReq", os + 0 ); else mu_CAReq.set_self_2(NULL, NULL, 0);
  if (name) mu_CAWb.set_self_2(name, ".CAWb", os + 96 ); else mu_CAWb.set_self_2(NULL, NULL, 0);
  if (name) mu_HASnp.set_self_2(name, ".HASnp", os + 192 ); else mu_HASnp.set_self_2(NULL, NULL, 0);
  if (name) mu_CAResp.set_self_2(name, ".CAResp", os + 288 ); else mu_CAResp.set_self_2(NULL, NULL, 0);
  if (name) mu_HAResp.set_self_2(name, ".HAResp", os + 384 ); else mu_HAResp.set_self_2(NULL, NULL, 0);
  if (name) mu_MCResp.set_self_2(name, ".MCResp", os + 480 ); else mu_MCResp.set_self_2(NULL, NULL, 0);
  if (name) mu_from_ca.set_self_2(name, ".from_ca", os + 576 ); else mu_from_ca.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ha.set_self_2(name, ".to_ha", os + 648 ); else mu_to_ha.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ha__update.set_self_2(name, ".to_ha__update", os + 720 ); else mu_to_ha__update.set_self_2(NULL, NULL, 0);
  if (name) mu_from_ha.set_self_2(name, ".from_ha", os + 728 ); else mu_from_ha.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ca.set_self_2(name, ".to_ca", os + 800 ); else mu_to_ca.set_self_2(NULL, NULL, 0);
  if (name) mu_to_ca__update.set_self_2(name, ".to_ca__update", os + 872 ); else mu_to_ca__update.set_self_2(NULL, NULL, 0);
  if (name) mu_from_mc.set_self_2(name, ".from_mc", os + 880 ); else mu_from_mc.set_self_2(NULL, NULL, 0);
  if (name) mu_to_core.set_self_2(name, ".to_core", os + 952 ); else mu_to_core.set_self_2(NULL, NULL, 0);
  if (name) mu_to_core__update.set_self_2(name, ".to_core__update", os + 1040 ); else mu_to_core__update.set_self_2(NULL, NULL, 0);
}

mu_1_ULink::~mu_1_ULink()
{
}

/*** end record declaration ***/
mu_1_ULink mu_1_ULink_undefined_var;

class mu_1_CQEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_0_boolean mu_valid;
  mu_1_IDI_Opcode mu_opcode;
  mu_0_boolean mu_resp_recvd;
  mu_1_CacheState mu_respstate;
  mu_1_Address mu_address;
  mu_0_boolean mu_data_recvd;
  mu_0_boolean mu_selfsnp;
  mu_0_boolean mu_data_sent;
  mu_1_HTID mu_htid;
  mu_0_boolean mu_extcmp_recvd;
  mu_1_IDI_Opcode mu_resp_opcode;
  mu_0_boolean mu_bogus;
  mu_1_Line mu_data;
  mu_0_boolean mu_stale;
  mu_1_CQEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_CQEntry ( void ) {};

  virtual ~mu_1_CQEntry(); 
friend int CompareWeight(mu_1_CQEntry& a, mu_1_CQEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_resp_recvd, b.mu_resp_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_respstate, b.mu_respstate);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data_recvd, b.mu_data_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_selfsnp, b.mu_selfsnp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data_sent, b.mu_data_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_extcmp_recvd, b.mu_extcmp_recvd);
    if (w!=0) return w;
    w = CompareWeight(a.mu_resp_opcode, b.mu_resp_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_bogus, b.mu_bogus);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = CompareWeight(a.mu_stale, b.mu_stale);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_CQEntry& a, mu_1_CQEntry& b)
  {
    int w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_resp_recvd, b.mu_resp_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_respstate, b.mu_respstate);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_data_recvd, b.mu_data_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_selfsnp, b.mu_selfsnp);
    if (w!=0) return w;
    w = Compare(a.mu_data_sent, b.mu_data_sent);
    if (w!=0) return w;
    w = Compare(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = Compare(a.mu_extcmp_recvd, b.mu_extcmp_recvd);
    if (w!=0) return w;
    w = Compare(a.mu_resp_opcode, b.mu_resp_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_bogus, b.mu_bogus);
    if (w!=0) return w;
    w = Compare(a.mu_data, b.mu_data);
    if (w!=0) return w;
    w = Compare(a.mu_stale, b.mu_stale);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_valid.MultisetSort();
    mu_opcode.MultisetSort();
    mu_resp_recvd.MultisetSort();
    mu_respstate.MultisetSort();
    mu_address.MultisetSort();
    mu_data_recvd.MultisetSort();
    mu_selfsnp.MultisetSort();
    mu_data_sent.MultisetSort();
    mu_htid.MultisetSort();
    mu_extcmp_recvd.MultisetSort();
    mu_resp_opcode.MultisetSort();
    mu_bogus.MultisetSort();
    mu_data.MultisetSort();
    mu_stale.MultisetSort();
  }
  void print_statistic()
  {
    mu_valid.print_statistic();
    mu_opcode.print_statistic();
    mu_resp_recvd.print_statistic();
    mu_respstate.print_statistic();
    mu_address.print_statistic();
    mu_data_recvd.print_statistic();
    mu_selfsnp.print_statistic();
    mu_data_sent.print_statistic();
    mu_htid.print_statistic();
    mu_extcmp_recvd.print_statistic();
    mu_resp_opcode.print_statistic();
    mu_bogus.print_statistic();
    mu_data.print_statistic();
    mu_stale.print_statistic();
  }
  void clear() {
    mu_valid.clear();
    mu_opcode.clear();
    mu_resp_recvd.clear();
    mu_respstate.clear();
    mu_address.clear();
    mu_data_recvd.clear();
    mu_selfsnp.clear();
    mu_data_sent.clear();
    mu_htid.clear();
    mu_extcmp_recvd.clear();
    mu_resp_opcode.clear();
    mu_bogus.clear();
    mu_data.clear();
    mu_stale.clear();
 };
  void undefine() {
    mu_valid.undefine();
    mu_opcode.undefine();
    mu_resp_recvd.undefine();
    mu_respstate.undefine();
    mu_address.undefine();
    mu_data_recvd.undefine();
    mu_selfsnp.undefine();
    mu_data_sent.undefine();
    mu_htid.undefine();
    mu_extcmp_recvd.undefine();
    mu_resp_opcode.undefine();
    mu_bogus.undefine();
    mu_data.undefine();
    mu_stale.undefine();
 };
  void reset() {
    mu_valid.reset();
    mu_opcode.reset();
    mu_resp_recvd.reset();
    mu_respstate.reset();
    mu_address.reset();
    mu_data_recvd.reset();
    mu_selfsnp.reset();
    mu_data_sent.reset();
    mu_htid.reset();
    mu_extcmp_recvd.reset();
    mu_resp_opcode.reset();
    mu_bogus.reset();
    mu_data.reset();
    mu_stale.reset();
 };
  void print() {
    mu_valid.print();
    mu_opcode.print();
    mu_resp_recvd.print();
    mu_respstate.print();
    mu_address.print();
    mu_data_recvd.print();
    mu_selfsnp.print();
    mu_data_sent.print();
    mu_htid.print();
    mu_extcmp_recvd.print();
    mu_resp_opcode.print();
    mu_bogus.print();
    mu_data.print();
    mu_stale.print();
  };
  void print_diff(state *prevstate) {
    mu_valid.print_diff(prevstate);
    mu_opcode.print_diff(prevstate);
    mu_resp_recvd.print_diff(prevstate);
    mu_respstate.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_data_recvd.print_diff(prevstate);
    mu_selfsnp.print_diff(prevstate);
    mu_data_sent.print_diff(prevstate);
    mu_htid.print_diff(prevstate);
    mu_extcmp_recvd.print_diff(prevstate);
    mu_resp_opcode.print_diff(prevstate);
    mu_bogus.print_diff(prevstate);
    mu_data.print_diff(prevstate);
    mu_stale.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_valid.to_state(thestate);
    mu_opcode.to_state(thestate);
    mu_resp_recvd.to_state(thestate);
    mu_respstate.to_state(thestate);
    mu_address.to_state(thestate);
    mu_data_recvd.to_state(thestate);
    mu_selfsnp.to_state(thestate);
    mu_data_sent.to_state(thestate);
    mu_htid.to_state(thestate);
    mu_extcmp_recvd.to_state(thestate);
    mu_resp_opcode.to_state(thestate);
    mu_bogus.to_state(thestate);
    mu_data.to_state(thestate);
    mu_stale.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_CQEntry& operator= (const mu_1_CQEntry& from) {
    mu_valid.value(from.mu_valid.value());
    mu_opcode.value(from.mu_opcode.value());
    mu_resp_recvd.value(from.mu_resp_recvd.value());
    mu_respstate.value(from.mu_respstate.value());
    mu_address.value(from.mu_address.value());
    mu_data_recvd.value(from.mu_data_recvd.value());
    mu_selfsnp.value(from.mu_selfsnp.value());
    mu_data_sent.value(from.mu_data_sent.value());
    mu_htid.value(from.mu_htid.value());
    mu_extcmp_recvd.value(from.mu_extcmp_recvd.value());
    mu_resp_opcode.value(from.mu_resp_opcode.value());
    mu_bogus.value(from.mu_bogus.value());
    mu_data = from.mu_data;
    mu_stale.value(from.mu_stale.value());
    return *this;
  };
};

  void mu_1_CQEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_CQEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_CQEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_valid.set_self_2(name, ".valid", os + 0 ); else mu_valid.set_self_2(NULL, NULL, 0);
  if (name) mu_opcode.set_self_2(name, ".opcode", os + 8 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_resp_recvd.set_self_2(name, ".resp_recvd", os + 16 ); else mu_resp_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_respstate.set_self_2(name, ".respstate", os + 24 ); else mu_respstate.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 32 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_data_recvd.set_self_2(name, ".data_recvd", os + 40 ); else mu_data_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_selfsnp.set_self_2(name, ".selfsnp", os + 48 ); else mu_selfsnp.set_self_2(NULL, NULL, 0);
  if (name) mu_data_sent.set_self_2(name, ".data_sent", os + 56 ); else mu_data_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_htid.set_self_2(name, ".htid", os + 64 ); else mu_htid.set_self_2(NULL, NULL, 0);
  if (name) mu_extcmp_recvd.set_self_2(name, ".extcmp_recvd", os + 72 ); else mu_extcmp_recvd.set_self_2(NULL, NULL, 0);
  if (name) mu_resp_opcode.set_self_2(name, ".resp_opcode", os + 80 ); else mu_resp_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_bogus.set_self_2(name, ".bogus", os + 88 ); else mu_bogus.set_self_2(NULL, NULL, 0);
  if (name) mu_data.set_self_2(name, ".data", os + 96 ); else mu_data.set_self_2(NULL, NULL, 0);
  if (name) mu_stale.set_self_2(name, ".stale", os + 104 ); else mu_stale.set_self_2(NULL, NULL, 0);
}

mu_1_CQEntry::~mu_1_CQEntry()
{
}

/*** end record declaration ***/
mu_1_CQEntry mu_1_CQEntry_undefined_var;

class mu_1_SnoopEntry
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_0_boolean mu_valid;
  mu_1_IDI_Opcode mu_opcode;
  mu_1_Address mu_address;
  mu_1_HTID mu_htid;
  mu_0_boolean mu_resp_sent;
  mu_0_boolean mu_data_sent;
  mu_1_IDI_Opcode mu_resp_opcode;
  mu_0_boolean mu_resp_computed;
  mu_1_SnoopEntry ( const char *n, int os ) { set_self(n,os); };
  mu_1_SnoopEntry ( void ) {};

  virtual ~mu_1_SnoopEntry(); 
friend int CompareWeight(mu_1_SnoopEntry& a, mu_1_SnoopEntry& b)
  {
    int w;
    w = CompareWeight(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = CompareWeight(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_resp_sent, b.mu_resp_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_data_sent, b.mu_data_sent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_resp_opcode, b.mu_resp_opcode);
    if (w!=0) return w;
    w = CompareWeight(a.mu_resp_computed, b.mu_resp_computed);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_SnoopEntry& a, mu_1_SnoopEntry& b)
  {
    int w;
    w = Compare(a.mu_valid, b.mu_valid);
    if (w!=0) return w;
    w = Compare(a.mu_opcode, b.mu_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_address, b.mu_address);
    if (w!=0) return w;
    w = Compare(a.mu_htid, b.mu_htid);
    if (w!=0) return w;
    w = Compare(a.mu_resp_sent, b.mu_resp_sent);
    if (w!=0) return w;
    w = Compare(a.mu_data_sent, b.mu_data_sent);
    if (w!=0) return w;
    w = Compare(a.mu_resp_opcode, b.mu_resp_opcode);
    if (w!=0) return w;
    w = Compare(a.mu_resp_computed, b.mu_resp_computed);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_valid.MultisetSort();
    mu_opcode.MultisetSort();
    mu_address.MultisetSort();
    mu_htid.MultisetSort();
    mu_resp_sent.MultisetSort();
    mu_data_sent.MultisetSort();
    mu_resp_opcode.MultisetSort();
    mu_resp_computed.MultisetSort();
  }
  void print_statistic()
  {
    mu_valid.print_statistic();
    mu_opcode.print_statistic();
    mu_address.print_statistic();
    mu_htid.print_statistic();
    mu_resp_sent.print_statistic();
    mu_data_sent.print_statistic();
    mu_resp_opcode.print_statistic();
    mu_resp_computed.print_statistic();
  }
  void clear() {
    mu_valid.clear();
    mu_opcode.clear();
    mu_address.clear();
    mu_htid.clear();
    mu_resp_sent.clear();
    mu_data_sent.clear();
    mu_resp_opcode.clear();
    mu_resp_computed.clear();
 };
  void undefine() {
    mu_valid.undefine();
    mu_opcode.undefine();
    mu_address.undefine();
    mu_htid.undefine();
    mu_resp_sent.undefine();
    mu_data_sent.undefine();
    mu_resp_opcode.undefine();
    mu_resp_computed.undefine();
 };
  void reset() {
    mu_valid.reset();
    mu_opcode.reset();
    mu_address.reset();
    mu_htid.reset();
    mu_resp_sent.reset();
    mu_data_sent.reset();
    mu_resp_opcode.reset();
    mu_resp_computed.reset();
 };
  void print() {
    mu_valid.print();
    mu_opcode.print();
    mu_address.print();
    mu_htid.print();
    mu_resp_sent.print();
    mu_data_sent.print();
    mu_resp_opcode.print();
    mu_resp_computed.print();
  };
  void print_diff(state *prevstate) {
    mu_valid.print_diff(prevstate);
    mu_opcode.print_diff(prevstate);
    mu_address.print_diff(prevstate);
    mu_htid.print_diff(prevstate);
    mu_resp_sent.print_diff(prevstate);
    mu_data_sent.print_diff(prevstate);
    mu_resp_opcode.print_diff(prevstate);
    mu_resp_computed.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_valid.to_state(thestate);
    mu_opcode.to_state(thestate);
    mu_address.to_state(thestate);
    mu_htid.to_state(thestate);
    mu_resp_sent.to_state(thestate);
    mu_data_sent.to_state(thestate);
    mu_resp_opcode.to_state(thestate);
    mu_resp_computed.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_SnoopEntry& operator= (const mu_1_SnoopEntry& from) {
    mu_valid.value(from.mu_valid.value());
    mu_opcode.value(from.mu_opcode.value());
    mu_address.value(from.mu_address.value());
    mu_htid.value(from.mu_htid.value());
    mu_resp_sent.value(from.mu_resp_sent.value());
    mu_data_sent.value(from.mu_data_sent.value());
    mu_resp_opcode.value(from.mu_resp_opcode.value());
    mu_resp_computed.value(from.mu_resp_computed.value());
    return *this;
  };
};

  void mu_1_SnoopEntry::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_SnoopEntry::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_SnoopEntry::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_valid.set_self_2(name, ".valid", os + 0 ); else mu_valid.set_self_2(NULL, NULL, 0);
  if (name) mu_opcode.set_self_2(name, ".opcode", os + 8 ); else mu_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_address.set_self_2(name, ".address", os + 16 ); else mu_address.set_self_2(NULL, NULL, 0);
  if (name) mu_htid.set_self_2(name, ".htid", os + 24 ); else mu_htid.set_self_2(NULL, NULL, 0);
  if (name) mu_resp_sent.set_self_2(name, ".resp_sent", os + 32 ); else mu_resp_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_data_sent.set_self_2(name, ".data_sent", os + 40 ); else mu_data_sent.set_self_2(NULL, NULL, 0);
  if (name) mu_resp_opcode.set_self_2(name, ".resp_opcode", os + 48 ); else mu_resp_opcode.set_self_2(NULL, NULL, 0);
  if (name) mu_resp_computed.set_self_2(name, ".resp_computed", os + 56 ); else mu_resp_computed.set_self_2(NULL, NULL, 0);
}

mu_1_SnoopEntry::~mu_1_SnoopEntry()
{
}

/*** end record declaration ***/
mu_1_SnoopEntry mu_1_SnoopEntry_undefined_var;

class mu_1_range__3: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_range__3& val) { return mu__byte::operator=((int) val); };
  mu_1_range__3 (const char *name, int os): mu__byte(0, 2, 2, name, os) {};
  mu_1_range__3 (void): mu__byte(0, 2, 2) {};
  mu_1_range__3 (int val): mu__byte(0, 2, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_range__3 mu_1_range__3_undefined_var;

class mu_1__type_33
{
 public:
  mu_1_CQEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_33 (const char *n, int os) { set_self(n, os); };
  mu_1__type_33 ( void ) {};
  virtual ~mu_1__type_33 ();
  mu_1_CQEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_33& operator= (const mu_1__type_33& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_33& a, mu_1__type_33& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_33& a, mu_1__type_33& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_33::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_33::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_33::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 112 + os);
    delete[] s;
  }
};
mu_1__type_33::~mu_1__type_33()
{
}
/*** end array declaration ***/
mu_1__type_33 mu_1__type_33_undefined_var;

class mu_1__type_34
{
 public:
  mu_1_CacheEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_34 (const char *n, int os) { set_self(n, os); };
  mu_1__type_34 ( void ) {};
  virtual ~mu_1__type_34 ();
  mu_1_CacheEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_34& operator= (const mu_1__type_34& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_34& a, mu_1__type_34& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_34& a, mu_1__type_34& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_34::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_34::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_34::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 24 + os);
    delete[] s;
  }
};
mu_1__type_34::~mu_1__type_34()
{
}
/*** end array declaration ***/
mu_1__type_34 mu_1__type_34_undefined_var;

class mu_1__type_35
{
 public:
  mu_1_SnoopEntry array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_35 (const char *n, int os) { set_self(n, os); };
  mu_1__type_35 ( void ) {};
  virtual ~mu_1__type_35 ();
  mu_1_SnoopEntry& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_35& operator= (const mu_1__type_35& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_35& a, mu_1__type_35& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_35& a, mu_1__type_35& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_35::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_35::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_35::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 64 + os);
    delete[] s;
  }
};
mu_1__type_35::~mu_1__type_35()
{
}
/*** end array declaration ***/
mu_1__type_35 mu_1__type_35_undefined_var;

class mu_1__type_36
{
 public:
  mu_0_boolean array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_36 (const char *n, int os) { set_self(n, os); };
  mu_1__type_36 ( void ) {};
  virtual ~mu_1__type_36 ();
  mu_0_boolean& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_36& operator= (const mu_1__type_36& from)
  {
      array[0].value(from.array[0].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_36& a, mu_1__type_36& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_36& a, mu_1__type_36& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_36::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_36::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_36::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_36::~mu_1__type_36()
{
}
/*** end array declaration ***/
mu_1__type_36 mu_1__type_36_undefined_var;

class mu_1_IDIAgent
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_IDIPacket mu_to_hbo;
  mu_0_boolean mu_to_hbo__update;
  mu_1_IDIPacket mu_from_hbo;
  mu_1__type_33 mu_cq;
  mu_1__type_34 mu_cache;
  mu_1__type_35 mu_snoopq;
  mu_1__type_36 mu_address_monitored;
  mu_1_IDIAgent ( const char *n, int os ) { set_self(n,os); };
  mu_1_IDIAgent ( void ) {};

  virtual ~mu_1_IDIAgent(); 
friend int CompareWeight(mu_1_IDIAgent& a, mu_1_IDIAgent& b)
  {
    int w;
    w = CompareWeight(a.mu_to_hbo, b.mu_to_hbo);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_hbo__update, b.mu_to_hbo__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_hbo, b.mu_from_hbo);
    if (w!=0) return w;
    w = CompareWeight(a.mu_cq, b.mu_cq);
    if (w!=0) return w;
    w = CompareWeight(a.mu_cache, b.mu_cache);
    if (w!=0) return w;
    w = CompareWeight(a.mu_snoopq, b.mu_snoopq);
    if (w!=0) return w;
    w = CompareWeight(a.mu_address_monitored, b.mu_address_monitored);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_IDIAgent& a, mu_1_IDIAgent& b)
  {
    int w;
    w = Compare(a.mu_to_hbo, b.mu_to_hbo);
    if (w!=0) return w;
    w = Compare(a.mu_to_hbo__update, b.mu_to_hbo__update);
    if (w!=0) return w;
    w = Compare(a.mu_from_hbo, b.mu_from_hbo);
    if (w!=0) return w;
    w = Compare(a.mu_cq, b.mu_cq);
    if (w!=0) return w;
    w = Compare(a.mu_cache, b.mu_cache);
    if (w!=0) return w;
    w = Compare(a.mu_snoopq, b.mu_snoopq);
    if (w!=0) return w;
    w = Compare(a.mu_address_monitored, b.mu_address_monitored);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_to_hbo.MultisetSort();
    mu_to_hbo__update.MultisetSort();
    mu_from_hbo.MultisetSort();
    mu_cq.MultisetSort();
    mu_cache.MultisetSort();
    mu_snoopq.MultisetSort();
    mu_address_monitored.MultisetSort();
  }
  void print_statistic()
  {
    mu_to_hbo.print_statistic();
    mu_to_hbo__update.print_statistic();
    mu_from_hbo.print_statistic();
    mu_cq.print_statistic();
    mu_cache.print_statistic();
    mu_snoopq.print_statistic();
    mu_address_monitored.print_statistic();
  }
  void clear() {
    mu_to_hbo.clear();
    mu_to_hbo__update.clear();
    mu_from_hbo.clear();
    mu_cq.clear();
    mu_cache.clear();
    mu_snoopq.clear();
    mu_address_monitored.clear();
 };
  void undefine() {
    mu_to_hbo.undefine();
    mu_to_hbo__update.undefine();
    mu_from_hbo.undefine();
    mu_cq.undefine();
    mu_cache.undefine();
    mu_snoopq.undefine();
    mu_address_monitored.undefine();
 };
  void reset() {
    mu_to_hbo.reset();
    mu_to_hbo__update.reset();
    mu_from_hbo.reset();
    mu_cq.reset();
    mu_cache.reset();
    mu_snoopq.reset();
    mu_address_monitored.reset();
 };
  void print() {
    mu_to_hbo.print();
    mu_to_hbo__update.print();
    mu_from_hbo.print();
    mu_cq.print();
    mu_cache.print();
    mu_snoopq.print();
    mu_address_monitored.print();
  };
  void print_diff(state *prevstate) {
    mu_to_hbo.print_diff(prevstate);
    mu_to_hbo__update.print_diff(prevstate);
    mu_from_hbo.print_diff(prevstate);
    mu_cq.print_diff(prevstate);
    mu_cache.print_diff(prevstate);
    mu_snoopq.print_diff(prevstate);
    mu_address_monitored.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_to_hbo.to_state(thestate);
    mu_to_hbo__update.to_state(thestate);
    mu_from_hbo.to_state(thestate);
    mu_cq.to_state(thestate);
    mu_cache.to_state(thestate);
    mu_snoopq.to_state(thestate);
    mu_address_monitored.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_IDIAgent& operator= (const mu_1_IDIAgent& from) {
    mu_to_hbo = from.mu_to_hbo;
    mu_to_hbo__update.value(from.mu_to_hbo__update.value());
    mu_from_hbo = from.mu_from_hbo;
    mu_cq = from.mu_cq;
    mu_cache = from.mu_cache;
    mu_snoopq = from.mu_snoopq;
    mu_address_monitored = from.mu_address_monitored;
    return *this;
  };
};

  void mu_1_IDIAgent::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_IDIAgent::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_IDIAgent::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_to_hbo.set_self_2(name, ".to_hbo", os + 0 ); else mu_to_hbo.set_self_2(NULL, NULL, 0);
  if (name) mu_to_hbo__update.set_self_2(name, ".to_hbo__update", os + 88 ); else mu_to_hbo__update.set_self_2(NULL, NULL, 0);
  if (name) mu_from_hbo.set_self_2(name, ".from_hbo", os + 96 ); else mu_from_hbo.set_self_2(NULL, NULL, 0);
  if (name) mu_cq.set_self_2(name, ".cq", os + 184 ); else mu_cq.set_self_2(NULL, NULL, 0);
  if (name) mu_cache.set_self_2(name, ".cache", os + 296 ); else mu_cache.set_self_2(NULL, NULL, 0);
  if (name) mu_snoopq.set_self_2(name, ".snoopq", os + 320 ); else mu_snoopq.set_self_2(NULL, NULL, 0);
  if (name) mu_address_monitored.set_self_2(name, ".address_monitored", os + 384 ); else mu_address_monitored.set_self_2(NULL, NULL, 0);
}

mu_1_IDIAgent::~mu_1_IDIAgent()
{
}

/*** end record declaration ***/
mu_1_IDIAgent mu_1_IDIAgent_undefined_var;

class mu_1__type_37
{
 public:
  mu_1_AgentPacket array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_37 (const char *n, int os) { set_self(n, os); };
  mu_1__type_37 ( void ) {};
  virtual ~mu_1__type_37 ();
  mu_1_AgentPacket& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_37& operator= (const mu_1__type_37& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_37& a, mu_1__type_37& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_37& a, mu_1__type_37& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_37::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_37::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_37::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 96 + os);
    delete[] s;
  }
};
mu_1__type_37::~mu_1__type_37()
{
}
/*** end array declaration ***/
mu_1__type_37 mu_1__type_37_undefined_var;

class mu_1_Channel__1
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_Index__1 mu_Index;
  mu_1_Count__1 mu_Count;
  mu_1__type_37 mu_pkts;
  mu_1_Count__1 mu_count;
  mu_1_Channel__1 ( const char *n, int os ) { set_self(n,os); };
  mu_1_Channel__1 ( void ) {};

  virtual ~mu_1_Channel__1(); 
friend int CompareWeight(mu_1_Channel__1& a, mu_1_Channel__1& b)
  {
    int w;
    w = CompareWeight(a.mu_Index, b.mu_Index);
    if (w!=0) return w;
    w = CompareWeight(a.mu_Count, b.mu_Count);
    if (w!=0) return w;
    w = CompareWeight(a.mu_pkts, b.mu_pkts);
    if (w!=0) return w;
    w = CompareWeight(a.mu_count, b.mu_count);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_Channel__1& a, mu_1_Channel__1& b)
  {
    int w;
    w = Compare(a.mu_Index, b.mu_Index);
    if (w!=0) return w;
    w = Compare(a.mu_Count, b.mu_Count);
    if (w!=0) return w;
    w = Compare(a.mu_pkts, b.mu_pkts);
    if (w!=0) return w;
    w = Compare(a.mu_count, b.mu_count);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_Index.MultisetSort();
    mu_Count.MultisetSort();
    mu_pkts.MultisetSort();
    mu_count.MultisetSort();
  }
  void print_statistic()
  {
    mu_Index.print_statistic();
    mu_Count.print_statistic();
    mu_pkts.print_statistic();
    mu_count.print_statistic();
  }
  void clear() {
    mu_Index.clear();
    mu_Count.clear();
    mu_pkts.clear();
    mu_count.clear();
 };
  void undefine() {
    mu_Index.undefine();
    mu_Count.undefine();
    mu_pkts.undefine();
    mu_count.undefine();
 };
  void reset() {
    mu_Index.reset();
    mu_Count.reset();
    mu_pkts.reset();
    mu_count.reset();
 };
  void print() {
    mu_Index.print();
    mu_Count.print();
    mu_pkts.print();
    mu_count.print();
  };
  void print_diff(state *prevstate) {
    mu_Index.print_diff(prevstate);
    mu_Count.print_diff(prevstate);
    mu_pkts.print_diff(prevstate);
    mu_count.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_Index.to_state(thestate);
    mu_Count.to_state(thestate);
    mu_pkts.to_state(thestate);
    mu_count.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_Channel__1& operator= (const mu_1_Channel__1& from) {
    mu_Index.value(from.mu_Index.value());
    mu_Count.value(from.mu_Count.value());
    mu_pkts = from.mu_pkts;
    mu_count.value(from.mu_count.value());
    return *this;
  };
};

  void mu_1_Channel__1::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_Channel__1::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_Channel__1::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_Index.set_self_2(name, ".Index", os + 0 ); else mu_Index.set_self_2(NULL, NULL, 0);
  if (name) mu_Count.set_self_2(name, ".Count", os + 8 ); else mu_Count.set_self_2(NULL, NULL, 0);
  if (name) mu_pkts.set_self_2(name, ".pkts", os + 16 ); else mu_pkts.set_self_2(NULL, NULL, 0);
  if (name) mu_count.set_self_2(name, ".count", os + 112 ); else mu_count.set_self_2(NULL, NULL, 0);
}

mu_1_Channel__1::~mu_1_Channel__1()
{
}

/*** end record declaration ***/
mu_1_Channel__1 mu_1_Channel__1_undefined_var;

class mu_1_Link
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_Channel__1 mu_A2FReq;
  mu_1_Channel__1 mu_F2AResp;
  mu_1_Channel__1 mu_F2AData;
  mu_1_Channel__1 mu_A2FResp;
  mu_1_Channel__1 mu_A2FData;
  mu_1_Channel__1 mu_F2AReq;
  mu_1_IDIPacket mu_from_agent;
  mu_1_AgentPacket mu_to_fabric;
  mu_0_boolean mu_to_fabric__update;
  mu_1_AgentPacket mu_from_fabric;
  mu_1_IDIPacket mu_to_agent;
  mu_0_boolean mu_to_agent__update;
  mu_1_IDICAgents mu_network_id;
  mu_1_CXMPacket mu_from_mc;
  mu_1_Link ( const char *n, int os ) { set_self(n,os); };
  mu_1_Link ( void ) {};

  virtual ~mu_1_Link(); 
friend int CompareWeight(mu_1_Link& a, mu_1_Link& b)
  {
    int w;
    w = CompareWeight(a.mu_A2FReq, b.mu_A2FReq);
    if (w!=0) return w;
    w = CompareWeight(a.mu_F2AResp, b.mu_F2AResp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_F2AData, b.mu_F2AData);
    if (w!=0) return w;
    w = CompareWeight(a.mu_A2FResp, b.mu_A2FResp);
    if (w!=0) return w;
    w = CompareWeight(a.mu_A2FData, b.mu_A2FData);
    if (w!=0) return w;
    w = CompareWeight(a.mu_F2AReq, b.mu_F2AReq);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_agent, b.mu_from_agent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_fabric, b.mu_to_fabric);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_fabric__update, b.mu_to_fabric__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_fabric, b.mu_from_fabric);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_agent, b.mu_to_agent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_to_agent__update, b.mu_to_agent__update);
    if (w!=0) return w;
    w = CompareWeight(a.mu_network_id, b.mu_network_id);
    if (w!=0) return w;
    w = CompareWeight(a.mu_from_mc, b.mu_from_mc);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_Link& a, mu_1_Link& b)
  {
    int w;
    w = Compare(a.mu_A2FReq, b.mu_A2FReq);
    if (w!=0) return w;
    w = Compare(a.mu_F2AResp, b.mu_F2AResp);
    if (w!=0) return w;
    w = Compare(a.mu_F2AData, b.mu_F2AData);
    if (w!=0) return w;
    w = Compare(a.mu_A2FResp, b.mu_A2FResp);
    if (w!=0) return w;
    w = Compare(a.mu_A2FData, b.mu_A2FData);
    if (w!=0) return w;
    w = Compare(a.mu_F2AReq, b.mu_F2AReq);
    if (w!=0) return w;
    w = Compare(a.mu_from_agent, b.mu_from_agent);
    if (w!=0) return w;
    w = Compare(a.mu_to_fabric, b.mu_to_fabric);
    if (w!=0) return w;
    w = Compare(a.mu_to_fabric__update, b.mu_to_fabric__update);
    if (w!=0) return w;
    w = Compare(a.mu_from_fabric, b.mu_from_fabric);
    if (w!=0) return w;
    w = Compare(a.mu_to_agent, b.mu_to_agent);
    if (w!=0) return w;
    w = Compare(a.mu_to_agent__update, b.mu_to_agent__update);
    if (w!=0) return w;
    w = Compare(a.mu_network_id, b.mu_network_id);
    if (w!=0) return w;
    w = Compare(a.mu_from_mc, b.mu_from_mc);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_A2FReq.MultisetSort();
    mu_F2AResp.MultisetSort();
    mu_F2AData.MultisetSort();
    mu_A2FResp.MultisetSort();
    mu_A2FData.MultisetSort();
    mu_F2AReq.MultisetSort();
    mu_from_agent.MultisetSort();
    mu_to_fabric.MultisetSort();
    mu_to_fabric__update.MultisetSort();
    mu_from_fabric.MultisetSort();
    mu_to_agent.MultisetSort();
    mu_to_agent__update.MultisetSort();
    mu_network_id.MultisetSort();
    mu_from_mc.MultisetSort();
  }
  void print_statistic()
  {
    mu_A2FReq.print_statistic();
    mu_F2AResp.print_statistic();
    mu_F2AData.print_statistic();
    mu_A2FResp.print_statistic();
    mu_A2FData.print_statistic();
    mu_F2AReq.print_statistic();
    mu_from_agent.print_statistic();
    mu_to_fabric.print_statistic();
    mu_to_fabric__update.print_statistic();
    mu_from_fabric.print_statistic();
    mu_to_agent.print_statistic();
    mu_to_agent__update.print_statistic();
    mu_network_id.print_statistic();
    mu_from_mc.print_statistic();
  }
  void clear() {
    mu_A2FReq.clear();
    mu_F2AResp.clear();
    mu_F2AData.clear();
    mu_A2FResp.clear();
    mu_A2FData.clear();
    mu_F2AReq.clear();
    mu_from_agent.clear();
    mu_to_fabric.clear();
    mu_to_fabric__update.clear();
    mu_from_fabric.clear();
    mu_to_agent.clear();
    mu_to_agent__update.clear();
    mu_network_id.clear();
    mu_from_mc.clear();
 };
  void undefine() {
    mu_A2FReq.undefine();
    mu_F2AResp.undefine();
    mu_F2AData.undefine();
    mu_A2FResp.undefine();
    mu_A2FData.undefine();
    mu_F2AReq.undefine();
    mu_from_agent.undefine();
    mu_to_fabric.undefine();
    mu_to_fabric__update.undefine();
    mu_from_fabric.undefine();
    mu_to_agent.undefine();
    mu_to_agent__update.undefine();
    mu_network_id.undefine();
    mu_from_mc.undefine();
 };
  void reset() {
    mu_A2FReq.reset();
    mu_F2AResp.reset();
    mu_F2AData.reset();
    mu_A2FResp.reset();
    mu_A2FData.reset();
    mu_F2AReq.reset();
    mu_from_agent.reset();
    mu_to_fabric.reset();
    mu_to_fabric__update.reset();
    mu_from_fabric.reset();
    mu_to_agent.reset();
    mu_to_agent__update.reset();
    mu_network_id.reset();
    mu_from_mc.reset();
 };
  void print() {
    mu_A2FReq.print();
    mu_F2AResp.print();
    mu_F2AData.print();
    mu_A2FResp.print();
    mu_A2FData.print();
    mu_F2AReq.print();
    mu_from_agent.print();
    mu_to_fabric.print();
    mu_to_fabric__update.print();
    mu_from_fabric.print();
    mu_to_agent.print();
    mu_to_agent__update.print();
    mu_network_id.print();
    mu_from_mc.print();
  };
  void print_diff(state *prevstate) {
    mu_A2FReq.print_diff(prevstate);
    mu_F2AResp.print_diff(prevstate);
    mu_F2AData.print_diff(prevstate);
    mu_A2FResp.print_diff(prevstate);
    mu_A2FData.print_diff(prevstate);
    mu_F2AReq.print_diff(prevstate);
    mu_from_agent.print_diff(prevstate);
    mu_to_fabric.print_diff(prevstate);
    mu_to_fabric__update.print_diff(prevstate);
    mu_from_fabric.print_diff(prevstate);
    mu_to_agent.print_diff(prevstate);
    mu_to_agent__update.print_diff(prevstate);
    mu_network_id.print_diff(prevstate);
    mu_from_mc.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_A2FReq.to_state(thestate);
    mu_F2AResp.to_state(thestate);
    mu_F2AData.to_state(thestate);
    mu_A2FResp.to_state(thestate);
    mu_A2FData.to_state(thestate);
    mu_F2AReq.to_state(thestate);
    mu_from_agent.to_state(thestate);
    mu_to_fabric.to_state(thestate);
    mu_to_fabric__update.to_state(thestate);
    mu_from_fabric.to_state(thestate);
    mu_to_agent.to_state(thestate);
    mu_to_agent__update.to_state(thestate);
    mu_network_id.to_state(thestate);
    mu_from_mc.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_Link& operator= (const mu_1_Link& from) {
    mu_A2FReq = from.mu_A2FReq;
    mu_F2AResp = from.mu_F2AResp;
    mu_F2AData = from.mu_F2AData;
    mu_A2FResp = from.mu_A2FResp;
    mu_A2FData = from.mu_A2FData;
    mu_F2AReq = from.mu_F2AReq;
    mu_from_agent = from.mu_from_agent;
    mu_to_fabric = from.mu_to_fabric;
    mu_to_fabric__update.value(from.mu_to_fabric__update.value());
    mu_from_fabric = from.mu_from_fabric;
    mu_to_agent = from.mu_to_agent;
    mu_to_agent__update.value(from.mu_to_agent__update.value());
    mu_network_id.value(from.mu_network_id.value());
    mu_from_mc = from.mu_from_mc;
    return *this;
  };
};

  void mu_1_Link::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_Link::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_Link::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_A2FReq.set_self_2(name, ".A2FReq", os + 0 ); else mu_A2FReq.set_self_2(NULL, NULL, 0);
  if (name) mu_F2AResp.set_self_2(name, ".F2AResp", os + 120 ); else mu_F2AResp.set_self_2(NULL, NULL, 0);
  if (name) mu_F2AData.set_self_2(name, ".F2AData", os + 240 ); else mu_F2AData.set_self_2(NULL, NULL, 0);
  if (name) mu_A2FResp.set_self_2(name, ".A2FResp", os + 360 ); else mu_A2FResp.set_self_2(NULL, NULL, 0);
  if (name) mu_A2FData.set_self_2(name, ".A2FData", os + 480 ); else mu_A2FData.set_self_2(NULL, NULL, 0);
  if (name) mu_F2AReq.set_self_2(name, ".F2AReq", os + 600 ); else mu_F2AReq.set_self_2(NULL, NULL, 0);
  if (name) mu_from_agent.set_self_2(name, ".from_agent", os + 720 ); else mu_from_agent.set_self_2(NULL, NULL, 0);
  if (name) mu_to_fabric.set_self_2(name, ".to_fabric", os + 808 ); else mu_to_fabric.set_self_2(NULL, NULL, 0);
  if (name) mu_to_fabric__update.set_self_2(name, ".to_fabric__update", os + 904 ); else mu_to_fabric__update.set_self_2(NULL, NULL, 0);
  if (name) mu_from_fabric.set_self_2(name, ".from_fabric", os + 912 ); else mu_from_fabric.set_self_2(NULL, NULL, 0);
  if (name) mu_to_agent.set_self_2(name, ".to_agent", os + 1008 ); else mu_to_agent.set_self_2(NULL, NULL, 0);
  if (name) mu_to_agent__update.set_self_2(name, ".to_agent__update", os + 1096 ); else mu_to_agent__update.set_self_2(NULL, NULL, 0);
  if (name) mu_network_id.set_self_2(name, ".network_id", os + 1104 ); else mu_network_id.set_self_2(NULL, NULL, 0);
  if (name) mu_from_mc.set_self_2(name, ".from_mc", os + 1112 ); else mu_from_mc.set_self_2(NULL, NULL, 0);
}

mu_1_Link::~mu_1_Link()
{
}

/*** end record declaration ***/
mu_1_Link mu_1_Link_undefined_var;

class mu_1__type_38
{
 public:
  mu_1_Line array[ 1 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_38 (const char *n, int os) { set_self(n, os); };
  mu_1__type_38 ( void ) {};
  virtual ~mu_1__type_38 ();
  mu_1_Line& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 0 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_38& operator= (const mu_1__type_38& from)
  {
      array[0] = from.array[0];
    return *this;
  }

friend int CompareWeight(mu_1__type_38& a, mu_1__type_38& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_38& a, mu_1__type_38& b)
  {
    int w;
    for (int i=0; i<1; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<1; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<1; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 1; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 1; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 1; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 1; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 1; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 1; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_38::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_38::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_38::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 1; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 8 + os);
    delete[] s;
  }
};
mu_1__type_38::~mu_1__type_38()
{
}
/*** end array declaration ***/
mu_1__type_38 mu_1__type_38_undefined_var;

class mu_1_Aux
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1__type_38 mu_latest_data;
  mu_1_Aux ( const char *n, int os ) { set_self(n,os); };
  mu_1_Aux ( void ) {};

  virtual ~mu_1_Aux(); 
friend int CompareWeight(mu_1_Aux& a, mu_1_Aux& b)
  {
    int w;
    w = CompareWeight(a.mu_latest_data, b.mu_latest_data);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_Aux& a, mu_1_Aux& b)
  {
    int w;
    w = Compare(a.mu_latest_data, b.mu_latest_data);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_latest_data.MultisetSort();
  }
  void print_statistic()
  {
    mu_latest_data.print_statistic();
  }
  void clear() {
    mu_latest_data.clear();
 };
  void undefine() {
    mu_latest_data.undefine();
 };
  void reset() {
    mu_latest_data.reset();
 };
  void print() {
    mu_latest_data.print();
  };
  void print_diff(state *prevstate) {
    mu_latest_data.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_latest_data.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_Aux& operator= (const mu_1_Aux& from) {
    mu_latest_data = from.mu_latest_data;
    return *this;
  };
};

  void mu_1_Aux::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_Aux::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_Aux::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_latest_data.set_self_2(name, ".latest_data", os + 0 ); else mu_latest_data.set_self_2(NULL, NULL, 0);
}

mu_1_Aux::~mu_1_Aux()
{
}

/*** end record declaration ***/
mu_1_Aux mu_1_Aux_undefined_var;

class mu_1__type_39
{
 public:
  mu_1_CA array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_39 (const char *n, int os) { set_self(n, os); };
  mu_1__type_39 ( void ) {};
  virtual ~mu_1__type_39 ();
  mu_1_CA& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_39& operator= (const mu_1__type_39& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_39& a, mu_1__type_39& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_39& a, mu_1__type_39& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_39::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_39::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_39::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 696 + os);
    delete[] s;
  }
};
mu_1__type_39::~mu_1__type_39()
{
}
/*** end array declaration ***/
mu_1__type_39 mu_1__type_39_undefined_var;

class mu_1__type_40
{
 public:
  mu_1_ULink array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_40 (const char *n, int os) { set_self(n, os); };
  mu_1__type_40 ( void ) {};
  virtual ~mu_1__type_40 ();
  mu_1_ULink& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_40& operator= (const mu_1__type_40& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_40& a, mu_1__type_40& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_40& a, mu_1__type_40& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_40::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_40::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_40::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 1048 + os);
    delete[] s;
  }
};
mu_1__type_40::~mu_1__type_40()
{
}
/*** end array declaration ***/
mu_1__type_40 mu_1__type_40_undefined_var;

class mu_1__type_41
{
 public:
  mu_1_IDIAgent array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_41 (const char *n, int os) { set_self(n, os); };
  mu_1__type_41 ( void ) {};
  virtual ~mu_1__type_41 ();
  mu_1_IDIAgent& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_41& operator= (const mu_1__type_41& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_41& a, mu_1__type_41& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_41& a, mu_1__type_41& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_41::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_41::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_41::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 392 + os);
    delete[] s;
  }
};
mu_1__type_41::~mu_1__type_41()
{
}
/*** end array declaration ***/
mu_1__type_41 mu_1__type_41_undefined_var;

class mu_1__type_42
{
 public:
  mu_1_Link array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_42 (const char *n, int os) { set_self(n, os); };
  mu_1__type_42 ( void ) {};
  virtual ~mu_1__type_42 ();
  mu_1_Link& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_42& operator= (const mu_1__type_42& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_42& a, mu_1__type_42& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_42& a, mu_1__type_42& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_42::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_42::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_42::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 1184 + os);
    delete[] s;
  }
};
mu_1__type_42::~mu_1__type_42()
{
}
/*** end array declaration ***/
mu_1__type_42 mu_1__type_42_undefined_var;

class mu_1_State
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_Line mu_idic_buffer;
  mu_1_BE mu_buffer_be;
  mu_1_HBo mu_hbo;
  mu_1__type_39 mu_UPIAgent;
  mu_1__type_40 mu_santa;
  mu_1__type_41 mu_IDICAgent;
  mu_1__type_42 mu_idiclink;
  mu_1_Aux mu_aux;
  mu_1_State ( const char *n, int os ) { set_self(n,os); };
  mu_1_State ( void ) {};

  virtual ~mu_1_State(); 
friend int CompareWeight(mu_1_State& a, mu_1_State& b)
  {
    int w;
    w = CompareWeight(a.mu_idic_buffer, b.mu_idic_buffer);
    if (w!=0) return w;
    w = CompareWeight(a.mu_buffer_be, b.mu_buffer_be);
    if (w!=0) return w;
    w = CompareWeight(a.mu_hbo, b.mu_hbo);
    if (w!=0) return w;
    w = CompareWeight(a.mu_UPIAgent, b.mu_UPIAgent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_santa, b.mu_santa);
    if (w!=0) return w;
    w = CompareWeight(a.mu_IDICAgent, b.mu_IDICAgent);
    if (w!=0) return w;
    w = CompareWeight(a.mu_idiclink, b.mu_idiclink);
    if (w!=0) return w;
    w = CompareWeight(a.mu_aux, b.mu_aux);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_State& a, mu_1_State& b)
  {
    int w;
    w = Compare(a.mu_idic_buffer, b.mu_idic_buffer);
    if (w!=0) return w;
    w = Compare(a.mu_buffer_be, b.mu_buffer_be);
    if (w!=0) return w;
    w = Compare(a.mu_hbo, b.mu_hbo);
    if (w!=0) return w;
    w = Compare(a.mu_UPIAgent, b.mu_UPIAgent);
    if (w!=0) return w;
    w = Compare(a.mu_santa, b.mu_santa);
    if (w!=0) return w;
    w = Compare(a.mu_IDICAgent, b.mu_IDICAgent);
    if (w!=0) return w;
    w = Compare(a.mu_idiclink, b.mu_idiclink);
    if (w!=0) return w;
    w = Compare(a.mu_aux, b.mu_aux);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_idic_buffer.MultisetSort();
    mu_buffer_be.MultisetSort();
    mu_hbo.MultisetSort();
    mu_UPIAgent.MultisetSort();
    mu_santa.MultisetSort();
    mu_IDICAgent.MultisetSort();
    mu_idiclink.MultisetSort();
    mu_aux.MultisetSort();
  }
  void print_statistic()
  {
    mu_idic_buffer.print_statistic();
    mu_buffer_be.print_statistic();
    mu_hbo.print_statistic();
    mu_UPIAgent.print_statistic();
    mu_santa.print_statistic();
    mu_IDICAgent.print_statistic();
    mu_idiclink.print_statistic();
    mu_aux.print_statistic();
  }
  void clear() {
    mu_idic_buffer.clear();
    mu_buffer_be.clear();
    mu_hbo.clear();
    mu_UPIAgent.clear();
    mu_santa.clear();
    mu_IDICAgent.clear();
    mu_idiclink.clear();
    mu_aux.clear();
 };
  void undefine() {
    mu_idic_buffer.undefine();
    mu_buffer_be.undefine();
    mu_hbo.undefine();
    mu_UPIAgent.undefine();
    mu_santa.undefine();
    mu_IDICAgent.undefine();
    mu_idiclink.undefine();
    mu_aux.undefine();
 };
  void reset() {
    mu_idic_buffer.reset();
    mu_buffer_be.reset();
    mu_hbo.reset();
    mu_UPIAgent.reset();
    mu_santa.reset();
    mu_IDICAgent.reset();
    mu_idiclink.reset();
    mu_aux.reset();
 };
  void print() {
    mu_idic_buffer.print();
    mu_buffer_be.print();
    mu_hbo.print();
    mu_UPIAgent.print();
    mu_santa.print();
    mu_IDICAgent.print();
    mu_idiclink.print();
    mu_aux.print();
  };
  void print_diff(state *prevstate) {
    mu_idic_buffer.print_diff(prevstate);
    mu_buffer_be.print_diff(prevstate);
    mu_hbo.print_diff(prevstate);
    mu_UPIAgent.print_diff(prevstate);
    mu_santa.print_diff(prevstate);
    mu_IDICAgent.print_diff(prevstate);
    mu_idiclink.print_diff(prevstate);
    mu_aux.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_idic_buffer.to_state(thestate);
    mu_buffer_be.to_state(thestate);
    mu_hbo.to_state(thestate);
    mu_UPIAgent.to_state(thestate);
    mu_santa.to_state(thestate);
    mu_IDICAgent.to_state(thestate);
    mu_idiclink.to_state(thestate);
    mu_aux.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_State& operator= (const mu_1_State& from) {
    mu_idic_buffer = from.mu_idic_buffer;
    mu_buffer_be = from.mu_buffer_be;
    mu_hbo = from.mu_hbo;
    mu_UPIAgent = from.mu_UPIAgent;
    mu_santa = from.mu_santa;
    mu_IDICAgent = from.mu_IDICAgent;
    mu_idiclink = from.mu_idiclink;
    mu_aux = from.mu_aux;
    return *this;
  };
};

  void mu_1_State::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_State::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_State::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_idic_buffer.set_self_2(name, ".idic_buffer", os + 0 ); else mu_idic_buffer.set_self_2(NULL, NULL, 0);
  if (name) mu_buffer_be.set_self_2(name, ".buffer_be", os + 8 ); else mu_buffer_be.set_self_2(NULL, NULL, 0);
  if (name) mu_hbo.set_self_2(name, ".hbo", os + 16 ); else mu_hbo.set_self_2(NULL, NULL, 0);
  if (name) mu_UPIAgent.set_self_2(name, ".UPIAgent", os + 3040 ); else mu_UPIAgent.set_self_2(NULL, NULL, 0);
  if (name) mu_santa.set_self_2(name, ".santa", os + 5128 ); else mu_santa.set_self_2(NULL, NULL, 0);
  if (name) mu_IDICAgent.set_self_2(name, ".IDICAgent", os + 8272 ); else mu_IDICAgent.set_self_2(NULL, NULL, 0);
  if (name) mu_idiclink.set_self_2(name, ".idiclink", os + 9448 ); else mu_idiclink.set_self_2(NULL, NULL, 0);
  if (name) mu_aux.set_self_2(name, ".aux", os + 13000 ); else mu_aux.set_self_2(NULL, NULL, 0);
}

mu_1_State::~mu_1_State()
{
}

/*** end record declaration ***/
mu_1_State mu_1_State_undefined_var;

const int mu_NUM_SOTUPIAgents = 1;
const int mu_NUM_FTSUPIAgents = 1;
const int mu_NUM_EXCUPIAgents = 1;
const int mu_MAX_UPIAgentID = 3;
const int mu_NUM_SOTIDICAgents = 1;
const int mu_NUM_FTSIDICAgents = 1;
const int mu_NUM_EXCIDICAgents = 1;
const int mu_MAX_IDICAgentID = 3;
const int mu_MAX_AgentID = 3;
const int mu_Agent_count = 6;
const int mu_NUM_SOTFTSUPIAgents = 2;
const int mu_NUM_SOTFTSIDICAgents = 2;
const int mu_MAX_RTID = 1;
const int mu_MAX_HTID = 2;
const int mu_NUM_ADDRESS = 1;
const int mu_MAX_MON_SIZE = 1;
const int mu_NUM_WORD = 1;
const int mu_NUM_DATA = 1;
const int mu_MAX_SNOOPS = 1;
const int mu_NUM_A2FReq = 1;
const int mu_NUM_F2AResp = 1;
const int mu_NUM_F2AData = 1;
const int mu_NUM_F2AReq = 1;
const int mu_NUM_A2FResp = 1;
const int mu_NUM_A2FData = 1;
const int mu_NUM_CAReq = 1;
const int mu_NUM_CAWb = 1;
const int mu_NUM_CAResp = 1;
const int mu_NUM_HASnp = 1;
const int mu_NUM_HAResp = 1;
const int mu_MAX_CHANNEL_SIZE = 1;
const int mu_CAAllowBuriedHitM = 0;
const int mu_C2C_DISABLED = 0;
const int mu_CAFwdFromS = 0;
const int mu_MAX_MEM_TXNID = 2;
const int mu_MAX_MEM_TORID = 1;
const int mu_MAX_IFA_ENTRIES = 1;
const int mu_mem_abstracted = 0;
const int mu_prll_lkup_enabled = 1;
const int mu_disable_early_mufasa_lkup = 0;
const int mu_disable_early_wrcmp_upiwb = 0;
const int mu_disable_early_wrcmp_other = 1;
const int mu_dont_go_m = 0;
const int mu_treat_flush_as_wrinv = 0;
const int mu_MAX_MFS_WAYS = 1;
const int mu_MAX_SF_WAYS = 1;
const int mu_IDIC_SOT_VALID = 0;
const int mu_UPI_SOT_VALID = 1;
const int mu_mufasa_mode = 1;
const int mu_MAX__1 = 1;
const int mu_Protocol__UPI = 1;
const int mu_Protocol__IDIC = 2;
const int mu_IDI_Opcode__RdAny = 3;
const int mu_IDI_Opcode__RdCurr = 4;
const int mu_IDI_Opcode__RdOwn = 5;
const int mu_IDI_Opcode__RdShared = 6;
const int mu_IDI_Opcode__RdOwnNoData = 7;
const int mu_IDI_Opcode__ItoMWr = 8;
const int mu_IDI_Opcode__CLFlush = 9;
const int mu_IDI_Opcode__CLFlush_OPT = 10;
const int mu_IDI_Opcode__CleanEvict = 11;
const int mu_IDI_Opcode__CleanEvictNoInvalidate = 12;
const int mu_IDI_Opcode__DirtyEvict = 13;
const int mu_IDI_Opcode__DirtyEvictNoInv = 14;
const int mu_IDI_Opcode__CleanEvictNoData = 15;
const int mu_IDI_Opcode__WOWrInv = 16;
const int mu_IDI_Opcode__WOWrInvF = 17;
const int mu_IDI_Opcode__WrInv = 18;
const int mu_IDI_Opcode__RdCurr_ns = 19;
const int mu_IDI_Opcode__SetMonitor = 20;
const int mu_IDI_Opcode__MemWr = 21;
const int mu_IDI_Opcode__CLWB = 22;
const int mu_IDI_Opcode__UcRdF = 23;
const int mu_IDI_Opcode__PrefetchtoSysCache = 24;
const int mu_IDI_Opcode__ClrMonitor = 25;
const int mu_IDI_Opcode__GO = 26;
const int mu_IDI_Opcode__GoWritePull = 27;
const int mu_IDI_Opcode__FastGO = 28;
const int mu_IDI_Opcode__ExtCmp = 29;
const int mu_IDI_Opcode__GoWritePullDrop = 30;
const int mu_IDI_Opcode__FastGOWritePull = 31;
const int mu_IDI_Opcode__WritePull = 32;
const int mu_IDI_Opcode__GOAck = 33;
const int mu_IDI_Opcode__Data = 34;
const int mu_IDI_Opcode__SnpData = 35;
const int mu_IDI_Opcode__SnpCode = 36;
const int mu_IDI_Opcode__SnpInv = 37;
const int mu_IDI_Opcode__SnpCur = 38;
const int mu_IDI_Opcode__BackInv = 39;
const int mu_IDI_Opcode__RspSHitSE = 40;
const int mu_IDI_Opcode__RspIHitI = 41;
const int mu_IDI_Opcode__RspIHitSE = 42;
const int mu_IDI_Opcode__RspVHitV = 43;
const int mu_IDI_Opcode__RspVFwdV = 44;
const int mu_IDI_Opcode__RspIFwdM = 45;
const int mu_IDI_Opcode__RspSFwdM = 46;
const int mu_Coh_Op__Get_SE = 47;
const int mu_Coh_Op__Get_E = 48;
const int mu_Coh_Op__Get_S = 49;
const int mu_Coh_Op__NoInvSnp_RdCur = 50;
const int mu_Coh_Op__Wr_Inv = 51;
const int mu_Coh_Op__Flush = 52;
const int mu_Coh_Op__WB_2I = 53;
const int mu_Coh_Op__No_Coh_Op = 54;
const int mu_Coh_Op__NoInvSnp_CLWB = 55;
const int mu_Coh_Op__RdCurr_ns = 56;
const int mu_UPI_Opcode__RdCode = 57;
const int mu_UPI_Opcode__RdData = 58;
const int mu_UPI_Opcode__ReqFwdCnflt = 59;
const int mu_UPI_Opcode__RdDataMig = 60;
const int mu_UPI_Opcode__RdInvOwn = 61;
const int mu_UPI_Opcode__InvXtoI = 62;
const int mu_UPI_Opcode__InvItoE = 63;
const int mu_UPI_Opcode__RdInv = 64;
const int mu_UPI_Opcode__InvItoM = 65;
const int mu_UPI_Opcode__WbMtoI = 66;
const int mu_UPI_Opcode__WbMtoS = 67;
const int mu_UPI_Opcode__WbMtoE = 68;
const int mu_UPI_Opcode__WbEtoI = 69;
const int mu_UPI_Opcode__RdCur = 70;
const int mu_UPI_Opcode__WbMtoIPtl = 71;
const int mu_UPI_Opcode__WbMtoEPtl = 72;
const int mu_UPI_Opcode__SI_CmpO = 73;
const int mu_UPI_Opcode__E_CmpO = 74;
const int mu_UPI_Opcode__FwdCnfltO = 75;
const int mu_UPI_Opcode__Data_M = 76;
const int mu_UPI_Opcode__M_CmpO = 77;
const int mu_UPI_Opcode__CmpU = 78;
const int mu_UPI_Opcode__SnpLCode = 79;
const int mu_UPI_Opcode__SnpLData = 80;
const int mu_UPI_Opcode__SnpLInv = 81;
const int mu_UPI_Opcode__SnpLCurr = 82;
const int mu_UPI_Opcode__SnpInvOwn = 83;
const int mu_UPI_Opcode__SnpCode = 84;
const int mu_UPI_Opcode__SnpData = 85;
const int mu_UPI_Opcode__SnpDataMig = 86;
const int mu_UPI_Opcode__RspI = 87;
const int mu_UPI_Opcode__RspIWb = 88;
const int mu_UPI_Opcode__RspS = 89;
const int mu_UPI_Opcode__RspSWb = 90;
const int mu_UPI_Opcode__RspCurData = 91;
const int mu_UPI_Opcode__RspE = 92;
const int mu_UPI_Opcode__RspFwdID = 93;
const int mu_UPI_Opcode__RspFwdIWb = 94;
const int mu_UPI_Opcode__RspFwdIC = 95;
const int mu_UPI_Opcode__RspFwdSWb = 96;
const int mu_UPI_Opcode__RspFwdS = 97;
const int mu_UPI_Opcode__Data_SI = 98;
const int mu_UPI_Opcode__Data_E = 99;
const int mu_Mem_Op__Write_M = 100;
const int mu_Mem_Op__Write_P = 101;
const int mu_Mem_Op__Snoop_M = 102;
const int mu_Mem_Op__Write_E = 103;
const int mu_Mem_Op__Read = 104;
const int mu_Mem_Op__Fwd = 105;
const int mu_Mem_Op__Fill = 106;
const int mu_CacheState__M = 107;
const int mu_CacheState__E = 108;
const int mu_CacheState__S = 109;
const int mu_CacheState__I = 110;
const int mu_MFSState__M = 111;
const int mu_MFSState__E = 112;
const int mu_MFSState__C = 113;
const int mu_MFSState__I = 114;
const int mu_Resp_Op__Rsp2I = 115;
const int mu_Resp_Op__Rsp2S = 116;
const int mu_Resp_Op__Rsp2E = 117;
const int mu_Resp_Op__Unknown = 118;
const int mu_CXM_Opcode__MemRd = 119;
const int mu_CXM_Opcode__MemRdFwd = 120;
const int mu_CXM_Opcode__MemWr = 121;
const int mu_CXM_Opcode__MemWrPtl = 122;
const int mu_CXM_Opcode__MemData = 123;
const int mu_CXM_Opcode__Cmp = 124;
const int mu_TSTATE__COH_BLOCKED = 125;
const int mu_TSTATE__COH_WAIT_LKP = 126;
const int mu_TSTATE__COH_SCHED_IFA = 127;
const int mu_TSTATE__COH_SCHED_SNP = 128;
const int mu_CA_type__FTS = 129;
const int mu_CA_type__EXC = 130;
const int mu_CA_type__SOT = 131;
const int mu_Domain__COH = 132;
const int mu_Domain__MEM = 133;
const int mu_MFSMode__Active = 134;
const int mu_MFSMode__Off = 135;
const int mu_FOrDDataState__F = 136;
const int mu_FOrDDataState__D = 137;
const int mu_FOrDDataState__Un = 138;
const int mu_RTID_STATE__Idle = 139;
const int mu_RTID_STATE__SentReq = 140;
const int mu_RTID_STATE__RcvdData = 141;
const int mu_RTID_STATE__RcvdCmp = 142;
const int mu_CacheOp__ToI = 143;
const int mu_CacheOp__ToS = 144;
const int mu_CacheOp__ToEmptyE = 145;
const int mu_SRB_STATE__Idle = 146;
const int mu_SRB_STATE__Ready = 147;
const int mu_SRB_STATE__Conflict = 148;
const int mu_SRB_STATE__ReqSent = 149;
const int mu_SRB_STATE__Resolved = 150;
/*** Variable declaration ***/
mu_1_State mu_self("self",0);

/*** Variable declaration ***/
mu_0_boolean mu_guard_failed("guard_failed",13008);

void mu_Guard(const mu_0_boolean& mu_guard_status)
{
if ( (mu_guard_status) == (mu_false) )
{
mu_guard_failed = mu_true;
}
};
/*** end procedure declaration ***/

void mu_SFEntry__release_sfentry(mu_1_SFEntry& mu_self)
{
mu_self.mu_CV_format = mu_false;
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_CV_bits_upi[mu_id] = mu_false;
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_CV_bits_idic[mu_id] = mu_false;
};
};
mu_self.mu_owner_id.undefine();
mu_self.mu_owner_protocol.undefine();
mu_self.mu_valid = mu_false;
mu_self.mu_address.undefine();
mu_self.mu_allocAvoid = mu_false;
};
/*** end procedure declaration ***/

mu_0_boolean mu_SFEntry__all_cv_bits_0(mu_1_SFEntry& mu_self)
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_CV_bits_idic[mu_id] )
{
return mu_false;
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_CV_bits_upi[mu_id] )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function SFEntry__all_cv_bits_0 reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_SFEntry__all_cv_bits_0_for_fts(mu_1_SFEntry& mu_self)
{
{
int mu__ub43 = 0;
for (int mu_id = 0; mu_id <= mu__ub43; mu_id += 1) {
if ( mu_self.mu_CV_bits_idic[mu_id] )
{
return mu_false;
}
};
};
{
int mu__ub44 = 0;
for (int mu_id = 0; mu_id <= mu__ub44; mu_id += 1) {
if ( mu_self.mu_CV_bits_upi[mu_id] )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function SFEntry__all_cv_bits_0_for_fts reached without returning values.");
};
/*** end function declaration ***/

mu_1_Agent_countp1 mu_SFEntry__count_cv_bits_1(mu_1_SFEntry& mu_self)
{
/*** Variable declaration ***/
mu_1_Agent_countp1 mu_count("count",0);

mu_count = 0;
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_CV_bits_upi[mu_id] )
{
mu_count = (mu_count) + (1);
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_CV_bits_idic[mu_id] )
{
mu_count = (mu_count) + (1);
}
};
};
return mu_count;
	Error.Error("The end of function SFEntry__count_cv_bits_1 reached without returning values.");
};
/*** end function declaration ***/

void mu_TractorEntry__release_tractorentry(mu_1_TractorEntry& mu_self)
{
mu_self.mu_valid = mu_false;
mu_self.mu_iopcode.undefine();
mu_self.mu_agent_id.undefine();
mu_self.mu_rtid.undefine();
mu_self.mu_resp_sent = mu_false;
mu_self.mu_address.undefine();
mu_self.mu_data_sent = mu_false;
mu_self.mu_sf_lookup_done = mu_false;
mu_self.mu_snpneeded = mu_false;
{
for(int mu_id = 0; mu_id <= 2; mu_id++) {
mu_self.mu_upi_peer_snooped[mu_id] = mu_false;
mu_self.mu_upi_snoop_target[mu_id] = mu_false;
mu_self.mu_upi_snoop_opcode[mu_id].undefine();
};
};
{
for(int mu_id = 0; mu_id <= 2; mu_id++) {
mu_self.mu_idic_peer_snooped[mu_id] = mu_false;
mu_self.mu_idic_snoop_target[mu_id] = mu_false;
mu_self.mu_idic_snoop_opcode[mu_id].undefine();
};
};
mu_self.mu_snpdone = mu_false;
mu_self.mu_ro_count = 0;
mu_self.mu_coh_op.undefine();
mu_self.mu_selfsnp = mu_false;
mu_self.mu_data_recvd = mu_false;
mu_self.mu_limit_S = mu_false;
mu_self.mu_snoop_data_recvd = mu_false;
mu_self.mu_one_fwd_resp_idic = mu_false;
mu_self.mu_protocol.undefine();
mu_self.mu_extcmp_sent = mu_false;
mu_self.mu_iresp_opcode.undefine();
mu_self.mu_uopcode.undefine();
mu_self.mu_data.undefine();
mu_self.mu_wb_recvd = mu_false;
mu_self.mu_next_entry_c.undefine();
mu_self.mu_next_entry_m.undefine();
mu_self.mu_mfs_lookup_done = mu_false;
mu_self.mu_mem_op_init.undefine();
mu_self.mu_mem_op_assigned = mu_false;
mu_self.mu_be.undefine();
mu_self.mu_mem_req_sent = mu_false;
mu_self.mu_mem_resp_recvd = mu_false;
mu_self.mu_in_mem_domain = mu_false;
mu_self.mu_prlrd_req_sent = mu_false;
mu_self.mu_prlrd_resp_recvd = mu_false;
mu_self.mu_ifa_id.undefine();
mu_self.mu_lateMfsLkupNeeded = mu_false;
mu_self.mu_resp_state.undefine();
mu_self.mu_mfs_state.undefine();
mu_self.mu_mfs_hit = mu_false;
mu_self.mu_mfs_way.undefine();
mu_self.mu_late_mufasa_lookup_done = mu_false;
mu_self.mu_mufasa_alloc_update_done = mu_false;
mu_self.mu_sf_hit = mu_false;
mu_self.mu_sf_way.undefine();
mu_self.mu_alloc_hint = mu_false;
mu_SFEntry__release_sfentry ( mu_self.mu_next_sf_state );
mu_self.mu_sf_update_done = mu_false;
mu_self.mu_mfsUpdateNeeded = mu_false;
mu_self.mu_mfs_read_done = mu_false;
};
/*** end procedure declaration ***/

void mu_TractorEntry__load_idic_packet(mu_1_TractorEntry& mu_self, const mu_1_IDICAgents& mu_agent_id, mu_1_IDIPacket& mu_packet)
{
mu_self.mu_valid = mu_true;
mu_self.mu_iopcode = mu_packet.mu_opcode;
if (mu_agent_id.isundefined())
  mu_self.mu_agent_id.undefine();
else
  mu_self.mu_agent_id = mu_agent_id;
mu_self.mu_rtid = mu_packet.mu_rtid;
mu_self.mu_address = mu_packet.mu_address;
mu_self.mu_alloc_hint = mu_packet.mu_alloc_hint;
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__RdAny) )
{
mu_self.mu_coh_op = mu_Coh_Op__Get_SE;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__RdCurr) )
{
mu_self.mu_coh_op = mu_Coh_Op__NoInvSnp_RdCur;
}
else
{
bool mu__boolexpr45;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdOwn)) mu__boolexpr45 = TRUE ;
  else {
  mu__boolexpr45 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
if ( mu__boolexpr45 )
{
mu_self.mu_coh_op = mu_Coh_Op__Get_E;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__RdShared) )
{
mu_self.mu_coh_op = mu_Coh_Op__Get_S;
}
else
{
bool mu__boolexpr46;
bool mu__boolexpr47;
bool mu__boolexpr48;
bool mu__boolexpr49;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr49 = TRUE ;
  else {
  mu__boolexpr49 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr49) mu__boolexpr48 = TRUE ;
  else {
  mu__boolexpr48 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr48) mu__boolexpr47 = TRUE ;
  else {
  mu__boolexpr47 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr47) mu__boolexpr46 = TRUE ;
  else {
  mu__boolexpr46 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
if ( mu__boolexpr46 )
{
mu_self.mu_coh_op = mu_Coh_Op__Wr_Inv;
}
else
{
bool mu__boolexpr50;
bool mu__boolexpr51;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CLFlush)) mu__boolexpr51 = TRUE ;
  else {
  mu__boolexpr51 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr51) mu__boolexpr50 = TRUE ;
  else {
  mu__boolexpr50 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
if ( mu__boolexpr50 )
{
mu_self.mu_coh_op = mu_Coh_Op__Flush;
}
else
{
bool mu__boolexpr52;
bool mu__boolexpr53;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr53 = TRUE ;
  else {
  mu__boolexpr53 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr53) mu__boolexpr52 = TRUE ;
  else {
  mu__boolexpr52 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
if ( mu__boolexpr52 )
{
mu_self.mu_coh_op = mu_Coh_Op__WB_2I;
}
else
{
bool mu__boolexpr54;
bool mu__boolexpr55;
bool mu__boolexpr56;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) mu__boolexpr56 = TRUE ;
  else {
  mu__boolexpr56 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr56) mu__boolexpr55 = TRUE ;
  else {
  mu__boolexpr55 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (mu__boolexpr55) mu__boolexpr54 = TRUE ;
  else {
  mu__boolexpr54 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__ClrMonitor)) ; 
}
if ( mu__boolexpr54 )
{
mu_self.mu_coh_op = mu_Coh_Op__No_Coh_Op;
mu_self.mu_snpneeded = mu_false;
mu_self.mu_sf_lookup_done = mu_true;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__CLWB) )
{
mu_self.mu_coh_op = mu_Coh_Op__NoInvSnp_CLWB;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__SetMonitor) )
{
mu_self.mu_coh_op = mu_Coh_Op__Get_S;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__RdCurr_ns) )
{
mu_self.mu_coh_op = mu_Coh_Op__RdCurr_ns;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Coh op mapping is not defined for IDI.C opcode  packet.opcode");
}
}
}
}
}
}
}
}
}
}
}
mu_self.mu_selfsnp = mu_packet.mu_selfsnp;
mu_self.mu_protocol = mu_Protocol__IDIC;
};
/*** end procedure declaration ***/

void mu_TractorEntry__load_upi_packet(mu_1_TractorEntry& mu_self, mu_1_UPIPacket& mu_packet)
{
mu_self.mu_valid = mu_true;
mu_self.mu_uopcode = mu_packet.mu_opcode;
mu_self.mu_agent_id = mu_packet.mu_crnid;
mu_self.mu_rtid = mu_packet.mu_rtid;
mu_self.mu_resp_state = mu_CacheState__E;
if ( (mu_packet.mu_opcode) != (mu_UPI_Opcode__ReqFwdCnflt) )
{
mu_self.mu_alloc_hint = mu_packet.mu_alloc_hint;
}
mu_self.mu_address = mu_packet.mu_address;
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCode) )
{
mu_self.mu_coh_op = mu_Coh_Op__Get_S;
}
else
{
bool mu__boolexpr57;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdData)) mu__boolexpr57 = TRUE ;
  else {
  mu__boolexpr57 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
if ( mu__boolexpr57 )
{
mu_self.mu_coh_op = mu_Coh_Op__Get_SE;
}
else
{
bool mu__boolexpr58;
bool mu__boolexpr59;
bool mu__boolexpr60;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr60 = TRUE ;
  else {
  mu__boolexpr60 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr60) mu__boolexpr59 = TRUE ;
  else {
  mu__boolexpr59 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr59) mu__boolexpr58 = TRUE ;
  else {
  mu__boolexpr58 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
if ( mu__boolexpr58 )
{
mu_self.mu_coh_op = mu_Coh_Op__No_Coh_Op;
mu_self.mu_snpneeded = mu_false;
mu_self.mu_sf_lookup_done = mu_true;
}
else
{
bool mu__boolexpr61;
bool mu__boolexpr62;
bool mu__boolexpr63;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) mu__boolexpr63 = TRUE ;
  else {
  mu__boolexpr63 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr63) mu__boolexpr62 = TRUE ;
  else {
  mu__boolexpr62 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr62) mu__boolexpr61 = TRUE ;
  else {
  mu__boolexpr61 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
if ( mu__boolexpr61 )
{
mu_self.mu_coh_op = mu_Coh_Op__Get_E;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__InvXtoI) )
{
mu_self.mu_coh_op = mu_Coh_Op__Flush;
}
else
{
bool mu__boolexpr64;
bool mu__boolexpr65;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr65 = TRUE ;
  else {
  mu__boolexpr65 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr65) mu__boolexpr64 = TRUE ;
  else {
  mu__boolexpr64 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
if ( mu__boolexpr64 )
{
mu_self.mu_coh_op = mu_Coh_Op__WB_2I;
mu_self.mu_snpneeded = mu_false;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCur) )
{
mu_self.mu_coh_op = mu_Coh_Op__NoInvSnp_RdCur;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Coh op mapping is not defined for UPI opcode  packet.opcode");
}
}
}
}
}
}
}
mu_self.mu_protocol = mu_Protocol__UPI;
};
/*** end procedure declaration ***/

void mu_LinkedList__release_ll(mu_1_LinkedList& mu_self)
{
mu_self.mu_valid = mu_false;
mu_self.mu_address.undefine();
mu_self.mu_head.undefine();
mu_self.mu_tail.undefine();
};
/*** end procedure declaration ***/

void mu_MemTOREntry__reset(mu_1_MemTOREntry& mu_self)
{
mu_self.mu_valid = mu_false;
mu_self.mu_address.undefine();
mu_self.mu_opcode.undefine();
mu_self.mu_txnid.undefine();
mu_self.mu_data.undefine();
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_be[mu_word] = mu_false;
};
};
mu_self.mu_prlrd = mu_false;
mu_self.mu_protocol.undefine();
mu_self.mu_rtid.undefine();
mu_self.mu_agent_id.undefine();
};
/*** end procedure declaration ***/

void mu_MemTOREntry__load(mu_1_MemTOREntry& mu_self, mu_1_CXMPacket& mu_packet)
{
mu_self.mu_valid = mu_true;
mu_self.mu_address = mu_packet.mu_address;
mu_self.mu_opcode = mu_packet.mu_opcode;
mu_self.mu_txnid = mu_packet.mu_txnid;
if ( (mu_self.mu_opcode) == (mu_CXM_Opcode__MemWrPtl) )
{
mu_self.mu_data = mu_packet.mu_data;
mu_self.mu_be = mu_packet.mu_be;
}
else
{
if ( (mu_self.mu_opcode) == (mu_CXM_Opcode__MemWr) )
{
mu_self.mu_data = mu_packet.mu_data;
}
else
{
if ( (mu_self.mu_opcode) == (mu_CXM_Opcode__MemRd) )
{
mu_self.mu_prlrd = mu_packet.mu_prlrd;
}
else
{
if ( (mu_self.mu_opcode) == (mu_CXM_Opcode__MemRdFwd) )
{
mu_self.mu_protocol = mu_packet.mu_protocol;
mu_self.mu_rtid = mu_packet.mu_rtid;
mu_self.mu_agent_id = mu_packet.mu_agent_id;
}
}
}
}
};
/*** end procedure declaration ***/

void mu_MFSEntry__release_mfsentry(mu_1_MFSEntry& mu_self)
{
mu_self.mu_state = mu_MFSState__I;
mu_self.mu_data.undefine();
mu_self.mu_valid = mu_false;
mu_self.mu_address.undefine();
};
/*** end procedure declaration ***/

void mu_MonitorEntry__release_monitorentry(mu_1_MonitorEntry& mu_self)
{
mu_self.mu_address.undefine();
mu_self.mu_valid = mu_false;
mu_self.mu_agent_id.undefine();
};
/*** end procedure declaration ***/

void mu_MonitorEntry__load(mu_1_MonitorEntry& mu_self, const mu_1_Address& mu_address, const mu_1_IDICAgents& mu_agent)
{
mu_self.mu_valid = mu_true;
if (mu_address.isundefined())
  mu_self.mu_address.undefine();
else
  mu_self.mu_address = mu_address;
if (mu_agent.isundefined())
  mu_self.mu_agent_id.undefine();
else
  mu_self.mu_agent_id = mu_agent;
};
/*** end procedure declaration ***/

void mu_IFAEntry__release_ifaentry(mu_1_IFAEntry& mu_self)
{
mu_self.mu_valid = mu_false;
mu_self.mu_snpRspDone = mu_false;
mu_self.mu_FOrDData.undefine();
mu_self.mu_tractor_id.undefine();
mu_self.mu_rtid.undefine();
mu_self.mu_agent_id.undefine();
mu_self.mu_req_protocol.undefine();
mu_self.mu_data.undefine();
mu_self.mu_dataE = mu_false;
};
/*** end procedure declaration ***/

void mu_IFAEntry__load(mu_1_IFAEntry& mu_self, const mu_1_HTID& mu_tid, const mu_1_RTID& mu_rtid, const mu_1_Agents& mu_agent, const mu_1_Protocol& mu_protocol)
{
mu_self.mu_valid = mu_true;
mu_self.mu_snpRspDone = mu_false;
mu_self.mu_FOrDData = mu_FOrDDataState__Un;
if (mu_tid.isundefined())
  mu_self.mu_tractor_id.undefine();
else
  mu_self.mu_tractor_id = mu_tid;
if (mu_rtid.isundefined())
  mu_self.mu_rtid.undefine();
else
  mu_self.mu_rtid = mu_rtid;
if (mu_agent.isundefined())
  mu_self.mu_agent_id.undefine();
else
  mu_self.mu_agent_id = mu_agent;
if (mu_protocol.isundefined())
  mu_self.mu_req_protocol.undefine();
else
  mu_self.mu_req_protocol = mu_protocol;
};
/*** end procedure declaration ***/

void mu_HBo__reset(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_TractorEntry__release_tractorentry ( mu_self.mu_tractor[mu_id] );
};
};
{
for(int mu_addr = 0; mu_addr <= 0; mu_addr++) {
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_mem[mu_addr][mu_word] = 0;
};
};
mu_LinkedList__release_ll ( mu_self.mu_coh_ll[mu_addr] );
mu_LinkedList__release_ll ( mu_self.mu_mem_ll[mu_addr] );
};
};
{
for(int mu_way = 0; mu_way <= 0; mu_way++) {
mu_MFSEntry__release_mfsentry ( mu_self.mu_mufasa[mu_way] );
};
};
{
for(int mu_way = 0; mu_way <= 0; mu_way++) {
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_way] );
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_MemTOREntry__reset ( mu_self.mu_mct[mu_id] );
};
};
mu_self.mu_count = 0;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_MonitorEntry__release_monitorentry ( mu_self.mu_monitor[mu_id] );
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_IFAEntry__release_ifaentry ( mu_self.mu_ifa[mu_id] );
};
};
};
/*** end procedure declaration ***/

mu_1_CA_type mu_HBo__detect_CA_type(mu_1_HBo& mu_self,const mu_1_Agents& mu_agent_id,const mu_1_Protocol& mu_protocol)
{
if ( (mu_protocol) == (mu_Protocol__IDIC) )
{
if ( (mu_agent_id) < (mu_NUM_SOTIDICAgents) )
{
return mu_CA_type__SOT;
}
else
{
if ( (mu_agent_id) < (2) )
{
return mu_CA_type__FTS;
}
else
{
return mu_CA_type__EXC;
}
}
}
else
{
if ( (mu_agent_id) < (mu_NUM_SOTUPIAgents) )
{
return mu_CA_type__SOT;
}
else
{
if ( (mu_agent_id) < (2) )
{
return mu_CA_type__FTS;
}
else
{
return mu_CA_type__EXC;
}
}
}
	Error.Error("The end of function HBo__detect_CA_type reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_HBo__is_available_TractorEntry(mu_1_HBo& mu_self)
{
{
int mu__ub66 = 0;
for (int mu_id = 0; mu_id <= mu__ub66; mu_id += 1) {
if ( !(mu_self.mu_tractor[mu_id].mu_valid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function HBo__is_available_TractorEntry reached without returning values.");
};
/*** end function declaration ***/

mu_1_HTID mu_HBo__available_TractorEntry(mu_1_HBo& mu_self)
{
{
int mu__ub67 = 0;
for (int mu_id = 0; mu_id <= mu__ub67; mu_id += 1) {
if ( !(mu_self.mu_tractor[mu_id].mu_valid) )
{
return mu_id;
}
};
};
	Error.Error("The end of function HBo__available_TractorEntry reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_HBo__is_available_monitor_entry(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_monitor[mu_id].mu_valid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function HBo__is_available_monitor_entry reached without returning values.");
};
/*** end function declaration ***/

mu_1_MonitorSize mu_HBo__available_monitor_entry(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_monitor[mu_id].mu_valid) )
{
return mu_id;
}
};
};
	Error.Error("The end of function HBo__available_monitor_entry reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__recv_A2FReq(mu_1_HBo& mu_self, const mu_1_IDICAgents& mu_agent, mu_1_IDIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_HTID mu_idx("idx",0);

mu_Guard ( mu_HBo__is_available_TractorEntry( mu_self ) );
if ( mu_guard_failed.isundefined() )
{
mu_idx = mu_HBo__available_TractorEntry( mu_self );
mu_TractorEntry__load_idic_packet ( mu_self.mu_tractor[mu_idx], mu_agent, mu_packet );
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache) )
{
if ( mu_self.mu_mem_ll[mu_packet.mu_address].mu_valid )
{
if (mu_idx.isundefined())
  mu_self.mu_tractor[mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail].mu_next_entry_m.undefine();
else
  mu_self.mu_tractor[mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail].mu_next_entry_m = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
else
{
mu_self.mu_mem_ll[mu_packet.mu_address].mu_valid = mu_true;
if (mu_idx.isundefined())
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_head.undefine();
else
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_head = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
mu_self.mu_tractor[mu_idx].mu_in_mem_domain = mu_true;
if ( mu_mufasa_mode )
{
mu_self.mu_tractor[mu_idx].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_idx].mu_mem_op_init = mu_Mem_Op__Fill;
mu_self.mu_tractor[mu_idx].mu_lateMfsLkupNeeded = mu_true;
}
}
else
{
if ( !((mu_packet.mu_opcode) == (mu_IDI_Opcode__ClrMonitor)) )
{
if ( mu_self.mu_coh_ll[mu_packet.mu_address].mu_valid )
{
if (mu_idx.isundefined())
  mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail].mu_next_entry_c.undefine();
else
  mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail].mu_next_entry_c = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
else
{
mu_self.mu_coh_ll[mu_packet.mu_address].mu_valid = mu_true;
if (mu_idx.isundefined())
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_head.undefine();
else
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_head = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
}
else
{
bool mu__boolexpr68;
  if (!(mu_packet.mu_alloc_hint)) mu__boolexpr68 = FALSE ;
  else {
  mu__boolexpr68 = (mu_mufasa_mode) ; 
}
if ( mu__boolexpr68 )
{
mu_self.mu_tractor[mu_idx].mu_lateMfsLkupNeeded = mu_true;
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__update_and_free_tractor_entry(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
bool mu__boolexpr69;
  if (!((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail) == (mu_htid))) mu__boolexpr69 = FALSE ;
  else {
  mu__boolexpr69 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
if ( mu__boolexpr69 )
{
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid = mu_false;
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head.undefine();
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
}
else
{
if ( (mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid) )
{
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head = mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_next_entry_c;
}
}
bool mu__boolexpr70;
bool mu__boolexpr71;
  if (!(mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr71 = FALSE ;
  else {
  mu__boolexpr71 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail) == (mu_htid)) ; 
}
  if (!(mu__boolexpr71)) mu__boolexpr70 = FALSE ;
  else {
  mu__boolexpr70 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
if ( mu__boolexpr70 )
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid = mu_false;
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head.undefine();
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
}
else
{
bool mu__boolexpr72;
  if (!(mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr72 = FALSE ;
  else {
  mu__boolexpr72 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
if ( mu__boolexpr72 )
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head = mu_self.mu_tractor[mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_next_entry_m;
}
}
mu_TractorEntry__release_tractorentry ( mu_self.mu_tractor[mu_htid] );
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__all_needed_peers_are_snooped(mu_1_HBo& mu_self,const mu_1_HTID& mu_htid)
{
if ( mu_self.mu_tractor[mu_htid].mu_snpneeded )
{
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
bool mu__boolexpr73;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_upi_peer_snooped[mu_agent]))) mu__boolexpr73 = FALSE ;
  else {
  mu__boolexpr73 = (mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_agent]) ; 
}
if ( mu__boolexpr73 )
{
return mu_false;
}
};
};
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
bool mu__boolexpr74;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_idic_peer_snooped[mu_agent]))) mu__boolexpr74 = FALSE ;
  else {
  mu__boolexpr74 = (mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_agent]) ; 
}
if ( mu__boolexpr74 )
{
return mu_false;
}
};
};
}
return mu_true;
	Error.Error("The end of function HBo__all_needed_peers_are_snooped reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__late_sf_update(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid, const mu_1_Address& mu_address)
{
if ( !(mu_self.mu_tractor[mu_htid].mu_sf_update_done) )
{
bool mu__boolexpr75;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_S)) mu__boolexpr75 = TRUE ;
  else {
  mu__boolexpr75 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_SE)) ; 
}
if ( mu__boolexpr75 )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( mu_self.mu_tractor[mu_htid].mu_sf_hit )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format) )
{
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_htid].mu_next_sf_state );
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
}
else
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_htid].mu_next_sf_state );
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_sf_hit) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_false;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_id] = mu_true;
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_id] = mu_true;
};
};
}
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_sf_hit )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_tractor[mu_htid].mu_next_sf_state ) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_false;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_id] = mu_true;
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_id] = mu_true;
};
};
}
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_tractor[mu_htid].mu_next_sf_state )) == (1) )
{
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
else
{
{
int mu__ub76 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub76; mu_id += 1) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_id] = mu_false;
};
};
{
int mu__ub77 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub77; mu_id += 1) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_id] = mu_false;
};
};
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_tractor[mu_htid].mu_next_sf_state )) > (1) )
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_id] = mu_false;
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_id] = mu_false;
};
};
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_false;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_protocol.undefine();
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_id.undefine();
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_sf_hit) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_protocol = mu_self.mu_tractor[mu_htid].mu_protocol;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_sf_hit )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_protocol = mu_self.mu_tractor[mu_htid].mu_protocol;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_id] = mu_false;
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_id] = mu_false;
};
};
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
}
}
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_E) )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( mu_self.mu_tractor[mu_htid].mu_sf_hit )
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_htid].mu_next_sf_state );
}
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_sf_hit) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_false;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_sf_hit )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_tractor[mu_htid].mu_next_sf_state ) )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_tractor[mu_htid].mu_next_sf_state )) > (0) )
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_id] = mu_false;
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_id] = mu_false;
};
};
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_false;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_protocol.undefine();
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_id.undefine();
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_sf_hit) )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_protocol = mu_self.mu_tractor[mu_htid].mu_protocol;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_sf_hit )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_format = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_protocol = mu_self.mu_tractor[mu_htid].mu_protocol;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_idic[mu_id] = mu_false;
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_CV_bits_upi[mu_id] = mu_false;
};
};
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
}
}
}
}
}
else
{
bool mu__boolexpr78;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Wr_Inv)) mu__boolexpr78 = TRUE ;
  else {
  mu__boolexpr78 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Flush)) ; 
}
if ( mu__boolexpr78 )
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_htid].mu_next_sf_state );
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
bool mu__boolexpr79;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Wr_Inv)) mu__boolexpr79 = TRUE ;
  else {
  mu__boolexpr79 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Flush)) ; 
}
if ( mu__boolexpr79 )
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_htid].mu_next_sf_state );
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
else
{
bool mu__boolexpr80;
bool mu__boolexpr81;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__NoInvSnp_CLWB)) mu__boolexpr81 = TRUE ;
  else {
  mu__boolexpr81 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__NoInvSnp_RdCur)) ; 
}
  if (mu__boolexpr81) mu__boolexpr80 = TRUE ;
  else {
  mu__boolexpr80 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__RdCurr_ns)) ; 
}
if ( mu__boolexpr80 )
{
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_valid = mu_true;
mu_self.mu_tractor[mu_htid].mu_next_sf_state.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way] = mu_self.mu_tractor[mu_htid].mu_next_sf_state;
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__recv_A2FData(mu_1_HBo& mu_self, mu_1_IDIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_HTID mu_htid("htid",0);

mu_htid = mu_packet.mu_htid;
bool mu__boolexpr82;
bool mu__boolexpr83;
bool mu__boolexpr84;
  if (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) mu__boolexpr84 = TRUE ;
  else {
  mu__boolexpr84 = (mu_self.mu_tractor[mu_htid].mu_snpdone) ; 
}
  if (!(mu__boolexpr84)) mu__boolexpr83 = FALSE ;
  else {
  mu__boolexpr83 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
  if (!(mu__boolexpr83)) mu__boolexpr82 = FALSE ;
  else {
bool mu__boolexpr85;
bool mu__boolexpr86;
bool mu__boolexpr87;
bool mu__boolexpr88;
bool mu__boolexpr89;
bool mu__boolexpr90;
bool mu__boolexpr91;
bool mu__boolexpr92;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr92 = TRUE ;
  else {
  mu__boolexpr92 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr92) mu__boolexpr91 = TRUE ;
  else {
  mu__boolexpr91 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr91) mu__boolexpr90 = TRUE ;
  else {
  mu__boolexpr90 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr90) mu__boolexpr89 = TRUE ;
  else {
  mu__boolexpr89 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr89) mu__boolexpr88 = TRUE ;
  else {
  mu__boolexpr88 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr88) mu__boolexpr87 = TRUE ;
  else {
  mu__boolexpr87 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr87) mu__boolexpr86 = TRUE ;
  else {
  mu__boolexpr86 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr86) mu__boolexpr85 = TRUE ;
  else {
  mu__boolexpr85 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  mu__boolexpr82 = (mu__boolexpr85) ; 
}
if ( mu__boolexpr82 )
{
if ( !(!(mu_self.mu_tractor[mu_htid].mu_data_recvd)) ) Error.Error("Assertion failed:  Unexpected data recvd for htid  htid");
mu_self.mu_tractor[mu_htid].mu_data_recvd = mu_true;
bool mu__boolexpr93;
bool mu__boolexpr94;
bool mu__boolexpr95;
bool mu__boolexpr96;
bool mu__boolexpr97;
bool mu__boolexpr98;
bool mu__boolexpr99;
bool mu__boolexpr100;
bool mu__boolexpr101;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr101 = TRUE ;
  else {
  mu__boolexpr101 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr101) mu__boolexpr100 = TRUE ;
  else {
  mu__boolexpr100 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr100) mu__boolexpr99 = TRUE ;
  else {
  mu__boolexpr99 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr99) mu__boolexpr98 = TRUE ;
  else {
  mu__boolexpr98 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr98) mu__boolexpr97 = TRUE ;
  else {
  mu__boolexpr97 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr97) mu__boolexpr96 = TRUE ;
  else {
  mu__boolexpr96 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr96) mu__boolexpr95 = TRUE ;
  else {
  mu__boolexpr95 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr95) mu__boolexpr94 = TRUE ;
  else {
  mu__boolexpr94 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (!(mu__boolexpr94)) mu__boolexpr93 = FALSE ;
  else {
  mu__boolexpr93 = (!(mu_packet.mu_bogus)) ; 
}
if ( mu__boolexpr93 )
{
if ( mu_mem_abstracted )
{
bool mu__boolexpr102;
bool mu__boolexpr103;
bool mu__boolexpr104;
bool mu__boolexpr105;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr105 = TRUE ;
  else {
  mu__boolexpr105 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr105) mu__boolexpr104 = TRUE ;
  else {
  mu__boolexpr104 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr104) mu__boolexpr103 = TRUE ;
  else {
  mu__boolexpr103 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr103) mu__boolexpr102 = TRUE ;
  else {
  mu__boolexpr102 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
if ( mu__boolexpr102 )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_packet.mu_data;
}
else
{
bool mu__boolexpr106;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr106 = TRUE ;
  else {
  mu__boolexpr106 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
if ( mu__boolexpr106 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_packet.mu_be[mu_word] )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address][mu_word] = mu_packet.mu_data[mu_word];
}
};
};
}
}
}
else
{
bool mu__boolexpr107;
bool mu__boolexpr108;
bool mu__boolexpr109;
bool mu__boolexpr110;
bool mu__boolexpr111;
bool mu__boolexpr112;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr112 = TRUE ;
  else {
  mu__boolexpr112 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr112) mu__boolexpr111 = TRUE ;
  else {
  mu__boolexpr111 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr111) mu__boolexpr110 = TRUE ;
  else {
  mu__boolexpr110 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr110) mu__boolexpr109 = TRUE ;
  else {
  mu__boolexpr109 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr109) mu__boolexpr108 = TRUE ;
  else {
  mu__boolexpr108 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr108) mu__boolexpr107 = TRUE ;
  else {
  mu__boolexpr107 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
if ( mu__boolexpr107 )
{
mu_self.mu_tractor[mu_htid].mu_be = mu_packet.mu_be;
mu_self.mu_tractor[mu_htid].mu_data = mu_packet.mu_data;
}
else
{
bool mu__boolexpr113;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr113 = TRUE ;
  else {
  mu__boolexpr113 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
if ( mu__boolexpr113 )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) )
{
mu_self.mu_tractor[mu_htid].mu_be = mu_packet.mu_be;
mu_self.mu_tractor[mu_htid].mu_data = mu_packet.mu_data;
}
else
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_packet.mu_be[mu_word] )
{
mu_self.mu_tractor[mu_htid].mu_data[mu_word] = mu_packet.mu_data[mu_word];
}
};
};
}
}
}
}
}
else
{
bool mu__boolexpr114;
bool mu__boolexpr115;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) mu__boolexpr115 = TRUE ;
  else {
  mu__boolexpr115 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (!(mu__boolexpr115)) mu__boolexpr114 = FALSE ;
  else {
  mu__boolexpr114 = (mu_packet.mu_bogus) ; 
}
if ( mu__boolexpr114 )
{
mu_HBo__update_and_free_tractor_entry ( mu_self, mu_htid );
}
}
}
else
{
if ( !(!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) ) Error.Error("Assertion failed:  Unexpected data recvd for htid  htid");
mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd = mu_true;
mu_self.mu_tractor[mu_packet.mu_htid].mu_data = mu_packet.mu_data;
mu_self.mu_tractor[mu_packet.mu_htid].mu_be = mu_packet.mu_be;
bool mu__boolexpr116;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr116 = FALSE ;
  else {
  mu__boolexpr116 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr116 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_false;
}
}
bool mu__boolexpr117;
bool mu__boolexpr118;
  if (!((mu_self.mu_tractor[mu_packet.mu_htid].mu_ro_count) == (0))) mu__boolexpr118 = FALSE ;
  else {
  mu__boolexpr118 = (mu_HBo__all_needed_peers_are_snooped( mu_self, mu_packet.mu_htid )) ; 
}
  if (!(mu__boolexpr118)) mu__boolexpr117 = FALSE ;
  else {
bool mu__boolexpr119;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_one_fwd_resp_idic)) mu__boolexpr119 = TRUE ;
  else {
  mu__boolexpr119 = (mu_self.mu_tractor[mu_packet.mu_htid].mu_snoop_data_recvd) ; 
}
  mu__boolexpr117 = (mu__boolexpr119) ; 
}
if ( mu__boolexpr117 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_snpdone = mu_true;
mu_HBo__late_sf_update ( mu_self, mu_packet.mu_htid, mu_self.mu_tractor[mu_packet.mu_htid].mu_address );
bool mu__boolexpr120;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr120 = FALSE ;
  else {
  mu__boolexpr120 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr120 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_snpRspDone = mu_true;
}
}
if ( (mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__Flush) )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_packet.mu_htid].mu_address] = mu_packet.mu_data;
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__recv_ack_response(mu_1_HBo& mu_self, mu_1_IDIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_HTID mu_htid("htid",0);

mu_htid = mu_packet.mu_htid;
bool mu__boolexpr121;
bool mu__boolexpr122;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_data_recvd))) mu__boolexpr122 = FALSE ;
  else {
bool mu__boolexpr123;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr123 = TRUE ;
  else {
  mu__boolexpr123 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  mu__boolexpr122 = (mu__boolexpr123) ; 
}
  if (!(mu__boolexpr122)) mu__boolexpr121 = FALSE ;
  else {
  mu__boolexpr121 = ((mu_self.mu_tractor[mu_htid].mu_iresp_opcode) == (mu_IDI_Opcode__GoWritePullDrop)) ; 
}
if ( !(mu__boolexpr121) ) Error.Error("Assertion failed:  Unexpected ack recvd for htid  htid");
mu_HBo__update_and_free_tractor_entry ( mu_self, mu_htid );
};
/*** end procedure declaration ***/

void mu_HBo__recv_idic_snoop_response(mu_1_HBo& mu_self, mu_1_IDIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_Resp_Op mu_resp_opcode("resp_opcode",0);

mu_self.mu_tractor[mu_packet.mu_htid].mu_ro_count = (mu_self.mu_tractor[mu_packet.mu_htid].mu_ro_count) - (1);
bool mu__boolexpr124;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspSHitSE)) mu__boolexpr124 = TRUE ;
  else {
  mu__boolexpr124 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
if ( mu__boolexpr124 )
{
mu_resp_opcode = mu_Resp_Op__Rsp2S;
if ( (mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_resp_state = mu_CacheState__S;
}
}
else
{
bool mu__boolexpr125;
bool mu__boolexpr126;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIHitI)) mu__boolexpr126 = TRUE ;
  else {
  mu__boolexpr126 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIHitSE)) ; 
}
  if (mu__boolexpr126) mu__boolexpr125 = TRUE ;
  else {
  mu__boolexpr125 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIFwdM)) ; 
}
if ( mu__boolexpr125 )
{
mu_resp_opcode = mu_Resp_Op__Rsp2I;
}
else
{
bool mu__boolexpr127;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspVHitV)) mu__boolexpr127 = TRUE ;
  else {
  mu__boolexpr127 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspVFwdV)) ; 
}
if ( mu__boolexpr127 )
{
mu_resp_opcode = mu_Resp_Op__Unknown;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  snoop response opcode mapping is not defined for  packet.opcode");
}
}
}
bool mu__boolexpr128;
bool mu__boolexpr129;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIFwdM)) mu__boolexpr129 = TRUE ;
  else {
  mu__boolexpr129 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
  if (mu__boolexpr129) mu__boolexpr128 = TRUE ;
  else {
  mu__boolexpr128 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspVFwdV)) ; 
}
if ( mu__boolexpr128 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_one_fwd_resp_idic = mu_true;
bool mu__boolexpr130;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIFwdM)) mu__boolexpr130 = TRUE ;
  else {
  mu__boolexpr130 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
if ( mu__boolexpr130 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_wb_recvd = mu_true;
}
bool mu__boolexpr131;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr131 = FALSE ;
  else {
  mu__boolexpr131 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr131 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_false;
}
}
}
bool mu__boolexpr132;
  if ((mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__Get_SE)) mu__boolexpr132 = TRUE ;
  else {
  mu__boolexpr132 = ((mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__Get_S)) ; 
}
if ( mu__boolexpr132 )
{
bool mu__boolexpr133;
  if ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__SOT)) mu__boolexpr133 = TRUE ;
  else {
  mu__boolexpr133 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__FTS)) ; 
}
if ( mu__boolexpr133 )
{
if ( (mu_resp_opcode) == (mu_Resp_Op__Rsp2S) )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_limit_S = mu_true;
}
}
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_limit_S )
{
bool mu__boolexpr134;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr134 = FALSE ;
  else {
  mu__boolexpr134 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr134 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_dataE = mu_false;
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__NoInvSnp_RdCur) )
{
bool mu__boolexpr135;
bool mu__boolexpr136;
  if ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__SOT)) mu__boolexpr136 = TRUE ;
  else {
  mu__boolexpr136 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__FTS)) ; 
}
  if (mu__boolexpr136) mu__boolexpr135 = TRUE ;
  else {
  mu__boolexpr135 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__EXC)) ; 
}
if ( mu__boolexpr135 )
{
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_sf_hit )
{
if ( !(mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state.mu_CV_format) )
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state )) == (1) )
{
if ( (mu_resp_opcode) == (mu_Resp_Op__Rsp2I) )
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_Resp_Op__Rsp2I) )
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state );
}
}
}
}
}
}
bool mu__boolexpr137;
bool mu__boolexpr138;
  if (!((mu_self.mu_tractor[mu_packet.mu_htid].mu_ro_count) == (0))) mu__boolexpr138 = FALSE ;
  else {
  mu__boolexpr138 = (mu_HBo__all_needed_peers_are_snooped( mu_self, mu_packet.mu_htid )) ; 
}
  if (!(mu__boolexpr138)) mu__boolexpr137 = FALSE ;
  else {
bool mu__boolexpr139;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_one_fwd_resp_idic)) mu__boolexpr139 = TRUE ;
  else {
  mu__boolexpr139 = (mu_self.mu_tractor[mu_packet.mu_htid].mu_snoop_data_recvd) ; 
}
  mu__boolexpr137 = (mu__boolexpr139) ; 
}
if ( mu__boolexpr137 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_snpdone = mu_true;
mu_HBo__late_sf_update ( mu_self, mu_packet.mu_htid, mu_self.mu_tractor[mu_packet.mu_htid].mu_address );
bool mu__boolexpr140;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr140 = FALSE ;
  else {
  mu__boolexpr140 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr140 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_snpRspDone = mu_true;
bool mu__boolexpr141;
  if (!((mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData) == (mu_FOrDDataState__Un))) mu__boolexpr141 = FALSE ;
  else {
  mu__boolexpr141 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_alloc_hint)) ; 
}
if ( mu__boolexpr141 )
{
if ( !(mu_self.mu_tractor[mu_packet.mu_htid].mu_lateMfsLkupNeeded) )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__F;
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_true;
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__recv_CAResp(mu_1_HBo& mu_self, mu_1_UPIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_Resp_Op mu_resp_opcode("resp_opcode",0);

mu_self.mu_tractor[mu_packet.mu_htid].mu_ro_count = (mu_self.mu_tractor[mu_packet.mu_htid].mu_ro_count) - (1);
bool mu__boolexpr142;
bool mu__boolexpr143;
bool mu__boolexpr144;
bool mu__boolexpr145;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspI)) mu__boolexpr145 = TRUE ;
  else {
  mu__boolexpr145 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspIWb)) ; 
}
  if (mu__boolexpr145) mu__boolexpr144 = TRUE ;
  else {
  mu__boolexpr144 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdID)) ; 
}
  if (mu__boolexpr144) mu__boolexpr143 = TRUE ;
  else {
  mu__boolexpr143 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIWb)) ; 
}
  if (mu__boolexpr143) mu__boolexpr142 = TRUE ;
  else {
  mu__boolexpr142 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIC)) ; 
}
if ( mu__boolexpr142 )
{
mu_resp_opcode = mu_Resp_Op__Rsp2I;
}
else
{
bool mu__boolexpr146;
bool mu__boolexpr147;
bool mu__boolexpr148;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspS)) mu__boolexpr148 = TRUE ;
  else {
  mu__boolexpr148 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspSWb)) ; 
}
  if (mu__boolexpr148) mu__boolexpr147 = TRUE ;
  else {
  mu__boolexpr147 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdSWb)) ; 
}
  if (mu__boolexpr147) mu__boolexpr146 = TRUE ;
  else {
  mu__boolexpr146 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdS)) ; 
}
if ( mu__boolexpr146 )
{
mu_resp_opcode = mu_Resp_Op__Rsp2S;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__RspCurData) )
{
mu_resp_opcode = mu_Resp_Op__Unknown;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__RspE) )
{
mu_resp_opcode = mu_Resp_Op__Rsp2E;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  snoop response opcode mapping is not defined for  packet.opcode");
}
}
}
}
bool mu__boolexpr149;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspS)) mu__boolexpr149 = TRUE ;
  else {
  mu__boolexpr149 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspSWb)) ; 
}
if ( mu__boolexpr149 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_resp_state = mu_CacheState__S;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdID) )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_resp_state = mu_CacheState__M;
}
else
{
bool mu__boolexpr150;
bool mu__boolexpr151;
bool mu__boolexpr152;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdS)) mu__boolexpr152 = TRUE ;
  else {
  mu__boolexpr152 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdSWb)) ; 
}
  if (!(mu__boolexpr152)) mu__boolexpr151 = FALSE ;
  else {
  mu__boolexpr151 = ((mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr151)) mu__boolexpr150 = FALSE ;
  else {
bool mu__boolexpr153;
bool mu__boolexpr154;
  if ((mu_self.mu_tractor[mu_packet.mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr154 = TRUE ;
  else {
  mu__boolexpr154 = ((mu_self.mu_tractor[mu_packet.mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr154) mu__boolexpr153 = TRUE ;
  else {
  mu__boolexpr153 = ((mu_self.mu_tractor[mu_packet.mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  mu__boolexpr150 = (mu__boolexpr153) ; 
}
if ( mu__boolexpr150 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_resp_state = mu_CacheState__S;
}
else
{
bool mu__boolexpr155;
bool mu__boolexpr156;
  if (!((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspIWb))) mu__boolexpr156 = FALSE ;
  else {
  mu__boolexpr156 = ((mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr156)) mu__boolexpr155 = FALSE ;
  else {
bool mu__boolexpr157;
  if ((mu_self.mu_tractor[mu_packet.mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) mu__boolexpr157 = TRUE ;
  else {
  mu__boolexpr157 = ((mu_self.mu_tractor[mu_packet.mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  mu__boolexpr155 = (mu__boolexpr157) ; 
}
if ( mu__boolexpr155 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_resp_state = mu_CacheState__M;
}
}
}
}
bool mu__boolexpr158;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspIWb)) mu__boolexpr158 = TRUE ;
  else {
  mu__boolexpr158 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspSWb)) ; 
}
if ( mu__boolexpr158 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_snoop_data_recvd = mu_true;
mu_self.mu_tractor[mu_packet.mu_htid].mu_data = mu_packet.mu_data;
mu_self.mu_tractor[mu_packet.mu_htid].mu_wb_recvd = mu_true;
mu_self.mu_tractor[mu_packet.mu_htid].mu_be = mu_packet.mu_be;
if ( (mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__Flush) )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_packet.mu_htid].mu_address] = mu_packet.mu_data;
}
}
bool mu__boolexpr159;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr159 = FALSE ;
  else {
  mu__boolexpr159 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr159 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_false;
}
}
}
else
{
bool mu__boolexpr160;
bool mu__boolexpr161;
bool mu__boolexpr162;
bool mu__boolexpr163;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdID)) mu__boolexpr163 = TRUE ;
  else {
  mu__boolexpr163 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIWb)) ; 
}
  if (mu__boolexpr163) mu__boolexpr162 = TRUE ;
  else {
  mu__boolexpr162 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIC)) ; 
}
  if (mu__boolexpr162) mu__boolexpr161 = TRUE ;
  else {
  mu__boolexpr161 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdSWb)) ; 
}
  if (mu__boolexpr161) mu__boolexpr160 = TRUE ;
  else {
  mu__boolexpr160 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdS)) ; 
}
if ( mu__boolexpr160 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_true;
bool mu__boolexpr164;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIWb)) mu__boolexpr164 = TRUE ;
  else {
  mu__boolexpr164 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdSWb)) ; 
}
if ( mu__boolexpr164 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_snoop_data_recvd = mu_true;
mu_self.mu_tractor[mu_packet.mu_htid].mu_data = mu_packet.mu_data;
mu_self.mu_tractor[mu_packet.mu_htid].mu_wb_recvd = mu_true;
mu_self.mu_tractor[mu_packet.mu_htid].mu_be = mu_packet.mu_be;
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_packet.mu_htid].mu_address] = mu_packet.mu_data;
}
}
bool mu__boolexpr165;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr165 = FALSE ;
  else {
  mu__boolexpr165 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr165 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__RspCurData) )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_snoop_data_recvd = mu_true;
mu_self.mu_tractor[mu_packet.mu_htid].mu_data = mu_packet.mu_data;
mu_self.mu_tractor[mu_packet.mu_htid].mu_be = mu_packet.mu_be;
bool mu__boolexpr166;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr166 = FALSE ;
  else {
  mu__boolexpr166 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr166 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_false;
}
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__RspE) )
{
bool mu__boolexpr167;
bool mu__boolexpr168;
bool mu__boolexpr169;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr169 = FALSE ;
  else {
  mu__boolexpr169 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
  if (!(mu__boolexpr169)) mu__boolexpr168 = FALSE ;
  else {
  mu__boolexpr168 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_alloc_hint)) ; 
}
  if (!(mu__boolexpr168)) mu__boolexpr167 = FALSE ;
  else {
  mu__boolexpr167 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_lateMfsLkupNeeded)) ; 
}
if ( mu__boolexpr167 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__F;
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_true;
}
}
}
}
}
bool mu__boolexpr170;
  if ((mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__Get_SE)) mu__boolexpr170 = TRUE ;
  else {
  mu__boolexpr170 = ((mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__Get_S)) ; 
}
if ( mu__boolexpr170 )
{
bool mu__boolexpr171;
  if ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__SOT)) mu__boolexpr171 = TRUE ;
  else {
  mu__boolexpr171 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__FTS)) ; 
}
if ( mu__boolexpr171 )
{
if ( (mu_resp_opcode) == (mu_Resp_Op__Rsp2S) )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_limit_S = mu_true;
}
}
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_limit_S )
{
bool mu__boolexpr172;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr172 = FALSE ;
  else {
  mu__boolexpr172 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr172 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_dataE = mu_false;
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_packet.mu_htid].mu_coh_op) == (mu_Coh_Op__NoInvSnp_RdCur) )
{
bool mu__boolexpr173;
bool mu__boolexpr174;
  if ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__SOT)) mu__boolexpr174 = TRUE ;
  else {
  mu__boolexpr174 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__FTS)) ; 
}
  if (mu__boolexpr174) mu__boolexpr173 = TRUE ;
  else {
  mu__boolexpr173 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_packet.mu_htid].mu_agent_id, mu_self.mu_tractor[mu_packet.mu_htid].mu_protocol )) == (mu_CA_type__EXC)) ; 
}
if ( mu__boolexpr173 )
{
if ( mu_self.mu_tractor[mu_packet.mu_htid].mu_sf_hit )
{
if ( !(mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state.mu_CV_format) )
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state )) == (1) )
{
if ( (mu_resp_opcode) == (mu_Resp_Op__Rsp2I) )
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_Resp_Op__Rsp2I) )
{
mu_SFEntry__release_sfentry ( mu_self.mu_tractor[mu_packet.mu_htid].mu_next_sf_state );
}
}
}
}
}
}
bool mu__boolexpr175;
bool mu__boolexpr176;
  if (!((mu_self.mu_tractor[mu_packet.mu_htid].mu_ro_count) == (0))) mu__boolexpr176 = FALSE ;
  else {
  mu__boolexpr176 = (mu_HBo__all_needed_peers_are_snooped( mu_self, mu_packet.mu_htid )) ; 
}
  if (!(mu__boolexpr176)) mu__boolexpr175 = FALSE ;
  else {
bool mu__boolexpr177;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_one_fwd_resp_idic)) mu__boolexpr177 = TRUE ;
  else {
  mu__boolexpr177 = (mu_self.mu_tractor[mu_packet.mu_htid].mu_snoop_data_recvd) ; 
}
  mu__boolexpr175 = (mu__boolexpr177) ; 
}
if ( mu__boolexpr175 )
{
mu_self.mu_tractor[mu_packet.mu_htid].mu_snpdone = mu_true;
mu_HBo__late_sf_update ( mu_self, mu_packet.mu_htid, mu_self.mu_tractor[mu_packet.mu_htid].mu_address );
bool mu__boolexpr178;
  if (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_req_sent)) mu__boolexpr178 = FALSE ;
  else {
  mu__boolexpr178 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr178 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_snpRspDone = mu_true;
bool mu__boolexpr179;
  if (!((mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData) == (mu_FOrDDataState__Un))) mu__boolexpr179 = FALSE ;
  else {
  mu__boolexpr179 = (!(mu_self.mu_tractor[mu_packet.mu_htid].mu_alloc_hint)) ; 
}
if ( mu__boolexpr179 )
{
if ( !(mu_self.mu_tractor[mu_packet.mu_htid].mu_lateMfsLkupNeeded) )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_packet.mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__F;
mu_self.mu_tractor[mu_packet.mu_htid].mu_data_sent = mu_true;
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__recv_CAReq(mu_1_HBo& mu_self, mu_1_UPIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_HTID mu_idx("idx",0);

bool mu__boolexpr180;
  if (mu_HBo__is_available_TractorEntry( mu_self )) mu__boolexpr180 = TRUE ;
  else {
bool mu__boolexpr181;
bool mu__boolexpr182;
bool mu__boolexpr183;
bool mu__boolexpr184;
bool mu__boolexpr185;
bool mu__boolexpr186;
bool mu__boolexpr187;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr187 = TRUE ;
  else {
  mu__boolexpr187 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr187) mu__boolexpr186 = TRUE ;
  else {
  mu__boolexpr186 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr186) mu__boolexpr185 = TRUE ;
  else {
  mu__boolexpr185 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr185) mu__boolexpr184 = TRUE ;
  else {
  mu__boolexpr184 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr184) mu__boolexpr183 = TRUE ;
  else {
  mu__boolexpr183 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr183) mu__boolexpr182 = TRUE ;
  else {
  mu__boolexpr182 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  if (!(mu__boolexpr182)) mu__boolexpr181 = FALSE ;
  else {
  mu__boolexpr181 = (!(mu_self.mu_tractor[1].mu_valid)) ; 
}
  mu__boolexpr180 = (mu__boolexpr181) ; 
}
mu_Guard ( mu__boolexpr180 );
if ( mu_guard_failed.isundefined() )
{
if ( mu_HBo__is_available_TractorEntry( mu_self ) )
{
mu_idx = mu_HBo__available_TractorEntry( mu_self );
}
else
{
mu_idx = 1;
}
mu_TractorEntry__load_upi_packet ( mu_self.mu_tractor[mu_idx], mu_packet );
bool mu__boolexpr188;
bool mu__boolexpr189;
bool mu__boolexpr190;
bool mu__boolexpr191;
bool mu__boolexpr192;
bool mu__boolexpr193;
bool mu__boolexpr194;
bool mu__boolexpr195;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr195 = TRUE ;
  else {
  mu__boolexpr195 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr195) mu__boolexpr194 = TRUE ;
  else {
  mu__boolexpr194 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr194) mu__boolexpr193 = TRUE ;
  else {
  mu__boolexpr193 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr193) mu__boolexpr192 = TRUE ;
  else {
  mu__boolexpr192 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr192) mu__boolexpr191 = TRUE ;
  else {
  mu__boolexpr191 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr191) mu__boolexpr190 = TRUE ;
  else {
  mu__boolexpr190 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr190) mu__boolexpr189 = TRUE ;
  else {
  mu__boolexpr189 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr189) mu__boolexpr188 = TRUE ;
  else {
  mu__boolexpr188 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
if ( mu__boolexpr188 )
{
if ( mu_self.mu_coh_ll[mu_packet.mu_address].mu_valid )
{
if (mu_idx.isundefined())
  mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail].mu_next_entry_c.undefine();
else
  mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail].mu_next_entry_c = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
else
{
mu_self.mu_coh_ll[mu_packet.mu_address].mu_valid = mu_true;
if (mu_idx.isundefined())
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_head.undefine();
else
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_head = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_coh_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
}
else
{
bool mu__boolexpr196;
bool mu__boolexpr197;
bool mu__boolexpr198;
bool mu__boolexpr199;
bool mu__boolexpr200;
bool mu__boolexpr201;
bool mu__boolexpr202;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr202 = TRUE ;
  else {
  mu__boolexpr202 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr202) mu__boolexpr201 = TRUE ;
  else {
  mu__boolexpr201 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr201) mu__boolexpr200 = TRUE ;
  else {
  mu__boolexpr200 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr200) mu__boolexpr199 = TRUE ;
  else {
  mu__boolexpr199 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr199) mu__boolexpr198 = TRUE ;
  else {
  mu__boolexpr198 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr198) mu__boolexpr197 = TRUE ;
  else {
  mu__boolexpr197 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  if (!(mu__boolexpr197)) mu__boolexpr196 = FALSE ;
  else {
  mu__boolexpr196 = (!((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt))) ; 
}
if ( mu__boolexpr196 )
{
if ( mu_self.mu_mem_ll[mu_packet.mu_address].mu_valid )
{
if (mu_idx.isundefined())
  mu_self.mu_tractor[mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail].mu_next_entry_m.undefine();
else
  mu_self.mu_tractor[mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail].mu_next_entry_m = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
else
{
mu_self.mu_mem_ll[mu_packet.mu_address].mu_valid = mu_true;
if (mu_idx.isundefined())
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_head.undefine();
else
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_head = mu_idx;
if (mu_idx.isundefined())
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail.undefine();
else
  mu_self.mu_mem_ll[mu_packet.mu_address].mu_tail = mu_idx;
}
mu_self.mu_tractor[mu_idx].mu_in_mem_domain = mu_true;
}
}
if ( mu_mem_abstracted )
{
bool mu__boolexpr203;
bool mu__boolexpr204;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr204 = TRUE ;
  else {
  mu__boolexpr204 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr204) mu__boolexpr203 = TRUE ;
  else {
  mu__boolexpr203 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
if ( mu__boolexpr203 )
{
mu_self.mu_mem[mu_packet.mu_address] = mu_packet.mu_data;
}
else
{
bool mu__boolexpr205;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) mu__boolexpr205 = TRUE ;
  else {
  mu__boolexpr205 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
if ( mu__boolexpr205 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_packet.mu_be[mu_word] )
{
mu_self.mu_mem[mu_packet.mu_address][mu_word] = mu_packet.mu_data[mu_word];
}
};
};
}
}
}
else
{
bool mu__boolexpr206;
bool mu__boolexpr207;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr207 = TRUE ;
  else {
  mu__boolexpr207 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr207) mu__boolexpr206 = TRUE ;
  else {
  mu__boolexpr206 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
if ( mu__boolexpr206 )
{
mu_self.mu_tractor[mu_idx].mu_mem_op_init = mu_Mem_Op__Write_M;
mu_self.mu_tractor[mu_idx].mu_be = mu_packet.mu_be;
mu_self.mu_tractor[mu_idx].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_idx].mu_data = mu_packet.mu_data;
if ( mu_mufasa_mode )
{
mu_self.mu_tractor[mu_idx].mu_lateMfsLkupNeeded = mu_true;
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__WbEtoI) )
{
mu_self.mu_tractor[mu_idx].mu_mem_op_init = mu_Mem_Op__Write_E;
mu_self.mu_tractor[mu_idx].mu_be = mu_packet.mu_be;
mu_self.mu_tractor[mu_idx].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_idx].mu_data = mu_packet.mu_data;
if ( mu_mufasa_mode )
{
mu_self.mu_tractor[mu_idx].mu_lateMfsLkupNeeded = mu_true;
}
}
else
{
bool mu__boolexpr208;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) mu__boolexpr208 = TRUE ;
  else {
  mu__boolexpr208 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
if ( mu__boolexpr208 )
{
mu_self.mu_tractor[mu_idx].mu_mem_op_init = mu_Mem_Op__Write_P;
mu_self.mu_tractor[mu_idx].mu_be = mu_packet.mu_be;
mu_self.mu_tractor[mu_idx].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_idx].mu_data = mu_packet.mu_data;
if ( mu_mufasa_mode )
{
mu_self.mu_tractor[mu_idx].mu_lateMfsLkupNeeded = mu_true;
}
}
}
}
}
bool mu__boolexpr209;
bool mu__boolexpr210;
bool mu__boolexpr211;
bool mu__boolexpr212;
bool mu__boolexpr213;
bool mu__boolexpr214;
bool mu__boolexpr215;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr215 = TRUE ;
  else {
  mu__boolexpr215 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr215) mu__boolexpr214 = TRUE ;
  else {
  mu__boolexpr214 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr214) mu__boolexpr213 = TRUE ;
  else {
  mu__boolexpr213 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr213) mu__boolexpr212 = TRUE ;
  else {
  mu__boolexpr212 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr212) mu__boolexpr211 = TRUE ;
  else {
  mu__boolexpr211 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr211) mu__boolexpr210 = TRUE ;
  else {
  mu__boolexpr210 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  if (!(mu__boolexpr210)) mu__boolexpr209 = FALSE ;
  else {
  mu__boolexpr209 = (!((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt))) ; 
}
if ( mu__boolexpr209 )
{
bool mu__boolexpr216;
  if (!(mu_self.mu_coh_ll[mu_packet.mu_address].mu_valid)) mu__boolexpr216 = FALSE ;
  else {
  mu__boolexpr216 = (!(mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_head].mu_in_mem_domain)) ; 
}
if ( mu__boolexpr216 )
{
if ( mu_mufasa_mode )
{
mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_head].mu_lateMfsLkupNeeded = mu_true;
}
if ( mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_head].mu_prlrd_req_sent )
{
if ( !(mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_head].mu_prlrd_resp_recvd) )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_head].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
if ( mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_head].mu_data_sent )
{
mu_self.mu_tractor[mu_self.mu_coh_ll[mu_packet.mu_address].mu_head].mu_data_sent = mu_false;
}
}
}
}
}
bool mu__boolexpr217;
bool mu__boolexpr218;
  if (!(!((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)))) mu__boolexpr218 = FALSE ;
  else {
  mu__boolexpr218 = (mu_packet.mu_alloc_hint) ; 
}
  if (!(mu__boolexpr218)) mu__boolexpr217 = FALSE ;
  else {
  mu__boolexpr217 = (mu_mufasa_mode) ; 
}
if ( mu__boolexpr217 )
{
mu_self.mu_tractor[mu_idx].mu_lateMfsLkupNeeded = mu_true;
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__no_other_active_snooping_req_for_same_address(mu_1_HBo& mu_self,const mu_1_HTID& mu_htid)
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr219;
bool mu__boolexpr220;
bool mu__boolexpr221;
bool mu__boolexpr222;
  if (!(mu_self.mu_tractor[mu_id].mu_valid)) mu__boolexpr222 = FALSE ;
  else {
  mu__boolexpr222 = ((mu_id) != (mu_htid)) ; 
}
  if (!(mu__boolexpr222)) mu__boolexpr221 = FALSE ;
  else {
  mu__boolexpr221 = ((mu_self.mu_tractor[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
  if (!(mu__boolexpr221)) mu__boolexpr220 = FALSE ;
  else {
bool mu__boolexpr223;
bool mu__boolexpr224;
bool mu__boolexpr225;
bool mu__boolexpr226;
bool mu__boolexpr227;
  if ((mu_self.mu_tractor[mu_id].mu_coh_op) == (mu_Coh_Op__Get_SE)) mu__boolexpr227 = TRUE ;
  else {
  mu__boolexpr227 = ((mu_self.mu_tractor[mu_id].mu_coh_op) == (mu_Coh_Op__Get_S)) ; 
}
  if (mu__boolexpr227) mu__boolexpr226 = TRUE ;
  else {
  mu__boolexpr226 = ((mu_self.mu_tractor[mu_id].mu_coh_op) == (mu_Coh_Op__Get_E)) ; 
}
  if (mu__boolexpr226) mu__boolexpr225 = TRUE ;
  else {
  mu__boolexpr225 = ((mu_self.mu_tractor[mu_id].mu_coh_op) == (mu_Coh_Op__Wr_Inv)) ; 
}
  if (mu__boolexpr225) mu__boolexpr224 = TRUE ;
  else {
  mu__boolexpr224 = ((mu_self.mu_tractor[mu_id].mu_coh_op) == (mu_Coh_Op__Flush)) ; 
}
  if (mu__boolexpr224) mu__boolexpr223 = TRUE ;
  else {
  mu__boolexpr223 = ((mu_self.mu_tractor[mu_id].mu_coh_op) == (mu_Coh_Op__NoInvSnp_RdCur)) ; 
}
  mu__boolexpr220 = (mu__boolexpr223) ; 
}
  if (!(mu__boolexpr220)) mu__boolexpr219 = FALSE ;
  else {
  mu__boolexpr219 = (mu_self.mu_tractor[mu_id].mu_sf_lookup_done) ; 
}
if ( mu__boolexpr219 )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function HBo__no_other_active_snooping_req_for_same_address reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__early_MFS_lookup_phase(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_MFS_WAYS mu_way("way",0);

/*** Variable declaration ***/
mu_0_boolean mu_way_found("way_found",8);

mu_Guard ( mu_self.mu_tractor[mu_htid].mu_valid );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr228;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr228 = TRUE ;
  else {
bool mu__boolexpr229;
bool mu__boolexpr230;
bool mu__boolexpr231;
bool mu__boolexpr232;
bool mu__boolexpr233;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr233 = TRUE ;
  else {
  mu__boolexpr233 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr233) mu__boolexpr232 = TRUE ;
  else {
  mu__boolexpr232 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr232) mu__boolexpr231 = TRUE ;
  else {
  mu__boolexpr231 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr231) mu__boolexpr230 = TRUE ;
  else {
  mu__boolexpr230 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr230) mu__boolexpr229 = TRUE ;
  else {
  mu__boolexpr229 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr228 = (mu__boolexpr229) ; 
}
mu_Guard ( mu__boolexpr228 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr234;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr234 = TRUE ;
  else {
bool mu__boolexpr235;
bool mu__boolexpr236;
bool mu__boolexpr237;
bool mu__boolexpr238;
bool mu__boolexpr239;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr239 = TRUE ;
  else {
  mu__boolexpr239 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr239) mu__boolexpr238 = TRUE ;
  else {
  mu__boolexpr238 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr238) mu__boolexpr237 = TRUE ;
  else {
  mu__boolexpr237 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr237) mu__boolexpr236 = TRUE ;
  else {
  mu__boolexpr236 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr236) mu__boolexpr235 = TRUE ;
  else {
  mu__boolexpr235 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  mu__boolexpr234 = (mu__boolexpr235) ; 
}
mu_Guard ( mu__boolexpr234 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_mufasa_mode );
if ( mu_guard_failed.isundefined() )
{
mu_way_found = mu_false;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr240;
  if (!(mu_self.mu_mufasa[mu_id].mu_valid)) mu__boolexpr240 = FALSE ;
  else {
  mu__boolexpr240 = ((mu_self.mu_mufasa[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr240 )
{
mu_way_found = mu_true;
mu_way = mu_id;
}
};
};
if ( mu_way_found )
{
mu_self.mu_tractor[mu_htid].mu_mfs_hit = mu_true;
if (mu_way.isundefined())
  mu_self.mu_tractor[mu_htid].mu_mfs_way.undefine();
else
  mu_self.mu_tractor[mu_htid].mu_mfs_way = mu_way;
mu_self.mu_tractor[mu_htid].mu_mfs_state = mu_self.mu_mufasa[mu_way].mu_state;
if ( !((mu_self.mu_mufasa[mu_way].mu_state) != (mu_MFSState__I)) ) Error.Error("Assertion failed:  mufasa way with I state found");
}
else
{
mu_self.mu_tractor[mu_htid].mu_mfs_state = mu_MFSState__I;
}
mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done = mu_true;
}
}
}
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__is_available_sf_way(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_sf[mu_id].mu_valid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function HBo__is_available_sf_way reached without returning values.");
};
/*** end function declaration ***/

mu_1_SF_WAYS mu_HBo__available_sf_way(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_sf[mu_id].mu_valid) )
{
return mu_id;
}
};
};
	Error.Error("The end of function HBo__available_sf_way reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__start_sf_victim(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_0_boolean mu_tag_match("tag_match",0);

/*** Variable declaration ***/
mu_1_SF_WAYS mu_sf_way("sf_way",8);

mu_Guard ( mu_self.mu_tractor[mu_htid].mu_valid );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr241;
bool mu__boolexpr242;
  if (!(mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr242 = FALSE ;
  else {
  mu__boolexpr242 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  if (mu__boolexpr242) mu__boolexpr241 = TRUE ;
  else {
bool mu__boolexpr243;
  if (!(mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr243 = FALSE ;
  else {
  mu__boolexpr243 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  mu__boolexpr241 = (mu__boolexpr243) ; 
}
mu_Guard ( mu__boolexpr241 );
if ( mu_guard_failed.isundefined() )
{
mu_tag_match = mu_false;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr244;
  if (!(mu_self.mu_sf[mu_id].mu_valid)) mu__boolexpr244 = FALSE ;
  else {
  mu__boolexpr244 = ((mu_self.mu_sf[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr244 )
{
mu_tag_match = mu_true;
mu_sf_way = mu_id;
mu_self.mu_tractor[mu_htid].mu_sf_hit = mu_true;
mu_self.mu_tractor[mu_htid].mu_sf_way = mu_id;
mu_self.mu_tractor[mu_htid].mu_next_sf_state = mu_self.mu_sf[mu_id];
}
};
};
bool mu__boolexpr245;
bool mu__boolexpr246;
bool mu__boolexpr247;
  if (!(!(mu_tag_match))) mu__boolexpr247 = FALSE ;
  else {
bool mu__boolexpr248;
bool mu__boolexpr249;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_S)) mu__boolexpr249 = TRUE ;
  else {
  mu__boolexpr249 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_SE)) ; 
}
  if (mu__boolexpr249) mu__boolexpr248 = TRUE ;
  else {
  mu__boolexpr248 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_E)) ; 
}
  mu__boolexpr247 = (mu__boolexpr248) ; 
}
  if (!(mu__boolexpr247)) mu__boolexpr246 = FALSE ;
  else {
bool mu__boolexpr250;
  if ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS)) mu__boolexpr250 = TRUE ;
  else {
  mu__boolexpr250 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC)) ; 
}
  mu__boolexpr246 = (mu__boolexpr250) ; 
}
  if (!(mu__boolexpr246)) mu__boolexpr245 = FALSE ;
  else {
  mu__boolexpr245 = (!(mu_HBo__is_available_sf_way( mu_self ))) ; 
}
mu_Guard ( mu__boolexpr245 );
if ( mu_guard_failed.isundefined() )
{
}
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__is_possible_sf_alloc(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_sf[mu_id].mu_valid) )
{
return mu_true;
}
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_sf[mu_id].mu_allocAvoid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function HBo__is_possible_sf_alloc reached without returning values.");
};
/*** end function declaration ***/

mu_1_SF_WAYS mu_HBo__possible_sf_alloc(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_sf[mu_id].mu_valid) )
{
return mu_id;
}
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_sf[mu_id].mu_allocAvoid) )
{
return mu_id;
}
};
};
	Error.Error("The end of function HBo__possible_sf_alloc reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__SF_lookup_phase(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid, const mu_0_boolean& mu_choice)
{
/*** Variable declaration ***/
mu_0_boolean mu_all_cv_bits_fts_0("all_cv_bits_fts_0",0);

/*** Variable declaration ***/
mu_0_boolean mu_upi_is_owner("upi_is_owner",8);

/*** Variable declaration ***/
mu_0_boolean mu_tag_match("tag_match",16);

/*** Variable declaration ***/
mu_1_SF_WAYS mu_sf_way("sf_way",24);

/*** Variable declaration ***/
mu_1_SF_WAYS mu_avail_way("avail_way",32);

/*** Variable declaration ***/
mu_1_HTID mu_vic_htid("vic_htid",40);

mu_Guard ( mu_self.mu_tractor[mu_htid].mu_valid );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr251;
bool mu__boolexpr252;
  if (!(mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr252 = FALSE ;
  else {
  mu__boolexpr252 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  if (mu__boolexpr252) mu__boolexpr251 = TRUE ;
  else {
bool mu__boolexpr253;
  if (!(mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr253 = FALSE ;
  else {
  mu__boolexpr253 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  mu__boolexpr251 = (mu__boolexpr253) ; 
}
mu_Guard ( mu__boolexpr251 );
if ( mu_guard_failed.isundefined() )
{
mu_all_cv_bits_fts_0 = mu_true;
mu_upi_is_owner = mu_false;
mu_tag_match = mu_false;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr254;
  if (!(mu_self.mu_sf[mu_id].mu_valid)) mu__boolexpr254 = FALSE ;
  else {
  mu__boolexpr254 = ((mu_self.mu_sf[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr254 )
{
mu_tag_match = mu_true;
mu_sf_way = mu_id;
mu_self.mu_tractor[mu_htid].mu_sf_hit = mu_true;
mu_self.mu_tractor[mu_htid].mu_sf_way = mu_id;
mu_self.mu_tractor[mu_htid].mu_next_sf_state = mu_self.mu_sf[mu_id];
}
};
};
bool mu__boolexpr255;
  if (mu_tag_match) mu__boolexpr255 = TRUE ;
  else {
bool mu__boolexpr256;
bool mu__boolexpr257;
bool mu__boolexpr258;
bool mu__boolexpr259;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_S)) mu__boolexpr259 = TRUE ;
  else {
  mu__boolexpr259 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_SE)) ; 
}
  if (mu__boolexpr259) mu__boolexpr258 = TRUE ;
  else {
  mu__boolexpr258 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_E)) ; 
}
  if (!(mu__boolexpr258)) mu__boolexpr257 = FALSE ;
  else {
bool mu__boolexpr260;
  if ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS)) mu__boolexpr260 = TRUE ;
  else {
  mu__boolexpr260 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC)) ; 
}
  mu__boolexpr257 = (mu__boolexpr260) ; 
}
  if (!(mu__boolexpr257)) mu__boolexpr256 = TRUE ;
  else {
  mu__boolexpr256 = (mu_HBo__is_available_sf_way( mu_self )) ; 
}
  mu__boolexpr255 = (mu__boolexpr256) ; 
}
mu_Guard ( mu__boolexpr255 );
if ( mu_guard_failed.isundefined() )
{
if ( mu_tag_match )
{
mu_self.mu_sf[mu_sf_way].mu_allocAvoid = mu_true;
}
else
{
bool mu__boolexpr261;
bool mu__boolexpr262;
bool mu__boolexpr263;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_S)) mu__boolexpr263 = TRUE ;
  else {
  mu__boolexpr263 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_SE)) ; 
}
  if (mu__boolexpr263) mu__boolexpr262 = TRUE ;
  else {
  mu__boolexpr262 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_E)) ; 
}
  if (!(mu__boolexpr262)) mu__boolexpr261 = FALSE ;
  else {
bool mu__boolexpr264;
  if ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS)) mu__boolexpr264 = TRUE ;
  else {
  mu__boolexpr264 = ((mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC)) ; 
}
  mu__boolexpr261 = (mu__boolexpr264) ; 
}
if ( mu__boolexpr261 )
{
if ( mu_HBo__is_available_sf_way( mu_self ) )
{
mu_avail_way = mu_HBo__available_sf_way( mu_self );
}
mu_self.mu_sf[mu_avail_way].mu_allocAvoid = mu_true;
mu_self.mu_tractor[mu_htid].mu_sf_hit = mu_true;
if (mu_avail_way.isundefined())
  mu_self.mu_tractor[mu_htid].mu_sf_way.undefine();
else
  mu_self.mu_tractor[mu_htid].mu_sf_way = mu_avail_way;
}
}
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_S) )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr265;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr265 = FALSE ;
  else {
  mu__boolexpr265 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr265 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpCode;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr266;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr266 = FALSE ;
  else {
  mu__boolexpr266 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr266 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpCode;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub267 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub267; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr268;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr268 = FALSE ;
  else {
  mu__boolexpr268 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr268 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpCode;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
}
};
};
{
int mu__ub269 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub269; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
}
};
};
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (1) )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
}
else
{
if ( mu_self.mu_sf[mu_sf_way].mu_CV_format )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr270;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr270 = FALSE ;
  else {
  mu__boolexpr270 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr270 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpCode;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
};
};
}
if ( 0 )
{
mu_self.mu_sf[mu_avail_way].mu_CV_format = mu_false;
mu_self.mu_sf[mu_avail_way].mu_valid = mu_true;
mu_self.mu_sf[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_avail_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
mu_self.mu_sf[mu_avail_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr271;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr271 = FALSE ;
  else {
  mu__boolexpr271 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr271 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpCode;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
};
};
}
if ( 0 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_format = mu_false;
mu_self.mu_sf[mu_sf_way].mu_valid = mu_true;
mu_self.mu_sf[mu_sf_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
bool mu__boolexpr272;
bool mu__boolexpr273;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr273 = FALSE ;
  else {
  mu__boolexpr273 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr273) mu__boolexpr272 = TRUE ;
  else {
bool mu__boolexpr274;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr274 = FALSE ;
  else {
  mu__boolexpr274 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr272 = (mu__boolexpr274) ; 
}
if ( mu__boolexpr272 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub275 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub275; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr276;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr276 = FALSE ;
  else {
  mu__boolexpr276 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr276 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpCode;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCode;
}
}
};
};
{
int mu__ub277 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub277; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCode;
}
};
};
}
else
{
bool mu__boolexpr278;
bool mu__boolexpr279;
bool mu__boolexpr280;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr280 = FALSE ;
  else {
  mu__boolexpr280 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr280) mu__boolexpr279 = TRUE ;
  else {
bool mu__boolexpr281;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr281 = FALSE ;
  else {
  mu__boolexpr281 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr279 = (mu__boolexpr281) ; 
}
  if (!(mu__boolexpr279)) mu__boolexpr278 = FALSE ;
  else {
  mu__boolexpr278 = (mu_self.mu_tractor[mu_htid].mu_selfsnp) ; 
}
if ( mu__boolexpr278 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
bool mu__boolexpr282;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr282 = FALSE ;
  else {
  mu__boolexpr282 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr282 )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_IDI_Opcode__BackInv;
}
else
{
bool mu__boolexpr283;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr283 = FALSE ;
  else {
  mu__boolexpr283 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr283 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_UPI_Opcode__SnpLInv;
}
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
bool mu__boolexpr284;
bool mu__boolexpr285;
bool mu__boolexpr286;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr286 = FALSE ;
  else {
  mu__boolexpr286 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr286) mu__boolexpr285 = TRUE ;
  else {
bool mu__boolexpr287;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr287 = FALSE ;
  else {
  mu__boolexpr287 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr285 = (mu__boolexpr287) ; 
}
  if (!(mu__boolexpr285)) mu__boolexpr284 = FALSE ;
  else {
  mu__boolexpr284 = (!(mu_self.mu_tractor[mu_htid].mu_selfsnp)) ; 
}
if ( mu__boolexpr284 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: case is not covered in sf lookup phase");
}
}
}
}
else
{
bool mu__boolexpr288;
bool mu__boolexpr289;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr289 = FALSE ;
  else {
  mu__boolexpr289 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr289) mu__boolexpr288 = TRUE ;
  else {
bool mu__boolexpr290;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr290 = FALSE ;
  else {
  mu__boolexpr290 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr288 = (mu__boolexpr290) ; 
}
if ( mu__boolexpr288 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
bool mu__boolexpr291;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr291 = FALSE ;
  else {
  mu__boolexpr291 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
if ( mu__boolexpr291 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
bool mu__boolexpr292;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr292 = FALSE ;
  else {
  mu__boolexpr292 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
if ( mu__boolexpr292 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
else
{
bool mu__boolexpr293;
bool mu__boolexpr294;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr294 = FALSE ;
  else {
  mu__boolexpr294 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr294) mu__boolexpr293 = TRUE ;
  else {
bool mu__boolexpr295;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr295 = FALSE ;
  else {
  mu__boolexpr295 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr293 = (mu__boolexpr295) ; 
}
if ( mu__boolexpr293 )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_selfsnp) )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
}
else
{
if ( mu_choice )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub296 = 1;
for (int mu_id = 0; mu_id <= mu__ub296; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
};
};
{
int mu__ub297 = 1;
for (int mu_id = 0; mu_id <= mu__ub297; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__BackInv;
}
};
};
}
}
}
}
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_avail_way].mu_CV_format = mu_true;
mu_self.mu_sf[mu_avail_way].mu_valid = mu_true;
mu_self.mu_sf[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_avail_way].mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_avail_way].mu_owner_protocol = mu_Protocol__UPI;
}
else
{
mu_self.mu_sf[mu_avail_way].mu_owner_protocol = mu_Protocol__IDIC;
}
}
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_sf_way].mu_CV_format = mu_true;
mu_self.mu_sf[mu_sf_way].mu_valid = mu_true;
mu_self.mu_sf[mu_sf_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_sf_way].mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_owner_protocol = mu_Protocol__UPI;
}
else
{
mu_self.mu_sf[mu_sf_way].mu_owner_protocol = mu_Protocol__IDIC;
}
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (0) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub298 = 1;
for (int mu_id = 0; mu_id <= mu__ub298; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] = mu_false;
}
};
};
{
int mu__ub299 = 1;
for (int mu_id = 0; mu_id <= mu__ub299; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] = mu_false;
}
};
};
}
}
}
else
{
bool mu__boolexpr300;
  if (!((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_self.mu_tractor[mu_htid].mu_protocol))) mu__boolexpr300 = FALSE ;
  else {
  mu__boolexpr300 = ((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id)) ; 
}
if ( mu__boolexpr300 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
bool mu__boolexpr301;
  if (!((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC))) mu__boolexpr301 = FALSE ;
  else {
  mu__boolexpr301 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
if ( mu__boolexpr301 )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
bool mu__boolexpr302;
  if (!((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI))) mu__boolexpr302 = FALSE ;
  else {
  mu__boolexpr302 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr302 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  HBo__detect_CA_type(self, self.tractor[htid].agent_id, self.tractor[htid].protocol)");
}
}
}
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr303;
  if (!(mu_self.mu_monitor[mu_id].mu_valid)) mu__boolexpr303 = FALSE ;
  else {
  mu__boolexpr303 = ((mu_self.mu_monitor[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr303 )
{
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
}
};
};
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_SE) )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr304;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr304 = FALSE ;
  else {
  mu__boolexpr304 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr304 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpData;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr305;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr305 = FALSE ;
  else {
  mu__boolexpr305 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr305 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpData;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub306 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub306; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr307;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr307 = FALSE ;
  else {
  mu__boolexpr307 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr307 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpData;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
};
};
{
int mu__ub308 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub308; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
};
};
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr309;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr309 = FALSE ;
  else {
  mu__boolexpr309 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr309 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpData;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
};
};
}
if ( 0 )
{
mu_self.mu_sf[mu_avail_way].mu_CV_format = mu_false;
mu_self.mu_sf[mu_avail_way].mu_valid = mu_true;
mu_self.mu_sf[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_avail_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
mu_self.mu_sf[mu_avail_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr310;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr310 = FALSE ;
  else {
  mu__boolexpr310 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr310 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpData;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
};
};
}
if ( 0 )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
bool mu__boolexpr311;
bool mu__boolexpr312;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr312 = FALSE ;
  else {
  mu__boolexpr312 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr312) mu__boolexpr311 = TRUE ;
  else {
bool mu__boolexpr313;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr313 = FALSE ;
  else {
  mu__boolexpr313 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr311 = (mu__boolexpr313) ; 
}
if ( mu__boolexpr311 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub314 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub314; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr315;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr315 = FALSE ;
  else {
  mu__boolexpr315 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr315 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpData;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
};
};
{
int mu__ub316 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub316; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
};
};
}
else
{
bool mu__boolexpr317;
bool mu__boolexpr318;
bool mu__boolexpr319;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr319 = FALSE ;
  else {
  mu__boolexpr319 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr319) mu__boolexpr318 = TRUE ;
  else {
bool mu__boolexpr320;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr320 = FALSE ;
  else {
  mu__boolexpr320 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr318 = (mu__boolexpr320) ; 
}
  if (!(mu__boolexpr318)) mu__boolexpr317 = FALSE ;
  else {
  mu__boolexpr317 = (mu_self.mu_tractor[mu_htid].mu_selfsnp) ; 
}
if ( mu__boolexpr317 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
bool mu__boolexpr321;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr321 = FALSE ;
  else {
  mu__boolexpr321 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr321 )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_IDI_Opcode__BackInv;
}
else
{
bool mu__boolexpr322;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr322 = FALSE ;
  else {
  mu__boolexpr322 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr322 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_UPI_Opcode__SnpLInv;
}
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
bool mu__boolexpr323;
bool mu__boolexpr324;
bool mu__boolexpr325;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr325 = FALSE ;
  else {
  mu__boolexpr325 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr325) mu__boolexpr324 = TRUE ;
  else {
bool mu__boolexpr326;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr326 = FALSE ;
  else {
  mu__boolexpr326 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr324 = (mu__boolexpr326) ; 
}
  if (!(mu__boolexpr324)) mu__boolexpr323 = FALSE ;
  else {
  mu__boolexpr323 = (!(mu_self.mu_tractor[mu_htid].mu_selfsnp)) ; 
}
if ( mu__boolexpr323 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: case is not covered in sf lookup phase");
}
}
}
}
else
{
bool mu__boolexpr327;
bool mu__boolexpr328;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr328 = FALSE ;
  else {
  mu__boolexpr328 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr328) mu__boolexpr327 = TRUE ;
  else {
bool mu__boolexpr329;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr329 = FALSE ;
  else {
  mu__boolexpr329 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr327 = (mu__boolexpr329) ; 
}
if ( mu__boolexpr327 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
bool mu__boolexpr330;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr330 = FALSE ;
  else {
  mu__boolexpr330 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
if ( mu__boolexpr330 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
bool mu__boolexpr331;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr331 = FALSE ;
  else {
  mu__boolexpr331 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
if ( mu__boolexpr331 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
else
{
bool mu__boolexpr332;
bool mu__boolexpr333;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr333 = FALSE ;
  else {
  mu__boolexpr333 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr333) mu__boolexpr332 = TRUE ;
  else {
bool mu__boolexpr334;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr334 = FALSE ;
  else {
  mu__boolexpr334 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr332 = (mu__boolexpr334) ; 
}
if ( mu__boolexpr332 )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_selfsnp) )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
}
else
{
if ( mu_choice )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub335 = 1;
for (int mu_id = 0; mu_id <= mu__ub335; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
};
};
{
int mu__ub336 = 1;
for (int mu_id = 0; mu_id <= mu__ub336; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__BackInv;
}
};
};
}
}
}
}
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_avail_way].mu_CV_format = mu_true;
mu_self.mu_sf[mu_avail_way].mu_valid = mu_true;
mu_self.mu_sf[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_avail_way].mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_avail_way].mu_owner_protocol = mu_Protocol__UPI;
}
else
{
mu_self.mu_sf[mu_avail_way].mu_owner_protocol = mu_Protocol__IDIC;
}
}
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_sf_way].mu_CV_format = mu_true;
mu_self.mu_sf[mu_sf_way].mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_owner_protocol = mu_Protocol__UPI;
}
else
{
mu_self.mu_sf[mu_sf_way].mu_owner_protocol = mu_Protocol__IDIC;
}
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (0) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub337 = 1;
for (int mu_id = 0; mu_id <= mu__ub337; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] = mu_false;
}
};
};
{
int mu__ub338 = 1;
for (int mu_id = 0; mu_id <= mu__ub338; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] = mu_false;
}
};
};
}
}
}
else
{
bool mu__boolexpr339;
  if (!((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_self.mu_tractor[mu_htid].mu_protocol))) mu__boolexpr339 = FALSE ;
  else {
  mu__boolexpr339 = ((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id)) ; 
}
if ( mu__boolexpr339 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
bool mu__boolexpr340;
  if (!((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC))) mu__boolexpr340 = FALSE ;
  else {
  mu__boolexpr340 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
if ( mu__boolexpr340 )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
bool mu__boolexpr341;
  if (!((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI))) mu__boolexpr341 = FALSE ;
  else {
  mu__boolexpr341 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr341 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  HBo__detect_CA_type(self, self.tractor[htid].agent_id, self.tractor[htid].protocol)");
}
}
}
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr342;
  if (!(mu_self.mu_monitor[mu_id].mu_valid)) mu__boolexpr342 = FALSE ;
  else {
  mu__boolexpr342 = ((mu_self.mu_monitor[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr342 )
{
mu_self.mu_tractor[mu_htid].mu_limit_S = mu_true;
}
};
};
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Get_E) )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr343;
bool mu__boolexpr344;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr344 = FALSE ;
  else {
  mu__boolexpr344 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr344)) mu__boolexpr343 = FALSE ;
  else {
  mu__boolexpr343 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr343 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
else
{
bool mu__boolexpr345;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr345 = FALSE ;
  else {
  mu__boolexpr345 = (mu_self.mu_tractor[mu_htid].mu_selfsnp) ; 
}
if ( mu__boolexpr345 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr346;
bool mu__boolexpr347;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr347 = FALSE ;
  else {
  mu__boolexpr347 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr347)) mu__boolexpr346 = FALSE ;
  else {
  mu__boolexpr346 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr346 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
else
{
bool mu__boolexpr348;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr348 = FALSE ;
  else {
  mu__boolexpr348 = (mu_self.mu_tractor[mu_htid].mu_selfsnp) ; 
}
if ( mu__boolexpr348 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (0) )
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr349;
  if (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id])) mu__boolexpr349 = FALSE ;
  else {
bool mu__boolexpr350;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_id))) mu__boolexpr350 = TRUE ;
  else {
  mu__boolexpr350 = ((mu_self.mu_tractor[mu_htid].mu_protocol) != (mu_Protocol__UPI)) ; 
}
  mu__boolexpr349 = (mu__boolexpr350) ; 
}
if ( mu__boolexpr349 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr351;
bool mu__boolexpr352;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr352 = FALSE ;
  else {
  mu__boolexpr352 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr352)) mu__boolexpr351 = FALSE ;
  else {
  mu__boolexpr351 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr351 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr353;
  if (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id])) mu__boolexpr353 = FALSE ;
  else {
bool mu__boolexpr354;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_id))) mu__boolexpr354 = TRUE ;
  else {
  mu__boolexpr354 = ((mu_self.mu_tractor[mu_htid].mu_protocol) != (mu_Protocol__IDIC)) ; 
}
  mu__boolexpr353 = (mu__boolexpr354) ; 
}
if ( mu__boolexpr353 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
};
};
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
bool mu__boolexpr355;
bool mu__boolexpr356;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr356 = FALSE ;
  else {
  mu__boolexpr356 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr356)) mu__boolexpr355 = FALSE ;
  else {
  mu__boolexpr355 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr355 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr357;
bool mu__boolexpr358;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr358 = FALSE ;
  else {
  mu__boolexpr358 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr358)) mu__boolexpr357 = FALSE ;
  else {
  mu__boolexpr357 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr357 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_avail_way].mu_CV_format = mu_false;
mu_self.mu_sf[mu_avail_way].mu_valid = mu_true;
mu_self.mu_sf[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_avail_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
mu_self.mu_sf[mu_avail_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr359;
bool mu__boolexpr360;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr360 = FALSE ;
  else {
  mu__boolexpr360 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr360)) mu__boolexpr359 = FALSE ;
  else {
  mu__boolexpr359 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr359 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_sf_way].mu_CV_format = mu_false;
mu_self.mu_sf[mu_sf_way].mu_valid = mu_true;
mu_self.mu_sf[mu_sf_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
else
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
}
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
bool mu__boolexpr361;
bool mu__boolexpr362;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr362 = FALSE ;
  else {
  mu__boolexpr362 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr362) mu__boolexpr361 = TRUE ;
  else {
bool mu__boolexpr363;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr363 = FALSE ;
  else {
  mu__boolexpr363 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr361 = (mu__boolexpr363) ; 
}
if ( mu__boolexpr361 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub364 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub364; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr365;
bool mu__boolexpr366;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr366 = FALSE ;
  else {
  mu__boolexpr366 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr366)) mu__boolexpr365 = FALSE ;
  else {
  mu__boolexpr365 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr365 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
{
int mu__ub367 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub367; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
};
};
}
else
{
bool mu__boolexpr368;
bool mu__boolexpr369;
bool mu__boolexpr370;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr370 = FALSE ;
  else {
  mu__boolexpr370 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr370) mu__boolexpr369 = TRUE ;
  else {
bool mu__boolexpr371;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr371 = FALSE ;
  else {
  mu__boolexpr371 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr369 = (mu__boolexpr371) ; 
}
  if (!(mu__boolexpr369)) mu__boolexpr368 = FALSE ;
  else {
  mu__boolexpr368 = (mu_self.mu_tractor[mu_htid].mu_selfsnp) ; 
}
if ( mu__boolexpr368 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
bool mu__boolexpr372;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr372 = FALSE ;
  else {
  mu__boolexpr372 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr372 )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_IDI_Opcode__SnpInv;
}
}
else
{
bool mu__boolexpr373;
bool mu__boolexpr374;
bool mu__boolexpr375;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr375 = FALSE ;
  else {
  mu__boolexpr375 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr375) mu__boolexpr374 = TRUE ;
  else {
bool mu__boolexpr376;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr376 = FALSE ;
  else {
  mu__boolexpr376 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr374 = (mu__boolexpr376) ; 
}
  if (!(mu__boolexpr374)) mu__boolexpr373 = FALSE ;
  else {
  mu__boolexpr373 = (!(mu_self.mu_tractor[mu_htid].mu_selfsnp)) ; 
}
if ( mu__boolexpr373 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: case is not covered in sf lookup phase");
}
}
}
}
else
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
bool mu__boolexpr377;
  if (!((mu_id) == (mu_self.mu_tractor[mu_htid].mu_agent_id))) mu__boolexpr377 = FALSE ;
  else {
  mu__boolexpr377 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( mu__boolexpr377 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr378;
bool mu__boolexpr379;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr379 = FALSE ;
  else {
  mu__boolexpr379 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr379)) mu__boolexpr378 = FALSE ;
  else {
  mu__boolexpr378 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr378 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
bool mu__boolexpr380;
  if (!((mu_id) == (mu_self.mu_tractor[mu_htid].mu_agent_id))) mu__boolexpr380 = FALSE ;
  else {
  mu__boolexpr380 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
if ( mu__boolexpr380 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] = mu_false;
}
}
};
};
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
bool mu__boolexpr381;
bool mu__boolexpr382;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr382 = FALSE ;
  else {
  mu__boolexpr382 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr382)) mu__boolexpr381 = FALSE ;
  else {
  mu__boolexpr381 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr381 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr383;
bool mu__boolexpr384;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr384 = FALSE ;
  else {
  mu__boolexpr384 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr384)) mu__boolexpr383 = FALSE ;
  else {
  mu__boolexpr383 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr383 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_avail_way].mu_CV_format = mu_true;
mu_self.mu_sf[mu_avail_way].mu_valid = mu_true;
mu_self.mu_sf[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_avail_way].mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_avail_way].mu_owner_protocol = mu_Protocol__UPI;
}
else
{
mu_self.mu_sf[mu_avail_way].mu_owner_protocol = mu_Protocol__IDIC;
}
}
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr385;
bool mu__boolexpr386;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr386 = FALSE ;
  else {
  mu__boolexpr386 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr386)) mu__boolexpr385 = FALSE ;
  else {
  mu__boolexpr385 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr385 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
if ( 0 )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_self.mu_sf[mu_sf_way].mu_CV_format = mu_true;
mu_self.mu_sf[mu_sf_way].mu_valid = mu_true;
mu_self.mu_sf[mu_sf_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_sf[mu_sf_way].mu_owner_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_sf[mu_sf_way].mu_owner_protocol = mu_Protocol__UPI;
}
else
{
mu_self.mu_sf[mu_sf_way].mu_owner_protocol = mu_Protocol__IDIC;
}
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (0) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr387;
bool mu__boolexpr388;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr388 = FALSE ;
  else {
  mu__boolexpr388 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr388)) mu__boolexpr387 = FALSE ;
  else {
  mu__boolexpr387 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr387 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
};
};
}
}
}
else
{
bool mu__boolexpr389;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id))) mu__boolexpr389 = FALSE ;
  else {
  mu__boolexpr389 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_self.mu_sf[mu_sf_way].mu_owner_protocol)) ; 
}
if ( mu__boolexpr389 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
bool mu__boolexpr390;
bool mu__boolexpr391;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr391 = FALSE ;
  else {
  mu__boolexpr391 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr391)) mu__boolexpr390 = FALSE ;
  else {
  mu__boolexpr390 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr390 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  HBo__detect_CA_type(self, self.tractor[htid].agent_id, self.tractor[htid].protocol)");
}
}
}
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr392;
  if (!(mu_self.mu_monitor[mu_id].mu_valid)) mu__boolexpr392 = FALSE ;
  else {
  mu__boolexpr392 = ((mu_self.mu_monitor[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr392 )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_monitor[mu_id].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_monitor[mu_id].mu_agent_id] = mu_IDI_Opcode__SnpInv;
}
};
};
}
else
{
bool mu__boolexpr393;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Wr_Inv)) mu__boolexpr393 = TRUE ;
  else {
  mu__boolexpr393 = ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Flush)) ; 
}
if ( mu__boolexpr393 )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr394;
bool mu__boolexpr395;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr395 = FALSE ;
  else {
  mu__boolexpr395 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr395)) mu__boolexpr394 = FALSE ;
  else {
  mu__boolexpr394 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr394 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
}
bool mu__boolexpr396;
bool mu__boolexpr397;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr397 = FALSE ;
  else {
  mu__boolexpr397 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr397)) mu__boolexpr396 = FALSE ;
  else {
  mu__boolexpr396 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr396 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
bool mu__boolexpr398;
bool mu__boolexpr399;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr399 = FALSE ;
  else {
  mu__boolexpr399 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr399)) mu__boolexpr398 = FALSE ;
  else {
  mu__boolexpr398 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr398 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
}
bool mu__boolexpr400;
bool mu__boolexpr401;
  if (!(!(mu_C2C_DISABLED))) mu__boolexpr401 = FALSE ;
  else {
  mu__boolexpr401 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr401)) mu__boolexpr400 = FALSE ;
  else {
  mu__boolexpr400 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr400 )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpInvOwn;
}
else
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (0) )
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr402;
  if (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id])) mu__boolexpr402 = FALSE ;
  else {
bool mu__boolexpr403;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_id))) mu__boolexpr403 = TRUE ;
  else {
  mu__boolexpr403 = ((mu_self.mu_tractor[mu_htid].mu_protocol) != (mu_Protocol__UPI)) ; 
}
  mu__boolexpr402 = (mu__boolexpr403) ; 
}
if ( mu__boolexpr402 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr404;
  if (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id])) mu__boolexpr404 = FALSE ;
  else {
bool mu__boolexpr405;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_id))) mu__boolexpr405 = TRUE ;
  else {
  mu__boolexpr405 = ((mu_self.mu_tractor[mu_htid].mu_protocol) != (mu_Protocol__IDIC)) ; 
}
  mu__boolexpr404 = (mu__boolexpr405) ; 
}
if ( mu__boolexpr404 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
};
};
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
bool mu__boolexpr406;
bool mu__boolexpr407;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr407 = FALSE ;
  else {
  mu__boolexpr407 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr407) mu__boolexpr406 = TRUE ;
  else {
bool mu__boolexpr408;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr408 = FALSE ;
  else {
  mu__boolexpr408 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr406 = (mu__boolexpr408) ; 
}
if ( mu__boolexpr406 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub409 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub409; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] = mu_false;
}
};
};
{
int mu__ub410 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub410; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] = mu_false;
}
};
};
}
else
{
bool mu__boolexpr411;
bool mu__boolexpr412;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr412 = FALSE ;
  else {
  mu__boolexpr412 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr412) mu__boolexpr411 = TRUE ;
  else {
bool mu__boolexpr413;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr413 = FALSE ;
  else {
  mu__boolexpr413 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr411 = (mu__boolexpr413) ; 
}
if ( mu__boolexpr411 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_IDI_Opcode__SnpInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_false;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: case is not covered in sf lookup phase");
}
}
}
else
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
bool mu__boolexpr414;
  if (!((mu_id) == (mu_self.mu_tractor[mu_htid].mu_agent_id))) mu__boolexpr414 = FALSE ;
  else {
  mu__boolexpr414 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
if ( !(mu__boolexpr414) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
}
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
bool mu__boolexpr415;
  if (!((mu_id) == (mu_self.mu_tractor[mu_htid].mu_agent_id))) mu__boolexpr415 = FALSE ;
  else {
  mu__boolexpr415 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
if ( mu__boolexpr415 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
}
}
};
};
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (0) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] = mu_false;
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpInv;
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] = mu_false;
}
};
};
}
}
}
else
{
bool mu__boolexpr416;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id))) mu__boolexpr416 = FALSE ;
  else {
  mu__boolexpr416 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_self.mu_sf[mu_sf_way].mu_owner_protocol)) ; 
}
if ( mu__boolexpr416 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLInv;
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  HBo__detect_CA_type(self, self.tractor[htid].agent_id, self.tractor[htid].protocol)");
}
}
}
bool mu__boolexpr417;
  if ((mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__Wr_Inv)) mu__boolexpr417 = TRUE ;
  else {
  mu__boolexpr417 = (mu_treat_flush_as_wrinv) ; 
}
if ( mu__boolexpr417 )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr418;
  if (!(mu_self.mu_monitor[mu_id].mu_valid)) mu__boolexpr418 = FALSE ;
  else {
  mu__boolexpr418 = ((mu_self.mu_monitor[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr418 )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_monitor[mu_id].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_monitor[mu_id].mu_agent_id] = mu_IDI_Opcode__SnpInv;
}
};
};
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__NoInvSnp_RdCur) )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub419 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub419; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
}
};
};
{
int mu__ub420 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub420; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
};
};
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLCurr;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
bool mu__boolexpr421;
bool mu__boolexpr422;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr422 = FALSE ;
  else {
  mu__boolexpr422 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr422) mu__boolexpr421 = TRUE ;
  else {
bool mu__boolexpr423;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr423 = FALSE ;
  else {
  mu__boolexpr423 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr421 = (mu__boolexpr423) ; 
}
if ( mu__boolexpr421 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub424 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub424; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
}
};
};
{
int mu__ub425 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub425; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
};
};
}
else
{
bool mu__boolexpr426;
bool mu__boolexpr427;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr427 = FALSE ;
  else {
  mu__boolexpr427 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr427) mu__boolexpr426 = TRUE ;
  else {
bool mu__boolexpr428;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr428 = FALSE ;
  else {
  mu__boolexpr428 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr426 = (mu__boolexpr428) ; 
}
if ( mu__boolexpr426 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_IDI_Opcode__SnpCur;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: case is not covered in sf lookup phase");
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLCurr;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub429 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub429; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLCurr;
}
};
};
{
int mu__ub430 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub430; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
};
};
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
bool mu__boolexpr431;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id))) mu__boolexpr431 = FALSE ;
  else {
  mu__boolexpr431 = ((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_self.mu_tractor[mu_htid].mu_protocol)) ; 
}
if ( mu__boolexpr431 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLCurr;
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  HBo__detect_CA_type(self, self.tractor[htid].agent_id, self.tractor[htid].protocol)");
}
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__WB_2I) )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( mu_tag_match )
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
bool mu__boolexpr432;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr432 = FALSE ;
  else {
  mu__boolexpr432 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr432 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_false;
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
else
{
bool mu__boolexpr433;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr433 = FALSE ;
  else {
  mu__boolexpr433 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr433 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_false;
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
}
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) > (1) )
{
bool mu__boolexpr434;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr434 = FALSE ;
  else {
  mu__boolexpr434 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr434 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_false;
}
else
{
bool mu__boolexpr435;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr435 = FALSE ;
  else {
  mu__boolexpr435 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
if ( mu__boolexpr435 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_false;
}
}
mu_all_cv_bits_fts_0 = mu_true;
{
int mu__ub436 = 1;
for (int mu_agent = mu_NUM_SOTUPIAgents; mu_agent <= mu__ub436; mu_agent += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_agent] )
{
mu_all_cv_bits_fts_0 = mu_false;
}
};
};
{
int mu__ub437 = 1;
for (int mu_agent = mu_NUM_SOTIDICAgents; mu_agent <= mu__ub437; mu_agent += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_agent] )
{
mu_all_cv_bits_fts_0 = mu_false;
}
};
};
if ( mu_all_cv_bits_fts_0 )
{
{
for(int mu_agent = 0; mu_agent <= 0; mu_agent++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_agent] )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_agent] = mu_false;
}
};
};
{
for(int mu_agent = 0; mu_agent <= 0; mu_agent++) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_agent] )
{
mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_agent] = mu_false;
}
};
};
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( mu_tag_match )
{
if ( mu_self.mu_sf[mu_sf_way].mu_CV_format )
{
bool mu__boolexpr438;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id))) mu__boolexpr438 = FALSE ;
  else {
  mu__boolexpr438 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_self.mu_sf[mu_sf_way].mu_owner_protocol)) ; 
}
if ( mu__boolexpr438 )
{
mu_self.mu_sf[mu_sf_way].mu_CV_format = mu_false;
mu_self.mu_sf[mu_sf_way].mu_owner_protocol.undefine();
mu_self.mu_sf[mu_sf_way].mu_owner_id.undefine();
mu_SFEntry__release_sfentry ( mu_self.mu_sf[mu_sf_way] );
}
}
}
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__NoInvSnp_CLWB) )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
}
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub439 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub439; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
};
};
{
int mu__ub440 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub440; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
};
};
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpData;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLData;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
bool mu__boolexpr441;
bool mu__boolexpr442;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr442 = FALSE ;
  else {
  mu__boolexpr442 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  if (mu__boolexpr442) mu__boolexpr441 = TRUE ;
  else {
bool mu__boolexpr443;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr443 = FALSE ;
  else {
  mu__boolexpr443 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
  mu__boolexpr441 = (mu__boolexpr443) ; 
}
if ( mu__boolexpr441 )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub444 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub444; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
};
};
{
int mu__ub445 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub445; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
};
};
}
else
{
bool mu__boolexpr446;
bool mu__boolexpr447;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr447 = FALSE ;
  else {
  mu__boolexpr447 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr447) mu__boolexpr446 = TRUE ;
  else {
bool mu__boolexpr448;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr448 = FALSE ;
  else {
  mu__boolexpr448 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr446 = (mu__boolexpr448) ; 
}
if ( mu__boolexpr446 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_IDI_Opcode__BackInv;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: case is not covered in sf lookup phase");
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpData;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLData;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_tag_match) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_UPI_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
};
};
}
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
{
int mu__ub449 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub449; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_id] = mu_UPI_Opcode__SnpLData;
}
};
};
{
int mu__ub450 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub450; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpData;
}
};
};
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
bool mu__boolexpr451;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id))) mu__boolexpr451 = FALSE ;
  else {
  mu__boolexpr451 = ((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_self.mu_tractor[mu_htid].mu_protocol)) ; 
}
if ( mu__boolexpr451 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpInv;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpData;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_UPI_Opcode__SnpLData;
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  HBo__detect_CA_type(self, self.tractor[htid].agent_id, self.tractor[htid].protocol)");
}
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_coh_op) == (mu_Coh_Op__RdCurr_ns) )
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__SOT) )
{
if ( !(mu_tag_match) )
{
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tractor[mu_htid].mu_agent_id) != (mu_id) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
else
{
if ( !((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
}
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
{
int mu__ub452 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub452; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
};
};
mu_upi_is_owner = mu_false;
{
int mu__ub453 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub453; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_upi_is_owner = mu_true;
}
};
};
if ( mu_upi_is_owner )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__FTS) )
{
if ( !(mu_tag_match) )
{
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
mu_upi_is_owner = mu_false;
{
int mu__ub454 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub454; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_upi_is_owner = mu_true;
}
};
};
if ( mu_upi_is_owner )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
bool mu__boolexpr455;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr455 = FALSE ;
  else {
  mu__boolexpr455 = (!(mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id])) ; 
}
if ( mu__boolexpr455 )
{
{
int mu__ub456 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub456; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
};
};
}
else
{
bool mu__boolexpr457;
bool mu__boolexpr458;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr458 = FALSE ;
  else {
  mu__boolexpr458 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  if (mu__boolexpr458) mu__boolexpr457 = TRUE ;
  else {
bool mu__boolexpr459;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr459 = FALSE ;
  else {
  mu__boolexpr459 = (mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_self.mu_tractor[mu_htid].mu_agent_id]) ; 
}
  mu__boolexpr457 = (mu__boolexpr459) ; 
}
if ( mu__boolexpr457 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_IDI_Opcode__SnpCur;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: case is not covered in sf lookup phase");
}
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
}
}
else
{
if ( (mu_HBo__detect_CA_type( mu_self, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol )) == (mu_CA_type__EXC) )
{
if ( !(mu_tag_match) )
{
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( !(mu_self.mu_sf[mu_sf_way].mu_CV_format) )
{
if ( mu_SFEntry__all_cv_bits_0( mu_self.mu_sf[mu_sf_way] ) )
{
if ( mu_IDIC_SOT_VALID )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
};
};
}
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
else
{
if ( (mu_SFEntry__count_cv_bits_1( mu_self.mu_sf[mu_sf_way] )) == (1) )
{
{
int mu__ub460 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub460; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_idic[mu_id] )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_id] = mu_IDI_Opcode__SnpCur;
}
};
};
mu_upi_is_owner = mu_false;
{
int mu__ub461 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub461; mu_id += 1) {
if ( mu_self.mu_sf[mu_sf_way].mu_CV_bits_upi[mu_id] )
{
mu_upi_is_owner = mu_true;
}
};
};
if ( mu_upi_is_owner )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
else
{
bool mu__boolexpr462;
  if (!((mu_self.mu_tractor[mu_htid].mu_agent_id) == (mu_self.mu_sf[mu_sf_way].mu_owner_id))) mu__boolexpr462 = FALSE ;
  else {
  mu__boolexpr462 = ((mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_self.mu_tractor[mu_htid].mu_protocol)) ; 
}
if ( mu__boolexpr462 )
{
if ( mu_self.mu_tractor[mu_htid].mu_selfsnp )
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__IDIC) )
{
mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_true;
mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_self.mu_sf[mu_sf_way].mu_owner_id] = mu_IDI_Opcode__SnpCur;
mu_self.mu_tractor[mu_htid].mu_snpneeded = mu_true;
}
else
{
if ( (mu_self.mu_sf[mu_sf_way].mu_owner_protocol) == (mu_Protocol__UPI) )
{
mu_self.mu_tractor[mu_htid].mu_sf_update_done = mu_true;
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  HBo__detect_CA_type(self, self.tractor[htid].agent_id, self.tractor[htid].protocol)");
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  SF lookup is not implemented yet for  self.tractor[htid].coh_op");
}
}
}
}
}
}
}
}
mu_self.mu_tractor[mu_htid].mu_sf_lookup_done = mu_true;
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__recv_idi_packet(mu_1_HBo& mu_self, mu_1_AgentPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_pkt("pkt",0);

mu_pkt = mu_packet.mu_packet;
bool mu__boolexpr463;
bool mu__boolexpr464;
bool mu__boolexpr465;
bool mu__boolexpr466;
bool mu__boolexpr467;
bool mu__boolexpr468;
bool mu__boolexpr469;
bool mu__boolexpr470;
bool mu__boolexpr471;
bool mu__boolexpr472;
bool mu__boolexpr473;
bool mu__boolexpr474;
bool mu__boolexpr475;
bool mu__boolexpr476;
bool mu__boolexpr477;
bool mu__boolexpr478;
bool mu__boolexpr479;
bool mu__boolexpr480;
bool mu__boolexpr481;
bool mu__boolexpr482;
bool mu__boolexpr483;
bool mu__boolexpr484;
  if ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr484 = TRUE ;
  else {
  mu__boolexpr484 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr484) mu__boolexpr483 = TRUE ;
  else {
  mu__boolexpr483 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr483) mu__boolexpr482 = TRUE ;
  else {
  mu__boolexpr482 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr482) mu__boolexpr481 = TRUE ;
  else {
  mu__boolexpr481 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr481) mu__boolexpr480 = TRUE ;
  else {
  mu__boolexpr480 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__ItoMWr)) ; 
}
  if (mu__boolexpr480) mu__boolexpr479 = TRUE ;
  else {
  mu__boolexpr479 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr479) mu__boolexpr478 = TRUE ;
  else {
  mu__boolexpr478 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr478) mu__boolexpr477 = TRUE ;
  else {
  mu__boolexpr477 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr477) mu__boolexpr476 = TRUE ;
  else {
  mu__boolexpr476 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr476) mu__boolexpr475 = TRUE ;
  else {
  mu__boolexpr475 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr475) mu__boolexpr474 = TRUE ;
  else {
  mu__boolexpr474 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr474) mu__boolexpr473 = TRUE ;
  else {
  mu__boolexpr473 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr473) mu__boolexpr472 = TRUE ;
  else {
  mu__boolexpr472 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr472) mu__boolexpr471 = TRUE ;
  else {
  mu__boolexpr471 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr471) mu__boolexpr470 = TRUE ;
  else {
  mu__boolexpr470 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr470) mu__boolexpr469 = TRUE ;
  else {
  mu__boolexpr469 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr469) mu__boolexpr468 = TRUE ;
  else {
  mu__boolexpr468 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr468) mu__boolexpr467 = TRUE ;
  else {
  mu__boolexpr467 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr467) mu__boolexpr466 = TRUE ;
  else {
  mu__boolexpr466 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (mu__boolexpr466) mu__boolexpr465 = TRUE ;
  else {
  mu__boolexpr465 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr465) mu__boolexpr464 = TRUE ;
  else {
  mu__boolexpr464 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__ClrMonitor)) ; 
}
  if (mu__boolexpr464) mu__boolexpr463 = TRUE ;
  else {
  mu__boolexpr463 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
if ( mu__boolexpr463 )
{
mu_HBo__recv_A2FReq ( mu_self, mu_packet.mu_network_id, mu_pkt );
}
else
{
if ( (mu_pkt.mu_opcode) == (mu_IDI_Opcode__GOAck) )
{
mu_HBo__recv_ack_response ( mu_self, mu_pkt );
}
else
{
bool mu__boolexpr485;
bool mu__boolexpr486;
bool mu__boolexpr487;
bool mu__boolexpr488;
bool mu__boolexpr489;
bool mu__boolexpr490;
bool mu__boolexpr491;
  if ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RspIHitI)) mu__boolexpr491 = TRUE ;
  else {
  mu__boolexpr491 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RspSHitSE)) ; 
}
  if (mu__boolexpr491) mu__boolexpr490 = TRUE ;
  else {
  mu__boolexpr490 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RspIHitSE)) ; 
}
  if (mu__boolexpr490) mu__boolexpr489 = TRUE ;
  else {
  mu__boolexpr489 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RspVHitV)) ; 
}
  if (mu__boolexpr489) mu__boolexpr488 = TRUE ;
  else {
  mu__boolexpr488 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RspIFwdM)) ; 
}
  if (mu__boolexpr488) mu__boolexpr487 = TRUE ;
  else {
  mu__boolexpr487 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
  if (mu__boolexpr487) mu__boolexpr486 = TRUE ;
  else {
  mu__boolexpr486 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__RspVFwdV)) ; 
}
  if (mu__boolexpr486) mu__boolexpr485 = TRUE ;
  else {
  mu__boolexpr485 = ((mu_pkt.mu_opcode) == (mu_IDI_Opcode__GOAck)) ; 
}
if ( mu__boolexpr485 )
{
mu_HBo__recv_idic_snoop_response ( mu_self, mu_pkt );
}
else
{
if ( (mu_pkt.mu_opcode) == (mu_IDI_Opcode__Data) )
{
mu_HBo__recv_A2FData ( mu_self, mu_pkt );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  opcode  pkt.opcode  is not expected in hbo from idiagent");
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__recv_upi_packet(mu_1_HBo& mu_self, mu_1_UPIPacket& mu_packet)
{
bool mu__boolexpr492;
bool mu__boolexpr493;
bool mu__boolexpr494;
bool mu__boolexpr495;
bool mu__boolexpr496;
bool mu__boolexpr497;
bool mu__boolexpr498;
bool mu__boolexpr499;
bool mu__boolexpr500;
bool mu__boolexpr501;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspI)) mu__boolexpr501 = TRUE ;
  else {
  mu__boolexpr501 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspIWb)) ; 
}
  if (mu__boolexpr501) mu__boolexpr500 = TRUE ;
  else {
  mu__boolexpr500 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspS)) ; 
}
  if (mu__boolexpr500) mu__boolexpr499 = TRUE ;
  else {
  mu__boolexpr499 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspSWb)) ; 
}
  if (mu__boolexpr499) mu__boolexpr498 = TRUE ;
  else {
  mu__boolexpr498 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspCurData)) ; 
}
  if (mu__boolexpr498) mu__boolexpr497 = TRUE ;
  else {
  mu__boolexpr497 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspE)) ; 
}
  if (mu__boolexpr497) mu__boolexpr496 = TRUE ;
  else {
  mu__boolexpr496 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdID)) ; 
}
  if (mu__boolexpr496) mu__boolexpr495 = TRUE ;
  else {
  mu__boolexpr495 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIWb)) ; 
}
  if (mu__boolexpr495) mu__boolexpr494 = TRUE ;
  else {
  mu__boolexpr494 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIC)) ; 
}
  if (mu__boolexpr494) mu__boolexpr493 = TRUE ;
  else {
  mu__boolexpr493 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdSWb)) ; 
}
  if (mu__boolexpr493) mu__boolexpr492 = TRUE ;
  else {
  mu__boolexpr492 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdS)) ; 
}
if ( mu__boolexpr492 )
{
mu_HBo__recv_CAResp ( mu_self, mu_packet );
}
else
{
bool mu__boolexpr502;
bool mu__boolexpr503;
bool mu__boolexpr504;
bool mu__boolexpr505;
bool mu__boolexpr506;
bool mu__boolexpr507;
bool mu__boolexpr508;
bool mu__boolexpr509;
bool mu__boolexpr510;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr510 = TRUE ;
  else {
  mu__boolexpr510 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr510) mu__boolexpr509 = TRUE ;
  else {
  mu__boolexpr509 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr509) mu__boolexpr508 = TRUE ;
  else {
  mu__boolexpr508 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr508) mu__boolexpr507 = TRUE ;
  else {
  mu__boolexpr507 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr507) mu__boolexpr506 = TRUE ;
  else {
  mu__boolexpr506 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr506) mu__boolexpr505 = TRUE ;
  else {
  mu__boolexpr505 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr505) mu__boolexpr504 = TRUE ;
  else {
  mu__boolexpr504 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr504) mu__boolexpr503 = TRUE ;
  else {
  mu__boolexpr503 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (mu__boolexpr503) mu__boolexpr502 = TRUE ;
  else {
bool mu__boolexpr511;
bool mu__boolexpr512;
bool mu__boolexpr513;
bool mu__boolexpr514;
bool mu__boolexpr515;
bool mu__boolexpr516;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr516 = TRUE ;
  else {
  mu__boolexpr516 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr516) mu__boolexpr515 = TRUE ;
  else {
  mu__boolexpr515 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr515) mu__boolexpr514 = TRUE ;
  else {
  mu__boolexpr514 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr514) mu__boolexpr513 = TRUE ;
  else {
  mu__boolexpr513 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr513) mu__boolexpr512 = TRUE ;
  else {
  mu__boolexpr512 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr512) mu__boolexpr511 = TRUE ;
  else {
  mu__boolexpr511 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  mu__boolexpr502 = (mu__boolexpr511) ; 
}
if ( mu__boolexpr502 )
{
mu_HBo__recv_CAReq ( mu_self, mu_packet );
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt) )
{
mu_HBo__recv_CAReq ( mu_self, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  opcode  packet.opcode  is not expected in hbo from upiagent");
}
}
}
};
/*** end procedure declaration ***/

void mu_CA_SnoopEntry__load(mu_1_CA_SnoopEntry& mu_self, mu_1_UPIPacket& mu_packet)
{
mu_self.mu_opcode = mu_packet.mu_opcode;
mu_self.mu_htid = mu_packet.mu_htid;
mu_self.mu_state = mu_SRB_STATE__Ready;
bool mu__boolexpr517;
bool mu__boolexpr518;
bool mu__boolexpr519;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpInvOwn)) mu__boolexpr519 = TRUE ;
  else {
  mu__boolexpr519 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpCode)) ; 
}
  if (mu__boolexpr519) mu__boolexpr518 = TRUE ;
  else {
  mu__boolexpr518 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpDataMig)) ; 
}
  if (mu__boolexpr518) mu__boolexpr517 = TRUE ;
  else {
  mu__boolexpr517 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpData)) ; 
}
if ( mu__boolexpr517 )
{
mu_self.mu_rtid = mu_packet.mu_rtid;
mu_self.mu_crnid = mu_packet.mu_crnid;
}
};
/*** end procedure declaration ***/

void mu_CA__recv_snoop_from_hbo(mu_1_CA& mu_self, mu_1_UPIPacket& mu_packet)
{
if ( !((mu_self.mu_snoopq[mu_packet.mu_address].mu_state) == (mu_SRB_STATE__Idle)) ) Error.Error("Assertion failed:  Already there is a snoop pending for address  packet.address");
mu_CA_SnoopEntry__load ( mu_self.mu_snoopq[mu_packet.mu_address], mu_packet );
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tor[mu_id].mu_state) != (mu_RTID_STATE__Idle) )
{
bool mu__boolexpr520;
bool mu__boolexpr521;
bool mu__boolexpr522;
bool mu__boolexpr523;
bool mu__boolexpr524;
bool mu__boolexpr525;
bool mu__boolexpr526;
  if ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr526 = TRUE ;
  else {
  mu__boolexpr526 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr526) mu__boolexpr525 = TRUE ;
  else {
  mu__boolexpr525 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr525) mu__boolexpr524 = TRUE ;
  else {
  mu__boolexpr524 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr524) mu__boolexpr523 = TRUE ;
  else {
  mu__boolexpr523 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr523) mu__boolexpr522 = TRUE ;
  else {
  mu__boolexpr522 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr522) mu__boolexpr521 = TRUE ;
  else {
  mu__boolexpr521 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr521) mu__boolexpr520 = TRUE ;
  else {
  mu__boolexpr520 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
if ( mu__boolexpr520 )
{
mu_self.mu_tor[mu_id].mu_conflict = mu_true;
}
}
};
};
};
/*** end procedure declaration ***/

void mu_TOREntry__release(mu_1_TOREntry& mu_self)
{
mu_self.mu_opcode.undefine();
mu_self.mu_address.undefine();
mu_self.mu_state = mu_RTID_STATE__Idle;
mu_self.mu_torid.undefine();
mu_self.mu_conflict = mu_false;
mu_self.mu_stale = mu_false;
};
/*** end procedure declaration ***/

void mu_CA__recv_response_from_hbo(mu_1_CA& mu_self, mu_1_UPIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_0_boolean mu_one_match("one_match",0);

if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__SI_CmpO) )
{
bool mu__boolexpr527;
bool mu__boolexpr528;
bool mu__boolexpr529;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr529 = TRUE ;
  else {
  mu__boolexpr529 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr529) mu__boolexpr528 = TRUE ;
  else {
  mu__boolexpr528 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr528) mu__boolexpr527 = TRUE ;
  else {
  mu__boolexpr527 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
if ( mu__boolexpr527 )
{
bool mu__boolexpr530;
  if (!(!((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCur)))) mu__boolexpr530 = FALSE ;
  else {
  mu__boolexpr530 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ; 
}
if ( mu__boolexpr530 )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__S;
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) != (mu_RTID_STATE__RcvdData) )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_false;
};
};
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdCmp;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdData) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__InvXtoI) )
{
if ( !((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode  when cs is  self.cache[self.tor[packet.rtid].address].state");
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_SI) )
{
bool mu__boolexpr531;
bool mu__boolexpr532;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr532 = TRUE ;
  else {
  mu__boolexpr532 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr532) mu__boolexpr531 = TRUE ;
  else {
  mu__boolexpr531 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
if ( mu__boolexpr531 )
{
bool mu__boolexpr533;
bool mu__boolexpr534;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M)) mu__boolexpr534 = TRUE ;
  else {
  mu__boolexpr534 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr534)) mu__boolexpr533 = FALSE ;
  else {
  mu__boolexpr533 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr533 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
else
{
bool mu__boolexpr535;
  if (!((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S))) mu__boolexpr535 = FALSE ;
  else {
  mu__boolexpr535 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr535 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
else
{
bool mu__boolexpr536;
  if (!((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I))) mu__boolexpr536 = FALSE ;
  else {
  mu__boolexpr536 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr536 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__S;
}
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCur) )
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__E_CmpO) )
{
bool mu__boolexpr537;
bool mu__boolexpr538;
bool mu__boolexpr539;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdData)) mu__boolexpr539 = TRUE ;
  else {
  mu__boolexpr539 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr539) mu__boolexpr538 = TRUE ;
  else {
  mu__boolexpr538 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr538) mu__boolexpr537 = TRUE ;
  else {
  mu__boolexpr537 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
if ( mu__boolexpr537 )
{
bool mu__boolexpr540;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) mu__boolexpr540 = TRUE ;
  else {
  mu__boolexpr540 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S)) ; 
}
if ( mu__boolexpr540 )
{
bool mu__boolexpr541;
  if (!((mu_self.mu_tor[mu_packet.mu_rtid].mu_state) != (mu_RTID_STATE__RcvdData))) mu__boolexpr541 = FALSE ;
  else {
  mu__boolexpr541 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ; 
}
if ( mu__boolexpr541 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_false;
};
};
}
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__E;
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdCmp;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdData) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
bool mu__boolexpr542;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__InvItoE)) mu__boolexpr542 = TRUE ;
  else {
  mu__boolexpr542 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
if ( mu__boolexpr542 )
{
if ( (mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__E;
}
else
{
if ( (mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__E;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_false;
};
};
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_E) )
{
bool mu__boolexpr543;
bool mu__boolexpr544;
bool mu__boolexpr545;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdData)) mu__boolexpr545 = TRUE ;
  else {
  mu__boolexpr545 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr545) mu__boolexpr544 = TRUE ;
  else {
  mu__boolexpr544 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr544) mu__boolexpr543 = TRUE ;
  else {
  mu__boolexpr543 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
if ( mu__boolexpr543 )
{
bool mu__boolexpr546;
bool mu__boolexpr547;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M)) mu__boolexpr547 = TRUE ;
  else {
  mu__boolexpr547 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr547)) mu__boolexpr546 = FALSE ;
  else {
  mu__boolexpr546 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr546 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
else
{
bool mu__boolexpr548;
bool mu__boolexpr549;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr549 = TRUE ;
  else {
  mu__boolexpr549 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ; 
}
  if (!(mu__boolexpr549)) mu__boolexpr548 = FALSE ;
  else {
  mu__boolexpr548 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr548 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__E;
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__FwdCnfltO) )
{
mu_one_match = mu_false;
{
for(int mu_address = 0; mu_address <= 0; mu_address++) {
bool mu__boolexpr550;
  if (!((mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__ReqSent))) mu__boolexpr550 = FALSE ;
  else {
  mu__boolexpr550 = ((mu_self.mu_snoopq[mu_address].mu_fwdtid) == (mu_packet.mu_rtid)) ; 
}
if ( mu__boolexpr550 )
{
mu_self.mu_snoopq[mu_address].mu_state = mu_SRB_STATE__Resolved;
mu_self.mu_rtid_usedby_snp[mu_packet.mu_rtid] = mu_false;
mu_self.mu_snoopq[mu_address].mu_fwdtid.undefine();
mu_one_match = mu_true;
}
};
};
if ( !(mu_one_match) ) Error.Error("Assertion failed:  unrecognized resp recvd  packet.rtid");
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__M_CmpO) )
{
bool mu__boolexpr551;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) mu__boolexpr551 = TRUE ;
  else {
  mu__boolexpr551 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr551 )
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdCmp;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdData) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_M) )
{
bool mu__boolexpr552;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) mu__boolexpr552 = TRUE ;
  else {
  mu__boolexpr552 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr552 )
{
bool mu__boolexpr553;
  if (!((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I))) mu__boolexpr553 = FALSE ;
  else {
  mu__boolexpr553 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr553 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__M;
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__CmpU) )
{
bool mu__boolexpr554;
bool mu__boolexpr555;
bool mu__boolexpr556;
bool mu__boolexpr557;
bool mu__boolexpr558;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr558 = TRUE ;
  else {
  mu__boolexpr558 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr558) mu__boolexpr557 = TRUE ;
  else {
  mu__boolexpr557 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr557) mu__boolexpr556 = TRUE ;
  else {
  mu__boolexpr556 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr556) mu__boolexpr555 = TRUE ;
  else {
  mu__boolexpr555 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr555) mu__boolexpr554 = TRUE ;
  else {
  mu__boolexpr554 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
if ( mu__boolexpr554 )
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Unexpected response  packet.opode  recvd");
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_CA__recv_packet_from_hbo(mu_1_CA& mu_self, mu_1_UPIPacket& mu_packet)
{
bool mu__boolexpr559;
bool mu__boolexpr560;
bool mu__boolexpr561;
bool mu__boolexpr562;
bool mu__boolexpr563;
bool mu__boolexpr564;
bool mu__boolexpr565;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLCode)) mu__boolexpr565 = TRUE ;
  else {
  mu__boolexpr565 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLData)) ; 
}
  if (mu__boolexpr565) mu__boolexpr564 = TRUE ;
  else {
  mu__boolexpr564 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLInv)) ; 
}
  if (mu__boolexpr564) mu__boolexpr563 = TRUE ;
  else {
  mu__boolexpr563 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLCurr)) ; 
}
  if (mu__boolexpr563) mu__boolexpr562 = TRUE ;
  else {
  mu__boolexpr562 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpInvOwn)) ; 
}
  if (mu__boolexpr562) mu__boolexpr561 = TRUE ;
  else {
  mu__boolexpr561 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpCode)) ; 
}
  if (mu__boolexpr561) mu__boolexpr560 = TRUE ;
  else {
  mu__boolexpr560 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpDataMig)) ; 
}
  if (mu__boolexpr560) mu__boolexpr559 = TRUE ;
  else {
  mu__boolexpr559 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpData)) ; 
}
if ( mu__boolexpr559 )
{
mu_CA__recv_snoop_from_hbo ( mu_self, mu_packet );
}
else
{
bool mu__boolexpr566;
bool mu__boolexpr567;
bool mu__boolexpr568;
bool mu__boolexpr569;
bool mu__boolexpr570;
bool mu__boolexpr571;
bool mu__boolexpr572;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SI_CmpO)) mu__boolexpr572 = TRUE ;
  else {
  mu__boolexpr572 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_SI)) ; 
}
  if (mu__boolexpr572) mu__boolexpr571 = TRUE ;
  else {
  mu__boolexpr571 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__E_CmpO)) ; 
}
  if (mu__boolexpr571) mu__boolexpr570 = TRUE ;
  else {
  mu__boolexpr570 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_E)) ; 
}
  if (mu__boolexpr570) mu__boolexpr569 = TRUE ;
  else {
  mu__boolexpr569 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__FwdCnfltO)) ; 
}
  if (mu__boolexpr569) mu__boolexpr568 = TRUE ;
  else {
  mu__boolexpr568 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_M)) ; 
}
  if (mu__boolexpr568) mu__boolexpr567 = TRUE ;
  else {
  mu__boolexpr567 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__M_CmpO)) ; 
}
  if (mu__boolexpr567) mu__boolexpr566 = TRUE ;
  else {
  mu__boolexpr566 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__CmpU)) ; 
}
if ( mu__boolexpr566 )
{
mu_CA__recv_response_from_hbo ( mu_self, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Don't know what to do with the packet  packet.opcode");
}
}
};
/*** end procedure declaration ***/

void mu_CA__recv_data_from_santa(mu_1_CA& mu_self, mu_1_IDIPacket& mu_packet)
{
bool mu__boolexpr573;
bool mu__boolexpr574;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr574 = TRUE ;
  else {
  mu__boolexpr574 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr574) mu__boolexpr573 = TRUE ;
  else {
  mu__boolexpr573 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
if ( mu__boolexpr573 )
{
bool mu__boolexpr575;
bool mu__boolexpr576;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M)) mu__boolexpr576 = TRUE ;
  else {
  mu__boolexpr576 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr576)) mu__boolexpr575 = FALSE ;
  else {
  mu__boolexpr575 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr575 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
else
{
bool mu__boolexpr577;
  if (!((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I))) mu__boolexpr577 = FALSE ;
  else {
  mu__boolexpr577 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr577 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__S;
}
else
{
bool mu__boolexpr578;
  if (!((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S))) mu__boolexpr578 = FALSE ;
  else {
  mu__boolexpr578 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr578 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
}
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCur) )
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
bool mu__boolexpr579;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) mu__boolexpr579 = TRUE ;
  else {
  mu__boolexpr579 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
if ( mu__boolexpr579 )
{
bool mu__boolexpr580;
bool mu__boolexpr581;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M)) mu__boolexpr581 = TRUE ;
  else {
  mu__boolexpr581 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr581)) mu__boolexpr580 = FALSE ;
  else {
  mu__boolexpr580 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr580 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
else
{
bool mu__boolexpr582;
bool mu__boolexpr583;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr583 = TRUE ;
  else {
  mu__boolexpr583 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ; 
}
  if (!(mu__boolexpr583)) mu__boolexpr582 = FALSE ;
  else {
  mu__boolexpr582 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr582 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__E;
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Unexpected response  packet.opode  recvd");
}
}
}
};
/*** end procedure declaration ***/

void mu_CA__recv_packet_from_santa(mu_1_CA& mu_self, mu_1_IDIPacket& mu_packet)
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__Data) )
{
mu_CA__recv_data_from_santa ( mu_self, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Don't know what to do with the packet  packet.opcode");
}
};
/*** end procedure declaration ***/

void mu_CA__recv_packet_from_peer_ca(mu_1_CA& mu_self, mu_1_UPIPacket& mu_packet)
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_E) )
{
bool mu__boolexpr584;
bool mu__boolexpr585;
bool mu__boolexpr586;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdData)) mu__boolexpr586 = TRUE ;
  else {
  mu__boolexpr586 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr586) mu__boolexpr585 = TRUE ;
  else {
  mu__boolexpr585 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr585) mu__boolexpr584 = TRUE ;
  else {
  mu__boolexpr584 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
if ( mu__boolexpr584 )
{
bool mu__boolexpr587;
bool mu__boolexpr588;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M)) mu__boolexpr588 = TRUE ;
  else {
  mu__boolexpr588 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr588)) mu__boolexpr587 = FALSE ;
  else {
  mu__boolexpr587 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr587 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
else
{
bool mu__boolexpr589;
bool mu__boolexpr590;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr590 = TRUE ;
  else {
  mu__boolexpr590 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ; 
}
  if (!(mu__boolexpr590)) mu__boolexpr589 = FALSE ;
  else {
  mu__boolexpr589 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr589 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__E;
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_M) )
{
bool mu__boolexpr591;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) mu__boolexpr591 = TRUE ;
  else {
  mu__boolexpr591 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
if ( mu__boolexpr591 )
{
bool mu__boolexpr592;
  if (!((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I))) mu__boolexpr592 = FALSE ;
  else {
  mu__boolexpr592 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr592 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__M;
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
else
{
if ( (mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_SI) )
{
bool mu__boolexpr593;
bool mu__boolexpr594;
  if ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr594 = TRUE ;
  else {
  mu__boolexpr594 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr594) mu__boolexpr593 = TRUE ;
  else {
  mu__boolexpr593 = ((mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
if ( mu__boolexpr593 )
{
bool mu__boolexpr595;
bool mu__boolexpr596;
  if ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M)) mu__boolexpr596 = TRUE ;
  else {
  mu__boolexpr596 = ((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr596)) mu__boolexpr595 = FALSE ;
  else {
  mu__boolexpr595 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr595 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
else
{
bool mu__boolexpr597;
  if (!((mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I))) mu__boolexpr597 = FALSE ;
  else {
  mu__boolexpr597 = (!(mu_self.mu_tor[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr597 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
};
};
mu_self.mu_cache[mu_self.mu_tor[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__S;
}
}
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_opcode) == (mu_UPI_Opcode__RdCur) )
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__SentReq) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__RcvdData;
}
else
{
if ( (mu_self.mu_tor[mu_packet.mu_rtid].mu_state) == (mu_RTID_STATE__RcvdCmp) )
{
mu_self.mu_tor[mu_packet.mu_rtid].mu_state = mu_RTID_STATE__Idle;
mu_TOREntry__release ( mu_self.mu_tor[mu_packet.mu_rtid] );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  unrecognized resp recvd in state  self.tor[packet.rtid].state");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added for other response  packet.opcode  for  self.tor[packet.rtid].opcode");
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Unexpected response  packet.opcode  recvd");
}
}
}
};
/*** end procedure declaration ***/

void mu_UChannel__1__push(mu_1_UChannel__1& mu_self, mu_1_UPIPacket& mu_pkt)
{
mu_Guard ( (mu_self.mu_count) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_pkts[mu_self.mu_count] = mu_pkt;
mu_self.mu_count = (mu_self.mu_count) + (1);
}
};
/*** end procedure declaration ***/

void mu_ULink__recv_ca_packet(mu_1_ULink& mu_self, mu_1_UPIPacket& mu_packet)
{
bool mu__boolexpr598;
bool mu__boolexpr599;
bool mu__boolexpr600;
bool mu__boolexpr601;
bool mu__boolexpr602;
bool mu__boolexpr603;
bool mu__boolexpr604;
bool mu__boolexpr605;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr605 = TRUE ;
  else {
  mu__boolexpr605 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr605) mu__boolexpr604 = TRUE ;
  else {
  mu__boolexpr604 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr604) mu__boolexpr603 = TRUE ;
  else {
  mu__boolexpr603 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr603) mu__boolexpr602 = TRUE ;
  else {
  mu__boolexpr602 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr602) mu__boolexpr601 = TRUE ;
  else {
  mu__boolexpr601 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr601) mu__boolexpr600 = TRUE ;
  else {
  mu__boolexpr600 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr600) mu__boolexpr599 = TRUE ;
  else {
  mu__boolexpr599 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr599) mu__boolexpr598 = TRUE ;
  else {
  mu__boolexpr598 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
if ( mu__boolexpr598 )
{
mu_UChannel__1__push ( mu_self.mu_CAReq, mu_packet );
}
else
{
bool mu__boolexpr606;
bool mu__boolexpr607;
bool mu__boolexpr608;
bool mu__boolexpr609;
bool mu__boolexpr610;
bool mu__boolexpr611;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr611 = TRUE ;
  else {
  mu__boolexpr611 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr611) mu__boolexpr610 = TRUE ;
  else {
  mu__boolexpr610 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr610) mu__boolexpr609 = TRUE ;
  else {
  mu__boolexpr609 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr609) mu__boolexpr608 = TRUE ;
  else {
  mu__boolexpr608 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr608) mu__boolexpr607 = TRUE ;
  else {
  mu__boolexpr607 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr607) mu__boolexpr606 = TRUE ;
  else {
  mu__boolexpr606 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
if ( mu__boolexpr606 )
{
mu_UChannel__1__push ( mu_self.mu_CAWb, mu_packet );
}
else
{
bool mu__boolexpr612;
bool mu__boolexpr613;
bool mu__boolexpr614;
bool mu__boolexpr615;
bool mu__boolexpr616;
bool mu__boolexpr617;
bool mu__boolexpr618;
bool mu__boolexpr619;
bool mu__boolexpr620;
bool mu__boolexpr621;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspI)) mu__boolexpr621 = TRUE ;
  else {
  mu__boolexpr621 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspIWb)) ; 
}
  if (mu__boolexpr621) mu__boolexpr620 = TRUE ;
  else {
  mu__boolexpr620 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspS)) ; 
}
  if (mu__boolexpr620) mu__boolexpr619 = TRUE ;
  else {
  mu__boolexpr619 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspSWb)) ; 
}
  if (mu__boolexpr619) mu__boolexpr618 = TRUE ;
  else {
  mu__boolexpr618 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspCurData)) ; 
}
  if (mu__boolexpr618) mu__boolexpr617 = TRUE ;
  else {
  mu__boolexpr617 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspE)) ; 
}
  if (mu__boolexpr617) mu__boolexpr616 = TRUE ;
  else {
  mu__boolexpr616 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdID)) ; 
}
  if (mu__boolexpr616) mu__boolexpr615 = TRUE ;
  else {
  mu__boolexpr615 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIWb)) ; 
}
  if (mu__boolexpr615) mu__boolexpr614 = TRUE ;
  else {
  mu__boolexpr614 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdIC)) ; 
}
  if (mu__boolexpr614) mu__boolexpr613 = TRUE ;
  else {
  mu__boolexpr613 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdSWb)) ; 
}
  if (mu__boolexpr613) mu__boolexpr612 = TRUE ;
  else {
  mu__boolexpr612 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__RspFwdS)) ; 
}
if ( mu__boolexpr612 )
{
mu_UChannel__1__push ( mu_self.mu_CAResp, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Did not handle  packet.opcode  packet. In recv_ca_packet in link");
}
}
}
};
/*** end procedure declaration ***/

void mu_ULink__recv_ha_packet(mu_1_ULink& mu_self, mu_1_UPIPacket& mu_packet)
{
bool mu__boolexpr622;
bool mu__boolexpr623;
bool mu__boolexpr624;
bool mu__boolexpr625;
bool mu__boolexpr626;
bool mu__boolexpr627;
bool mu__boolexpr628;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLCode)) mu__boolexpr628 = TRUE ;
  else {
  mu__boolexpr628 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLData)) ; 
}
  if (mu__boolexpr628) mu__boolexpr627 = TRUE ;
  else {
  mu__boolexpr627 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLInv)) ; 
}
  if (mu__boolexpr627) mu__boolexpr626 = TRUE ;
  else {
  mu__boolexpr626 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpLCurr)) ; 
}
  if (mu__boolexpr626) mu__boolexpr625 = TRUE ;
  else {
  mu__boolexpr625 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpInvOwn)) ; 
}
  if (mu__boolexpr625) mu__boolexpr624 = TRUE ;
  else {
  mu__boolexpr624 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpCode)) ; 
}
  if (mu__boolexpr624) mu__boolexpr623 = TRUE ;
  else {
  mu__boolexpr623 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpDataMig)) ; 
}
  if (mu__boolexpr623) mu__boolexpr622 = TRUE ;
  else {
  mu__boolexpr622 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SnpData)) ; 
}
if ( mu__boolexpr622 )
{
mu_UChannel__1__push ( mu_self.mu_HASnp, mu_packet );
}
else
{
bool mu__boolexpr629;
bool mu__boolexpr630;
bool mu__boolexpr631;
bool mu__boolexpr632;
bool mu__boolexpr633;
bool mu__boolexpr634;
bool mu__boolexpr635;
  if ((mu_packet.mu_opcode) == (mu_UPI_Opcode__SI_CmpO)) mu__boolexpr635 = TRUE ;
  else {
  mu__boolexpr635 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_SI)) ; 
}
  if (mu__boolexpr635) mu__boolexpr634 = TRUE ;
  else {
  mu__boolexpr634 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__E_CmpO)) ; 
}
  if (mu__boolexpr634) mu__boolexpr633 = TRUE ;
  else {
  mu__boolexpr633 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_E)) ; 
}
  if (mu__boolexpr633) mu__boolexpr632 = TRUE ;
  else {
  mu__boolexpr632 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__FwdCnfltO)) ; 
}
  if (mu__boolexpr632) mu__boolexpr631 = TRUE ;
  else {
  mu__boolexpr631 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__Data_M)) ; 
}
  if (mu__boolexpr631) mu__boolexpr630 = TRUE ;
  else {
  mu__boolexpr630 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__M_CmpO)) ; 
}
  if (mu__boolexpr630) mu__boolexpr629 = TRUE ;
  else {
  mu__boolexpr629 = ((mu_packet.mu_opcode) == (mu_UPI_Opcode__CmpU)) ; 
}
if ( mu__boolexpr629 )
{
mu_UChannel__1__push ( mu_self.mu_HAResp, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Did not handle  packet.opcode  packet. in recv_ha_packet in link");
}
}
};
/*** end procedure declaration ***/

void mu_CChannel__1__push(mu_1_CChannel__1& mu_self, mu_1_CXMPacket& mu_pkt)
{
mu_Guard ( (mu_self.mu_count) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_pkts[mu_self.mu_count] = mu_pkt;
mu_self.mu_count = (mu_self.mu_count) + (1);
}
};
/*** end procedure declaration ***/

void mu_ULink__recv_mc_packet(mu_1_ULink& mu_self, mu_1_CXMPacket& mu_packet)
{
if ( (mu_packet.mu_opcode) == (mu_CXM_Opcode__MemData) )
{
mu_CChannel__1__push ( mu_self.mu_MCResp, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Did not handle  packet.opcode  packet. in recv_ha_packet in link");
}
};
/*** end procedure declaration ***/

void mu_CacheEntry__release(mu_1_CacheEntry& mu_self)
{
mu_self.mu_state = mu_CacheState__I;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_data[mu_word].undefine();
mu_self.mu_be[mu_word] = mu_false;
};
};
};
/*** end procedure declaration ***/

void mu_IDIAgent__recv_F2AResp_packet(mu_1_IDIAgent& mu_self, mu_1_IDIPacket& mu_packet)
{
if ( !(mu_self.mu_cq[mu_packet.mu_rtid].mu_valid) ) Error.Error("Assertion failed:  rtid  packet.rtid  is no longer valid in Agent");
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwn) )
{
bool mu__boolexpr636;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr636 = FALSE ;
  else {
bool mu__boolexpr637;
  if ((mu_packet.mu_cachestate) == (mu_CacheState__E)) mu__boolexpr637 = TRUE ;
  else {
  mu__boolexpr637 = ((mu_packet.mu_cachestate) == (mu_CacheState__M)) ; 
}
  mu__boolexpr636 = (mu__boolexpr637) ; 
}
if ( !(mu__boolexpr636) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
bool mu__boolexpr638;
  if (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_data_recvd)) mu__boolexpr638 = FALSE ;
  else {
  mu__boolexpr638 = (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr638 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_self.mu_cq[mu_packet.mu_rtid].mu_data[mu_word];
}
};
};
}
bool mu__boolexpr639;
  if ((mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr639 = TRUE ;
  else {
  mu__boolexpr639 = ((mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ; 
}
if ( mu__boolexpr639 )
{
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_packet.mu_cachestate;
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwnNoData) )
{
bool mu__boolexpr640;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr640 = FALSE ;
  else {
  mu__boolexpr640 = ((mu_packet.mu_cachestate) == (mu_CacheState__E)) ; 
}
if ( !(mu__boolexpr640) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
bool mu__boolexpr641;
  if ((mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr641 = TRUE ;
  else {
  mu__boolexpr641 = ((mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) ; 
}
if ( mu__boolexpr641 )
{
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_packet.mu_cachestate;
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdShared) )
{
bool mu__boolexpr642;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr642 = FALSE ;
  else {
  mu__boolexpr642 = ((mu_packet.mu_cachestate) == (mu_CacheState__S)) ; 
}
if ( !(mu__boolexpr642) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
bool mu__boolexpr643;
  if (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_data_recvd)) mu__boolexpr643 = FALSE ;
  else {
  mu__boolexpr643 = (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr643 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_self.mu_cq[mu_packet.mu_rtid].mu_data[mu_word];
}
};
};
}
if ( (mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I) )
{
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_packet.mu_cachestate;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_packet.mu_cachestate;
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdAny) )
{
bool mu__boolexpr644;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr644 = FALSE ;
  else {
bool mu__boolexpr645;
bool mu__boolexpr646;
  if ((mu_packet.mu_cachestate) == (mu_CacheState__S)) mu__boolexpr646 = TRUE ;
  else {
  mu__boolexpr646 = ((mu_packet.mu_cachestate) == (mu_CacheState__E)) ; 
}
  if (mu__boolexpr646) mu__boolexpr645 = TRUE ;
  else {
  mu__boolexpr645 = ((mu_packet.mu_cachestate) == (mu_CacheState__M)) ; 
}
  mu__boolexpr644 = (mu__boolexpr645) ; 
}
if ( !(mu__boolexpr644) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
bool mu__boolexpr647;
  if (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_data_recvd)) mu__boolexpr647 = FALSE ;
  else {
  mu__boolexpr647 = (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr647 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_self.mu_cq[mu_packet.mu_rtid].mu_data[mu_word];
}
};
};
}
bool mu__boolexpr648;
  if ((mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I)) mu__boolexpr648 = TRUE ;
  else {
  mu__boolexpr648 = ((mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__S)) ; 
}
if ( mu__boolexpr648 )
{
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_packet.mu_cachestate;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_packet.mu_cachestate;
}
}
else
{
bool mu__boolexpr649;
  if ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr649 = TRUE ;
  else {
  mu__boolexpr649 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
if ( mu__boolexpr649 )
{
if ( !((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr650;
bool mu__boolexpr651;
  if (!(mu_self.mu_cq[mu_id].mu_valid)) mu__boolexpr651 = FALSE ;
  else {
bool mu__boolexpr652;
bool mu__boolexpr653;
  if ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr653 = TRUE ;
  else {
  mu__boolexpr653 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr653) mu__boolexpr652 = TRUE ;
  else {
  mu__boolexpr652 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  mu__boolexpr651 = (mu__boolexpr652) ; 
}
  if (!(mu__boolexpr651)) mu__boolexpr650 = FALSE ;
  else {
bool mu__boolexpr654;
bool mu__boolexpr655;
  if (!(mu_self.mu_cq[mu_id].mu_resp_recvd)) mu__boolexpr655 = FALSE ;
  else {
  mu__boolexpr655 = (!(mu_self.mu_cq[mu_id].mu_data_recvd)) ; 
}
  if (mu__boolexpr655) mu__boolexpr654 = TRUE ;
  else {
bool mu__boolexpr656;
  if (!(!(mu_self.mu_cq[mu_id].mu_resp_recvd))) mu__boolexpr656 = FALSE ;
  else {
  mu__boolexpr656 = (mu_self.mu_cq[mu_id].mu_data_recvd) ; 
}
  mu__boolexpr654 = (mu__boolexpr656) ; 
}
  mu__boolexpr650 = (mu__boolexpr654) ; 
}
if ( mu__boolexpr650 )
{
mu_self.mu_cq[mu_id].mu_stale = mu_true;
}
};
};
}
else
{
bool mu__boolexpr657;
  if ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush)) mu__boolexpr657 = TRUE ;
  else {
  mu__boolexpr657 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
if ( mu__boolexpr657 )
{
bool mu__boolexpr658;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr658 = FALSE ;
  else {
  mu__boolexpr658 = ((mu_packet.mu_cachestate) == (mu_CacheState__I)) ; 
}
if ( !(mu__boolexpr658) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr659;
bool mu__boolexpr660;
  if (!(mu_self.mu_cq[mu_id].mu_valid)) mu__boolexpr660 = FALSE ;
  else {
bool mu__boolexpr661;
bool mu__boolexpr662;
  if ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr662 = TRUE ;
  else {
  mu__boolexpr662 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr662) mu__boolexpr661 = TRUE ;
  else {
  mu__boolexpr661 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  mu__boolexpr660 = (mu__boolexpr661) ; 
}
  if (!(mu__boolexpr660)) mu__boolexpr659 = FALSE ;
  else {
bool mu__boolexpr663;
bool mu__boolexpr664;
  if (!(mu_self.mu_cq[mu_id].mu_resp_recvd)) mu__boolexpr664 = FALSE ;
  else {
  mu__boolexpr664 = (!(mu_self.mu_cq[mu_id].mu_data_recvd)) ; 
}
  if (mu__boolexpr664) mu__boolexpr663 = TRUE ;
  else {
bool mu__boolexpr665;
  if (!(!(mu_self.mu_cq[mu_id].mu_resp_recvd))) mu__boolexpr665 = FALSE ;
  else {
  mu__boolexpr665 = (mu_self.mu_cq[mu_id].mu_data_recvd) ; 
}
  mu__boolexpr663 = (mu__boolexpr665) ; 
}
  mu__boolexpr659 = (mu__boolexpr663) ; 
}
if ( mu__boolexpr659 )
{
mu_self.mu_cq[mu_id].mu_stale = mu_true;
}
};
};
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache) )
{
bool mu__boolexpr666;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr666 = FALSE ;
  else {
  mu__boolexpr666 = ((mu_packet.mu_cachestate) == (mu_CacheState__I)) ; 
}
if ( !(mu__boolexpr666) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
}
else
{
bool mu__boolexpr667;
  if ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr667 = TRUE ;
  else {
  mu__boolexpr667 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
if ( mu__boolexpr667 )
{
bool mu__boolexpr668;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGO)) mu__boolexpr668 = TRUE ;
  else {
  mu__boolexpr668 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__ExtCmp)) ; 
}
if ( !(mu__boolexpr668) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGO) )
{
if ( !(!(mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_opcode = mu_packet.mu_opcode;
}
else
{
if ( !(!(mu_self.mu_cq[mu_packet.mu_rtid].mu_extcmp_recvd)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_extcmp_recvd = mu_true;
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvict) )
{
bool mu__boolexpr669;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) mu__boolexpr669 = TRUE ;
  else {
  mu__boolexpr669 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePullDrop)) ; 
}
if ( !(mu__boolexpr669) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_opcode = mu_packet.mu_opcode;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull) )
{
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePullDrop) )
{
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
}
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate) )
{
bool mu__boolexpr670;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) mu__boolexpr670 = TRUE ;
  else {
  mu__boolexpr670 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePullDrop)) ; 
}
if ( !(mu__boolexpr670) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_opcode = mu_packet.mu_opcode;
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePullDrop) )
{
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvict) )
{
if ( !((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_opcode = mu_packet.mu_opcode;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv) )
{
if ( !((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_opcode = mu_packet.mu_opcode;
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData) )
{
bool mu__boolexpr671;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr671 = FALSE ;
  else {
  mu__boolexpr671 = ((mu_packet.mu_cachestate) == (mu_CacheState__I)) ; 
}
if ( !(mu__boolexpr671) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
}
else
{
bool mu__boolexpr672;
  if ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr672 = TRUE ;
  else {
  mu__boolexpr672 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
if ( mu__boolexpr672 )
{
bool mu__boolexpr673;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGOWritePull)) mu__boolexpr673 = TRUE ;
  else {
  mu__boolexpr673 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__ExtCmp)) ; 
}
if ( !(mu__boolexpr673) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGOWritePull) )
{
if ( !(!(mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
}
else
{
if ( !(!(mu_self.mu_cq[mu_packet.mu_rtid].mu_extcmp_recvd)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_extcmp_recvd = mu_true;
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__WrInv) )
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__WritePull) )
{
bool mu__boolexpr674;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WritePull)) mu__boolexpr674 = TRUE ;
  else {
bool mu__boolexpr675;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr675 = FALSE ;
  else {
  mu__boolexpr675 = ((mu_packet.mu_cachestate) == (mu_CacheState__I)) ; 
}
  mu__boolexpr674 = (mu__boolexpr675) ; 
}
if ( !(mu__boolexpr674) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_htid = mu_packet.mu_htid;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state = mu_CacheState__I;
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] );
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr676;
bool mu__boolexpr677;
  if (!(mu_self.mu_cq[mu_id].mu_valid)) mu__boolexpr677 = FALSE ;
  else {
bool mu__boolexpr678;
bool mu__boolexpr679;
bool mu__boolexpr680;
bool mu__boolexpr681;
  if ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr681 = TRUE ;
  else {
  mu__boolexpr681 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr681) mu__boolexpr680 = TRUE ;
  else {
  mu__boolexpr680 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr680) mu__boolexpr679 = TRUE ;
  else {
  mu__boolexpr679 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr679) mu__boolexpr678 = TRUE ;
  else {
  mu__boolexpr678 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  mu__boolexpr677 = (mu__boolexpr678) ; 
}
  if (!(mu__boolexpr677)) mu__boolexpr676 = FALSE ;
  else {
bool mu__boolexpr682;
bool mu__boolexpr683;
  if (!(mu_self.mu_cq[mu_id].mu_resp_recvd)) mu__boolexpr683 = FALSE ;
  else {
  mu__boolexpr683 = (!(mu_self.mu_cq[mu_id].mu_data_recvd)) ; 
}
  if (mu__boolexpr683) mu__boolexpr682 = TRUE ;
  else {
bool mu__boolexpr684;
  if (!(!(mu_self.mu_cq[mu_id].mu_resp_recvd))) mu__boolexpr684 = FALSE ;
  else {
  mu__boolexpr684 = (mu_self.mu_cq[mu_id].mu_data_recvd) ; 
}
  mu__boolexpr682 = (mu__boolexpr684) ; 
}
  mu__boolexpr676 = (mu__boolexpr682) ; 
}
if ( mu__boolexpr676 )
{
mu_self.mu_cq[mu_id].mu_stale = mu_true;
}
};
};
}
else
{
if ( !(!(mu_self.mu_cq[mu_packet.mu_rtid].mu_extcmp_recvd)) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_extcmp_recvd = mu_true;
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__SetMonitor) )
{
bool mu__boolexpr685;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr685 = FALSE ;
  else {
  mu__boolexpr685 = ((mu_packet.mu_cachestate) == (mu_CacheState__S)) ; 
}
if ( !(mu__boolexpr685) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
bool mu__boolexpr686;
  if (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_data_recvd)) mu__boolexpr686 = FALSE ;
  else {
  mu__boolexpr686 = (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr686 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_self.mu_cq[mu_packet.mu_rtid].mu_data[mu_word];
}
};
};
}
if ( (mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I) )
{
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_packet.mu_cachestate;
}
}
else
{
if ( (mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__ClrMonitor) )
{
bool mu__boolexpr687;
  if (!((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO))) mu__boolexpr687 = FALSE ;
  else {
  mu__boolexpr687 = ((mu_packet.mu_cachestate) == (mu_CacheState__I)) ; 
}
if ( !(mu__boolexpr687) ) Error.Error("Assertion failed:  incorrect response recvd for  self.cq[packet.rtid].opcode");
mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_respstate = mu_CacheState__I;
mu_self.mu_address_monitored[mu_self.mu_cq[mu_packet.mu_rtid].mu_address] = mu_false;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  receiving response support is not added for  self.cq[packet.rtid].opcode");
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_IDIAgent__pending_snoop(mu_1_IDIAgent& mu_self,const mu_1_Address& mu_addr)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr688;
bool mu__boolexpr689;
bool mu__boolexpr690;
bool mu__boolexpr691;
  if (!(mu_self.mu_snoopq[mu_id].mu_valid)) mu__boolexpr691 = FALSE ;
  else {
  mu__boolexpr691 = ((mu_self.mu_snoopq[mu_id].mu_address) == (mu_addr)) ; 
}
  if (!(mu__boolexpr691)) mu__boolexpr690 = FALSE ;
  else {
  mu__boolexpr690 = (mu_self.mu_snoopq[mu_id].mu_resp_sent) ; 
}
  if (!(mu__boolexpr690)) mu__boolexpr689 = FALSE ;
  else {
bool mu__boolexpr692;
bool mu__boolexpr693;
  if ((mu_self.mu_snoopq[mu_id].mu_resp_opcode) == (mu_IDI_Opcode__RspIFwdM)) mu__boolexpr693 = TRUE ;
  else {
  mu__boolexpr693 = ((mu_self.mu_snoopq[mu_id].mu_resp_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
  if (mu__boolexpr693) mu__boolexpr692 = TRUE ;
  else {
  mu__boolexpr692 = ((mu_self.mu_snoopq[mu_id].mu_resp_opcode) == (mu_IDI_Opcode__RspVFwdV)) ; 
}
  mu__boolexpr689 = (mu__boolexpr692) ; 
}
  if (!(mu__boolexpr689)) mu__boolexpr688 = FALSE ;
  else {
  mu__boolexpr688 = (!(mu_self.mu_snoopq[mu_id].mu_data_sent)) ; 
}
if ( mu__boolexpr688 )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function IDIAgent__pending_snoop reached without returning values.");
};
/*** end function declaration ***/

void mu_IDIAgent__recv_F2AData_packet(mu_1_IDIAgent& mu_self, mu_1_IDIPacket& mu_packet)
{
mu_Guard ( mu_self.mu_cq[mu_packet.mu_rtid].mu_valid );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr694;
bool mu__boolexpr695;
bool mu__boolexpr696;
bool mu__boolexpr697;
bool mu__boolexpr698;
bool mu__boolexpr699;
  if ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr699 = TRUE ;
  else {
  mu__boolexpr699 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr699) mu__boolexpr698 = TRUE ;
  else {
  mu__boolexpr698 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr698) mu__boolexpr697 = TRUE ;
  else {
  mu__boolexpr697 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr697) mu__boolexpr696 = TRUE ;
  else {
  mu__boolexpr696 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr696) mu__boolexpr695 = TRUE ;
  else {
  mu__boolexpr695 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr695) mu__boolexpr694 = TRUE ;
  else {
  mu__boolexpr694 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
mu_Guard ( mu__boolexpr694 );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_cq[mu_packet.mu_rtid].mu_data_recvd = mu_true;
mu_self.mu_cq[mu_packet.mu_rtid].mu_data = mu_packet.mu_data;
bool mu__boolexpr700;
bool mu__boolexpr701;
  if (!(!((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr)))) mu__boolexpr701 = FALSE ;
  else {
  mu__boolexpr701 = (!((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__UcRdF))) ; 
}
  if (!(mu__boolexpr701)) mu__boolexpr700 = FALSE ;
  else {
  mu__boolexpr700 = (!((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr_ns))) ; 
}
if ( mu__boolexpr700 )
{
bool mu__boolexpr702;
  if (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_resp_recvd)) mu__boolexpr702 = FALSE ;
  else {
  mu__boolexpr702 = (!(mu_self.mu_cq[mu_packet.mu_rtid].mu_stale)) ; 
}
if ( mu__boolexpr702 )
{
bool mu__boolexpr703;
bool mu__boolexpr704;
  if ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr704 = TRUE ;
  else {
  mu__boolexpr704 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr704) mu__boolexpr703 = TRUE ;
  else {
  mu__boolexpr703 = ((mu_self.mu_cq[mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
if ( mu__boolexpr703 )
{
bool mu__boolexpr705;
  if (!((mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__I))) mu__boolexpr705 = TRUE ;
  else {
  mu__boolexpr705 = (mu_IDIAgent__pending_snoop( mu_self, mu_self.mu_cq[mu_packet.mu_rtid].mu_address )) ; 
}
if ( mu__boolexpr705 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word]) )
{
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_data[mu_word] = mu_packet.mu_data[mu_word];
mu_self.mu_cache[mu_self.mu_cq[mu_packet.mu_rtid].mu_address].mu_be[mu_word] = mu_true;
}
};
};
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_SnoopEntry__load(mu_1_SnoopEntry& mu_self, mu_1_IDIPacket& mu_packet)
{
mu_self.mu_valid = mu_true;
mu_self.mu_opcode = mu_packet.mu_opcode;
mu_self.mu_htid = mu_packet.mu_htid;
mu_self.mu_address = mu_packet.mu_address;
};
/*** end procedure declaration ***/

mu_0_boolean mu_IDIAgent__is_available_snoopentry(mu_1_IDIAgent& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_snoopq[mu_id].mu_valid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function IDIAgent__is_available_snoopentry reached without returning values.");
};
/*** end function declaration ***/

mu_1_Snoopq_sz mu_IDIAgent__available_snoopentry_index(mu_1_IDIAgent& mu_self)
{
/*** Variable declaration ***/
mu_1_Snoopq_sz mu_ret_id("ret_id",0);

{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_snoopq[mu_id].mu_valid) )
{
mu_ret_id = mu_id;
}
};
};
return mu_ret_id;
	Error.Error("The end of function IDIAgent__available_snoopentry_index reached without returning values.");
};
/*** end function declaration ***/

void mu_IDIAgent__recv_snoop_request(mu_1_IDIAgent& mu_self, mu_1_IDIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_Snoopq_sz mu_snoop_idx("snoop_idx",0);

mu_Guard ( mu_IDIAgent__is_available_snoopentry( mu_self ) );
if ( mu_guard_failed.isundefined() )
{
mu_snoop_idx = mu_IDIAgent__available_snoopentry_index( mu_self );
mu_SnoopEntry__load ( mu_self.mu_snoopq[mu_snoop_idx], mu_packet );
}
};
/*** end procedure declaration ***/

void mu_IDIAgent__recv_packet_from_hbo(mu_1_IDIAgent& mu_self, mu_1_IDIPacket& mu_packet)
{
bool mu__boolexpr706;
bool mu__boolexpr707;
bool mu__boolexpr708;
bool mu__boolexpr709;
bool mu__boolexpr710;
bool mu__boolexpr711;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GO)) mu__boolexpr711 = TRUE ;
  else {
  mu__boolexpr711 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) ; 
}
  if (mu__boolexpr711) mu__boolexpr710 = TRUE ;
  else {
  mu__boolexpr710 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGO)) ; 
}
  if (mu__boolexpr710) mu__boolexpr709 = TRUE ;
  else {
  mu__boolexpr709 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__ExtCmp)) ; 
}
  if (mu__boolexpr709) mu__boolexpr708 = TRUE ;
  else {
  mu__boolexpr708 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePullDrop)) ; 
}
  if (mu__boolexpr708) mu__boolexpr707 = TRUE ;
  else {
  mu__boolexpr707 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGOWritePull)) ; 
}
  if (mu__boolexpr707) mu__boolexpr706 = TRUE ;
  else {
  mu__boolexpr706 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WritePull)) ; 
}
if ( mu__boolexpr706 )
{
mu_IDIAgent__recv_F2AResp_packet ( mu_self, mu_packet );
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__Data) )
{
mu_IDIAgent__recv_F2AData_packet ( mu_self, mu_packet );
}
else
{
bool mu__boolexpr712;
bool mu__boolexpr713;
bool mu__boolexpr714;
bool mu__boolexpr715;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpData)) mu__boolexpr715 = TRUE ;
  else {
  mu__boolexpr715 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpCode)) ; 
}
  if (mu__boolexpr715) mu__boolexpr714 = TRUE ;
  else {
  mu__boolexpr714 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpInv)) ; 
}
  if (mu__boolexpr714) mu__boolexpr713 = TRUE ;
  else {
  mu__boolexpr713 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpCur)) ; 
}
  if (mu__boolexpr713) mu__boolexpr712 = TRUE ;
  else {
  mu__boolexpr712 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__BackInv)) ; 
}
if ( mu__boolexpr712 )
{
mu_IDIAgent__recv_snoop_request ( mu_self, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  IDI agent does not know what to do with packet opcode  packet.opcode");
}
}
}
};
/*** end procedure declaration ***/

void mu_Channel__1__push(mu_1_Channel__1& mu_self, mu_1_AgentPacket& mu_pkt)
{
mu_Guard ( (mu_self.mu_count) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_pkts[mu_self.mu_count] = mu_pkt;
mu_self.mu_count = (mu_self.mu_count) + (1);
}
};
/*** end procedure declaration ***/

void mu_Link__recv_agent_packet(mu_1_Link& mu_self, mu_1_IDIPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_ipkt("ipkt",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_pkt("pkt",88);

mu_ipkt = mu_packet;
mu_ipkt.mu_responder_id = mu_self.mu_network_id;
mu_pkt.mu_network_id = mu_self.mu_network_id;
mu_pkt.mu_packet = mu_packet;
bool mu__boolexpr716;
bool mu__boolexpr717;
bool mu__boolexpr718;
bool mu__boolexpr719;
bool mu__boolexpr720;
bool mu__boolexpr721;
bool mu__boolexpr722;
bool mu__boolexpr723;
bool mu__boolexpr724;
bool mu__boolexpr725;
bool mu__boolexpr726;
bool mu__boolexpr727;
bool mu__boolexpr728;
bool mu__boolexpr729;
bool mu__boolexpr730;
bool mu__boolexpr731;
bool mu__boolexpr732;
bool mu__boolexpr733;
bool mu__boolexpr734;
bool mu__boolexpr735;
bool mu__boolexpr736;
bool mu__boolexpr737;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr737 = TRUE ;
  else {
  mu__boolexpr737 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr737) mu__boolexpr736 = TRUE ;
  else {
  mu__boolexpr736 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr736) mu__boolexpr735 = TRUE ;
  else {
  mu__boolexpr735 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr735) mu__boolexpr734 = TRUE ;
  else {
  mu__boolexpr734 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr734) mu__boolexpr733 = TRUE ;
  else {
  mu__boolexpr733 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__ItoMWr)) ; 
}
  if (mu__boolexpr733) mu__boolexpr732 = TRUE ;
  else {
  mu__boolexpr732 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr732) mu__boolexpr731 = TRUE ;
  else {
  mu__boolexpr731 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr731) mu__boolexpr730 = TRUE ;
  else {
  mu__boolexpr730 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr730) mu__boolexpr729 = TRUE ;
  else {
  mu__boolexpr729 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr729) mu__boolexpr728 = TRUE ;
  else {
  mu__boolexpr728 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr728) mu__boolexpr727 = TRUE ;
  else {
  mu__boolexpr727 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr727) mu__boolexpr726 = TRUE ;
  else {
  mu__boolexpr726 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr726) mu__boolexpr725 = TRUE ;
  else {
  mu__boolexpr725 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr725) mu__boolexpr724 = TRUE ;
  else {
  mu__boolexpr724 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr724) mu__boolexpr723 = TRUE ;
  else {
  mu__boolexpr723 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr723) mu__boolexpr722 = TRUE ;
  else {
  mu__boolexpr722 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr722) mu__boolexpr721 = TRUE ;
  else {
  mu__boolexpr721 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr721) mu__boolexpr720 = TRUE ;
  else {
  mu__boolexpr720 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr720) mu__boolexpr719 = TRUE ;
  else {
  mu__boolexpr719 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (mu__boolexpr719) mu__boolexpr718 = TRUE ;
  else {
  mu__boolexpr718 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr718) mu__boolexpr717 = TRUE ;
  else {
  mu__boolexpr717 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__ClrMonitor)) ; 
}
  if (mu__boolexpr717) mu__boolexpr716 = TRUE ;
  else {
  mu__boolexpr716 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
if ( mu__boolexpr716 )
{
mu_Channel__1__push ( mu_self.mu_A2FReq, mu_pkt );
}
else
{
bool mu__boolexpr738;
bool mu__boolexpr739;
bool mu__boolexpr740;
bool mu__boolexpr741;
bool mu__boolexpr742;
bool mu__boolexpr743;
bool mu__boolexpr744;
  if ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIHitI)) mu__boolexpr744 = TRUE ;
  else {
  mu__boolexpr744 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspSHitSE)) ; 
}
  if (mu__boolexpr744) mu__boolexpr743 = TRUE ;
  else {
  mu__boolexpr743 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIHitSE)) ; 
}
  if (mu__boolexpr743) mu__boolexpr742 = TRUE ;
  else {
  mu__boolexpr742 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspVHitV)) ; 
}
  if (mu__boolexpr742) mu__boolexpr741 = TRUE ;
  else {
  mu__boolexpr741 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspIFwdM)) ; 
}
  if (mu__boolexpr741) mu__boolexpr740 = TRUE ;
  else {
  mu__boolexpr740 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
  if (mu__boolexpr740) mu__boolexpr739 = TRUE ;
  else {
  mu__boolexpr739 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__RspVFwdV)) ; 
}
  if (mu__boolexpr739) mu__boolexpr738 = TRUE ;
  else {
  mu__boolexpr738 = ((mu_packet.mu_opcode) == (mu_IDI_Opcode__GOAck)) ; 
}
if ( mu__boolexpr738 )
{
mu_pkt.mu_network_id = mu_self.mu_network_id;
mu_pkt.mu_packet = mu_ipkt;
mu_Channel__1__push ( mu_self.mu_A2FResp, mu_pkt );
}
else
{
if ( (mu_packet.mu_opcode) == (mu_IDI_Opcode__Data) )
{
mu_Channel__1__push ( mu_self.mu_A2FData, mu_pkt );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Did not handle  packet.opcode  packet. In recv_agent_packet in link");
}
}
}
};
/*** end procedure declaration ***/

void mu_Link__recv_fabric_packet(mu_1_Link& mu_self, mu_1_AgentPacket& mu_packet)
{
if ( (mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__Data) )
{
mu_Channel__1__push ( mu_self.mu_F2AData, mu_packet );
}
else
{
bool mu__boolexpr745;
bool mu__boolexpr746;
bool mu__boolexpr747;
bool mu__boolexpr748;
bool mu__boolexpr749;
bool mu__boolexpr750;
  if ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__GO)) mu__boolexpr750 = TRUE ;
  else {
  mu__boolexpr750 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) ; 
}
  if (mu__boolexpr750) mu__boolexpr749 = TRUE ;
  else {
  mu__boolexpr749 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGO)) ; 
}
  if (mu__boolexpr749) mu__boolexpr748 = TRUE ;
  else {
  mu__boolexpr748 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__ExtCmp)) ; 
}
  if (mu__boolexpr748) mu__boolexpr747 = TRUE ;
  else {
  mu__boolexpr747 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePullDrop)) ; 
}
  if (mu__boolexpr747) mu__boolexpr746 = TRUE ;
  else {
  mu__boolexpr746 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__FastGOWritePull)) ; 
}
  if (mu__boolexpr746) mu__boolexpr745 = TRUE ;
  else {
  mu__boolexpr745 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__WritePull)) ; 
}
if ( mu__boolexpr745 )
{
mu_Channel__1__push ( mu_self.mu_F2AResp, mu_packet );
}
else
{
bool mu__boolexpr751;
bool mu__boolexpr752;
bool mu__boolexpr753;
bool mu__boolexpr754;
  if ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpData)) mu__boolexpr754 = TRUE ;
  else {
  mu__boolexpr754 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpCode)) ; 
}
  if (mu__boolexpr754) mu__boolexpr753 = TRUE ;
  else {
  mu__boolexpr753 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpInv)) ; 
}
  if (mu__boolexpr753) mu__boolexpr752 = TRUE ;
  else {
  mu__boolexpr752 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__SnpCur)) ; 
}
  if (mu__boolexpr752) mu__boolexpr751 = TRUE ;
  else {
  mu__boolexpr751 = ((mu_packet.mu_packet.mu_opcode) == (mu_IDI_Opcode__BackInv)) ; 
}
if ( mu__boolexpr751 )
{
mu_Channel__1__push ( mu_self.mu_F2AReq, mu_packet );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Did not handle  packet.packet.opcode  packet. in recv_fabric_packet in link");
}
}
}
};
/*** end procedure declaration ***/

void mu_Link__recv_mc_packet(mu_1_Link& mu_self, mu_1_CXMPacket& mu_packet)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_idiPacket("idiPacket",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",88);

if ( (mu_packet.mu_opcode) == (mu_CXM_Opcode__MemData) )
{
mu_idiPacket.mu_opcode = mu_IDI_Opcode__Data;
mu_idiPacket.mu_data = mu_packet.mu_data;
mu_idiPacket.mu_rtid = mu_packet.mu_rtid;
mu_agentPacket.mu_packet = mu_idiPacket;
mu_agentPacket.mu_network_id = mu_self.mu_network_id;
mu_Channel__1__push ( mu_self.mu_F2AData, mu_agentPacket );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Did not handle  packet.packet.opcode  packet. in recv_fabric_packet in link");
}
};
/*** end procedure declaration ***/

void mu_rbw_port_transfer()
{
if ( mu_guard_failed.isundefined() )
{
if ( !(mu_self.mu_IDICAgent[0].mu_to_hbo__update.isundefined()) )
{
mu_Link__recv_agent_packet ( mu_self.mu_idiclink[0], mu_self.mu_IDICAgent[0].mu_to_hbo );
mu_self.mu_IDICAgent[0].mu_to_hbo.undefine();
mu_self.mu_IDICAgent[0].mu_to_hbo__update.undefine();
}
else
{
if ( !(mu_self.mu_IDICAgent[1].mu_to_hbo__update.isundefined()) )
{
mu_Link__recv_agent_packet ( mu_self.mu_idiclink[1], mu_self.mu_IDICAgent[1].mu_to_hbo );
mu_self.mu_IDICAgent[1].mu_to_hbo.undefine();
mu_self.mu_IDICAgent[1].mu_to_hbo__update.undefine();
}
else
{
if ( !(mu_self.mu_IDICAgent[2].mu_to_hbo__update.isundefined()) )
{
mu_Link__recv_agent_packet ( mu_self.mu_idiclink[2], mu_self.mu_IDICAgent[2].mu_to_hbo );
mu_self.mu_IDICAgent[2].mu_to_hbo.undefine();
mu_self.mu_IDICAgent[2].mu_to_hbo__update.undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[0].mu_to_ca__update[0].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[0], mu_self.mu_UPIAgent[0].mu_to_ca[0] );
mu_self.mu_UPIAgent[0].mu_to_ca[0].undefine();
mu_self.mu_UPIAgent[0].mu_to_ca__update[0].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[0].mu_to_ca__update[1].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[1], mu_self.mu_UPIAgent[0].mu_to_ca[1] );
mu_self.mu_UPIAgent[0].mu_to_ca[1].undefine();
mu_self.mu_UPIAgent[0].mu_to_ca__update[1].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[0].mu_to_ca__update[2].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[2], mu_self.mu_UPIAgent[0].mu_to_ca[2] );
mu_self.mu_UPIAgent[0].mu_to_ca[2].undefine();
mu_self.mu_UPIAgent[0].mu_to_ca__update[2].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[0].mu_to_hbo__update.isundefined()) )
{
mu_ULink__recv_ca_packet ( mu_self.mu_santa[0], mu_self.mu_UPIAgent[0].mu_to_hbo );
mu_self.mu_UPIAgent[0].mu_to_hbo.undefine();
mu_self.mu_UPIAgent[0].mu_to_hbo__update.undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[1].mu_to_ca__update[0].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[0], mu_self.mu_UPIAgent[1].mu_to_ca[0] );
mu_self.mu_UPIAgent[1].mu_to_ca[0].undefine();
mu_self.mu_UPIAgent[1].mu_to_ca__update[0].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[1].mu_to_ca__update[1].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[1], mu_self.mu_UPIAgent[1].mu_to_ca[1] );
mu_self.mu_UPIAgent[1].mu_to_ca[1].undefine();
mu_self.mu_UPIAgent[1].mu_to_ca__update[1].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[1].mu_to_ca__update[2].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[2], mu_self.mu_UPIAgent[1].mu_to_ca[2] );
mu_self.mu_UPIAgent[1].mu_to_ca[2].undefine();
mu_self.mu_UPIAgent[1].mu_to_ca__update[2].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[1].mu_to_hbo__update.isundefined()) )
{
mu_ULink__recv_ca_packet ( mu_self.mu_santa[1], mu_self.mu_UPIAgent[1].mu_to_hbo );
mu_self.mu_UPIAgent[1].mu_to_hbo.undefine();
mu_self.mu_UPIAgent[1].mu_to_hbo__update.undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[2].mu_to_ca__update[0].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[0], mu_self.mu_UPIAgent[2].mu_to_ca[0] );
mu_self.mu_UPIAgent[2].mu_to_ca[0].undefine();
mu_self.mu_UPIAgent[2].mu_to_ca__update[0].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[2].mu_to_ca__update[1].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[1], mu_self.mu_UPIAgent[2].mu_to_ca[1] );
mu_self.mu_UPIAgent[2].mu_to_ca[1].undefine();
mu_self.mu_UPIAgent[2].mu_to_ca__update[1].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[2].mu_to_ca__update[2].isundefined()) )
{
mu_CA__recv_packet_from_peer_ca ( mu_self.mu_UPIAgent[2], mu_self.mu_UPIAgent[2].mu_to_ca[2] );
mu_self.mu_UPIAgent[2].mu_to_ca[2].undefine();
mu_self.mu_UPIAgent[2].mu_to_ca__update[2].undefine();
}
else
{
if ( !(mu_self.mu_UPIAgent[2].mu_to_hbo__update.isundefined()) )
{
mu_ULink__recv_ca_packet ( mu_self.mu_santa[2], mu_self.mu_UPIAgent[2].mu_to_hbo );
mu_self.mu_UPIAgent[2].mu_to_hbo.undefine();
mu_self.mu_UPIAgent[2].mu_to_hbo__update.undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_from_mc_to_idiclink__update[0].isundefined()) )
{
mu_Link__recv_mc_packet ( mu_self.mu_idiclink[0], mu_self.mu_hbo.mu_from_mc_to_idiclink[0] );
mu_self.mu_hbo.mu_from_mc_to_idiclink[0].undefine();
mu_self.mu_hbo.mu_from_mc_to_idiclink__update[0].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_from_mc_to_idiclink__update[1].isundefined()) )
{
mu_Link__recv_mc_packet ( mu_self.mu_idiclink[1], mu_self.mu_hbo.mu_from_mc_to_idiclink[1] );
mu_self.mu_hbo.mu_from_mc_to_idiclink[1].undefine();
mu_self.mu_hbo.mu_from_mc_to_idiclink__update[1].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_from_mc_to_idiclink__update[2].isundefined()) )
{
mu_Link__recv_mc_packet ( mu_self.mu_idiclink[2], mu_self.mu_hbo.mu_from_mc_to_idiclink[2] );
mu_self.mu_hbo.mu_from_mc_to_idiclink[2].undefine();
mu_self.mu_hbo.mu_from_mc_to_idiclink__update[2].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_from_mc_to_santa__update[0].isundefined()) )
{
mu_ULink__recv_mc_packet ( mu_self.mu_santa[0], mu_self.mu_hbo.mu_from_mc_to_santa[0] );
mu_self.mu_hbo.mu_from_mc_to_santa[0].undefine();
mu_self.mu_hbo.mu_from_mc_to_santa__update[0].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_from_mc_to_santa__update[1].isundefined()) )
{
mu_ULink__recv_mc_packet ( mu_self.mu_santa[1], mu_self.mu_hbo.mu_from_mc_to_santa[1] );
mu_self.mu_hbo.mu_from_mc_to_santa[1].undefine();
mu_self.mu_hbo.mu_from_mc_to_santa__update[1].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_from_mc_to_santa__update[2].isundefined()) )
{
mu_ULink__recv_mc_packet ( mu_self.mu_santa[2], mu_self.mu_hbo.mu_from_mc_to_santa[2] );
mu_self.mu_hbo.mu_from_mc_to_santa[2].undefine();
mu_self.mu_hbo.mu_from_mc_to_santa__update[2].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_to_ca__update[0].isundefined()) )
{
mu_ULink__recv_ha_packet ( mu_self.mu_santa[0], mu_self.mu_hbo.mu_to_ca[0] );
mu_self.mu_hbo.mu_to_ca[0].undefine();
mu_self.mu_hbo.mu_to_ca__update[0].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_to_ca__update[1].isundefined()) )
{
mu_ULink__recv_ha_packet ( mu_self.mu_santa[1], mu_self.mu_hbo.mu_to_ca[1] );
mu_self.mu_hbo.mu_to_ca[1].undefine();
mu_self.mu_hbo.mu_to_ca__update[1].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_to_ca__update[2].isundefined()) )
{
mu_ULink__recv_ha_packet ( mu_self.mu_santa[2], mu_self.mu_hbo.mu_to_ca[2] );
mu_self.mu_hbo.mu_to_ca[2].undefine();
mu_self.mu_hbo.mu_to_ca__update[2].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_to_idicagent__update[0].isundefined()) )
{
mu_Link__recv_fabric_packet ( mu_self.mu_idiclink[0], mu_self.mu_hbo.mu_to_idicagent[0] );
mu_self.mu_hbo.mu_to_idicagent[0].undefine();
mu_self.mu_hbo.mu_to_idicagent__update[0].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_to_idicagent__update[1].isundefined()) )
{
mu_Link__recv_fabric_packet ( mu_self.mu_idiclink[1], mu_self.mu_hbo.mu_to_idicagent[1] );
mu_self.mu_hbo.mu_to_idicagent[1].undefine();
mu_self.mu_hbo.mu_to_idicagent__update[1].undefine();
}
else
{
if ( !(mu_self.mu_hbo.mu_to_idicagent__update[2].isundefined()) )
{
mu_Link__recv_fabric_packet ( mu_self.mu_idiclink[2], mu_self.mu_hbo.mu_to_idicagent[2] );
mu_self.mu_hbo.mu_to_idicagent[2].undefine();
mu_self.mu_hbo.mu_to_idicagent__update[2].undefine();
}
else
{
if ( !(mu_self.mu_idiclink[0].mu_to_agent__update.isundefined()) )
{
mu_IDIAgent__recv_packet_from_hbo ( mu_self.mu_IDICAgent[0], mu_self.mu_idiclink[0].mu_to_agent );
mu_self.mu_idiclink[0].mu_to_agent.undefine();
mu_self.mu_idiclink[0].mu_to_agent__update.undefine();
}
else
{
if ( !(mu_self.mu_idiclink[0].mu_to_fabric__update.isundefined()) )
{
mu_HBo__recv_idi_packet ( mu_self.mu_hbo, mu_self.mu_idiclink[0].mu_to_fabric );
mu_self.mu_idiclink[0].mu_to_fabric.undefine();
mu_self.mu_idiclink[0].mu_to_fabric__update.undefine();
}
else
{
if ( !(mu_self.mu_idiclink[1].mu_to_agent__update.isundefined()) )
{
mu_IDIAgent__recv_packet_from_hbo ( mu_self.mu_IDICAgent[1], mu_self.mu_idiclink[1].mu_to_agent );
mu_self.mu_idiclink[1].mu_to_agent.undefine();
mu_self.mu_idiclink[1].mu_to_agent__update.undefine();
}
else
{
if ( !(mu_self.mu_idiclink[1].mu_to_fabric__update.isundefined()) )
{
mu_HBo__recv_idi_packet ( mu_self.mu_hbo, mu_self.mu_idiclink[1].mu_to_fabric );
mu_self.mu_idiclink[1].mu_to_fabric.undefine();
mu_self.mu_idiclink[1].mu_to_fabric__update.undefine();
}
else
{
if ( !(mu_self.mu_idiclink[2].mu_to_agent__update.isundefined()) )
{
mu_IDIAgent__recv_packet_from_hbo ( mu_self.mu_IDICAgent[2], mu_self.mu_idiclink[2].mu_to_agent );
mu_self.mu_idiclink[2].mu_to_agent.undefine();
mu_self.mu_idiclink[2].mu_to_agent__update.undefine();
}
else
{
if ( !(mu_self.mu_idiclink[2].mu_to_fabric__update.isundefined()) )
{
mu_HBo__recv_idi_packet ( mu_self.mu_hbo, mu_self.mu_idiclink[2].mu_to_fabric );
mu_self.mu_idiclink[2].mu_to_fabric.undefine();
mu_self.mu_idiclink[2].mu_to_fabric__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[0].mu_to_ca__update.isundefined()) )
{
mu_CA__recv_packet_from_hbo ( mu_self.mu_UPIAgent[0], mu_self.mu_santa[0].mu_to_ca );
mu_self.mu_santa[0].mu_to_ca.undefine();
mu_self.mu_santa[0].mu_to_ca__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[0].mu_to_core__update.isundefined()) )
{
mu_CA__recv_packet_from_santa ( mu_self.mu_UPIAgent[0], mu_self.mu_santa[0].mu_to_core );
mu_self.mu_santa[0].mu_to_core.undefine();
mu_self.mu_santa[0].mu_to_core__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[0].mu_to_ha__update.isundefined()) )
{
mu_HBo__recv_upi_packet ( mu_self.mu_hbo, mu_self.mu_santa[0].mu_to_ha );
mu_self.mu_santa[0].mu_to_ha.undefine();
mu_self.mu_santa[0].mu_to_ha__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[1].mu_to_ca__update.isundefined()) )
{
mu_CA__recv_packet_from_hbo ( mu_self.mu_UPIAgent[1], mu_self.mu_santa[1].mu_to_ca );
mu_self.mu_santa[1].mu_to_ca.undefine();
mu_self.mu_santa[1].mu_to_ca__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[1].mu_to_core__update.isundefined()) )
{
mu_CA__recv_packet_from_santa ( mu_self.mu_UPIAgent[1], mu_self.mu_santa[1].mu_to_core );
mu_self.mu_santa[1].mu_to_core.undefine();
mu_self.mu_santa[1].mu_to_core__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[1].mu_to_ha__update.isundefined()) )
{
mu_HBo__recv_upi_packet ( mu_self.mu_hbo, mu_self.mu_santa[1].mu_to_ha );
mu_self.mu_santa[1].mu_to_ha.undefine();
mu_self.mu_santa[1].mu_to_ha__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[2].mu_to_ca__update.isundefined()) )
{
mu_CA__recv_packet_from_hbo ( mu_self.mu_UPIAgent[2], mu_self.mu_santa[2].mu_to_ca );
mu_self.mu_santa[2].mu_to_ca.undefine();
mu_self.mu_santa[2].mu_to_ca__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[2].mu_to_core__update.isundefined()) )
{
mu_CA__recv_packet_from_santa ( mu_self.mu_UPIAgent[2], mu_self.mu_santa[2].mu_to_core );
mu_self.mu_santa[2].mu_to_core.undefine();
mu_self.mu_santa[2].mu_to_core__update.undefine();
}
else
{
if ( !(mu_self.mu_santa[2].mu_to_ha__update.isundefined()) )
{
mu_HBo__recv_upi_packet ( mu_self.mu_hbo, mu_self.mu_santa[2].mu_to_ha );
mu_self.mu_santa[2].mu_to_ha.undefine();
mu_self.mu_santa[2].mu_to_ha__update.undefine();
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_snoop_to_idicagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid, const mu_1_IDICAgents& mu_agent)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",88);

bool mu__boolexpr755;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr755 = FALSE ;
  else {
bool mu__boolexpr756;
  if (!(mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr756 = TRUE ;
  else {
  mu__boolexpr756 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  mu__boolexpr755 = (mu__boolexpr756) ; 
}
mu_Guard ( mu__boolexpr755 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_self.mu_tractor[mu_htid].mu_sf_lookup_done );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_self.mu_tractor[mu_htid].mu_snpneeded );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_self.mu_tractor[mu_htid].mu_idic_peer_snooped[mu_agent]) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_self.mu_tractor[mu_htid].mu_idic_snoop_target[mu_agent] );
if ( mu_guard_failed.isundefined() )
{
mu_packet.mu_opcode = mu_self.mu_tractor[mu_htid].mu_idic_snoop_opcode[mu_agent];
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_agentPacket.mu_packet = mu_packet;
if (mu_agent.isundefined())
  mu_agentPacket.mu_network_id.undefine();
else
  mu_agentPacket.mu_network_id = mu_agent;
mu_self.mu_to_idicagent[mu_agent] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_agent] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_idic_peer_snooped[mu_agent] = mu_true;
mu_self.mu_tractor[mu_htid].mu_ro_count = (mu_self.mu_tractor[mu_htid].mu_ro_count) + (1);
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_snoop_to_upiagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid, const mu_1_UPIAgents& mu_agent)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

bool mu__boolexpr757;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr757 = FALSE ;
  else {
bool mu__boolexpr758;
  if (!(mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr758 = TRUE ;
  else {
  mu__boolexpr758 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  mu__boolexpr757 = (mu__boolexpr758) ; 
}
mu_Guard ( mu__boolexpr757 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_self.mu_tractor[mu_htid].mu_sf_lookup_done );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_self.mu_tractor[mu_htid].mu_snpneeded );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_self.mu_tractor[mu_htid].mu_upi_peer_snooped[mu_agent]) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_self.mu_tractor[mu_htid].mu_upi_snoop_target[mu_agent] );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr759;
bool mu__boolexpr760;
bool mu__boolexpr761;
  if ((mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_agent]) == (mu_UPI_Opcode__SnpInvOwn)) mu__boolexpr761 = TRUE ;
  else {
  mu__boolexpr761 = ((mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_agent]) == (mu_UPI_Opcode__SnpCode)) ; 
}
  if (mu__boolexpr761) mu__boolexpr760 = TRUE ;
  else {
  mu__boolexpr760 = ((mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_agent]) == (mu_UPI_Opcode__SnpDataMig)) ; 
}
  if (mu__boolexpr760) mu__boolexpr759 = TRUE ;
  else {
  mu__boolexpr759 = ((mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_agent]) == (mu_UPI_Opcode__SnpData)) ; 
}
if ( mu__boolexpr759 )
{
mu_packet.mu_opcode = mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_agent];
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_packet.mu_crnid = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_self.mu_tractor[mu_htid].mu_upi_snoop_opcode[mu_agent];
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
}
mu_self.mu_to_ca[mu_agent] = mu_packet;
mu_self.mu_to_ca__update[mu_agent] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_upi_peer_snooped[mu_agent] = mu_true;
mu_self.mu_tractor[mu_htid].mu_ro_count = (mu_self.mu_tractor[mu_htid].mu_ro_count) + (1);
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_fastgo_response_to_idicagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",88);

bool mu__boolexpr762;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr762 = FALSE ;
  else {
bool mu__boolexpr763;
  if (!(mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr763 = TRUE ;
  else {
  mu__boolexpr763 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  mu__boolexpr762 = (mu__boolexpr763) ; 
}
mu_Guard ( mu__boolexpr762 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr764;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr764 = TRUE ;
  else {
  mu__boolexpr764 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
mu_Guard ( mu__boolexpr764 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_self.mu_tractor[mu_htid].mu_resp_sent) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_self.mu_tractor[mu_htid].mu_sf_lookup_done );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr765;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr765 = TRUE ;
  else {
  mu__boolexpr765 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
mu_Guard ( mu__boolexpr765 );
if ( mu_guard_failed.isundefined() )
{
mu_packet.mu_opcode = mu_IDI_Opcode__FastGO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_resp_sent = mu_true;
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_response_for_clrmonitor(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",88);

bool mu__boolexpr766;
bool mu__boolexpr767;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr767 = FALSE ;
  else {
  mu__boolexpr767 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
  if (!(mu__boolexpr767)) mu__boolexpr766 = FALSE ;
  else {
  mu__boolexpr766 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ClrMonitor)) ; 
}
mu_Guard ( mu__boolexpr766 );
if ( mu_guard_failed.isundefined() )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( mu_self.mu_monitor[mu_id].mu_valid )
{
bool mu__boolexpr768;
  if (!((mu_self.mu_monitor[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address))) mu__boolexpr768 = FALSE ;
  else {
  mu__boolexpr768 = ((mu_self.mu_monitor[mu_id].mu_agent_id) == (mu_self.mu_tractor[mu_htid].mu_agent_id)) ; 
}
if ( mu__boolexpr768 )
{
mu_MonitorEntry__release_monitorentry ( mu_self.mu_monitor[mu_id] );
}
}
};
};
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__I;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_TractorEntry__release_tractorentry ( mu_self.mu_tractor[mu_htid] );
}
};
/*** end procedure declaration ***/

void mu_HBo__send_early_response_to_idicagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",88);

bool mu__boolexpr769;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr769 = FALSE ;
  else {
bool mu__boolexpr770;
  if (!(mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr770 = TRUE ;
  else {
  mu__boolexpr770 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  mu__boolexpr769 = (mu__boolexpr770) ; 
}
mu_Guard ( mu__boolexpr769 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr771;
bool mu__boolexpr772;
bool mu__boolexpr773;
bool mu__boolexpr774;
bool mu__boolexpr775;
bool mu__boolexpr776;
bool mu__boolexpr777;
bool mu__boolexpr778;
bool mu__boolexpr779;
bool mu__boolexpr780;
bool mu__boolexpr781;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr781 = TRUE ;
  else {
  mu__boolexpr781 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr781) mu__boolexpr780 = TRUE ;
  else {
  mu__boolexpr780 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr780) mu__boolexpr779 = TRUE ;
  else {
  mu__boolexpr779 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr779) mu__boolexpr778 = TRUE ;
  else {
  mu__boolexpr778 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr778) mu__boolexpr777 = TRUE ;
  else {
  mu__boolexpr777 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr777) mu__boolexpr776 = TRUE ;
  else {
  mu__boolexpr776 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr776) mu__boolexpr775 = TRUE ;
  else {
  mu__boolexpr775 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr775) mu__boolexpr774 = TRUE ;
  else {
  mu__boolexpr774 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr774) mu__boolexpr773 = TRUE ;
  else {
  mu__boolexpr773 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr773) mu__boolexpr772 = TRUE ;
  else {
  mu__boolexpr772 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr772) mu__boolexpr771 = TRUE ;
  else {
  mu__boolexpr771 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
mu_Guard ( mu__boolexpr771 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr782;
bool mu__boolexpr783;
bool mu__boolexpr784;
bool mu__boolexpr785;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr785 = TRUE ;
  else {
  mu__boolexpr785 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr785) mu__boolexpr784 = TRUE ;
  else {
  mu__boolexpr784 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr784) mu__boolexpr783 = TRUE ;
  else {
  mu__boolexpr783 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (!(mu__boolexpr783)) mu__boolexpr782 = TRUE ;
  else {
bool mu__boolexpr786;
bool mu__boolexpr787;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr787 = FALSE ;
  else {
bool mu__boolexpr788;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr788 = TRUE ;
  else {
  mu__boolexpr788 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
  mu__boolexpr787 = (mu__boolexpr788) ; 
}
  if (!(mu__boolexpr787)) mu__boolexpr786 = FALSE ;
  else {
  mu__boolexpr786 = (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) ; 
}
  mu__boolexpr782 = (mu__boolexpr786) ; 
}
mu_Guard ( mu__boolexpr782 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr789;
  if (!((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoData))) mu__boolexpr789 = TRUE ;
  else {
bool mu__boolexpr790;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr790 = FALSE ;
  else {
  mu__boolexpr790 = (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) ; 
}
  mu__boolexpr789 = (mu__boolexpr790) ; 
}
mu_Guard ( mu__boolexpr789 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr791;
bool mu__boolexpr792;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr792 = TRUE ;
  else {
  mu__boolexpr792 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (!(mu__boolexpr792)) mu__boolexpr791 = TRUE ;
  else {
bool mu__boolexpr793;
bool mu__boolexpr794;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr794 = FALSE ;
  else {
bool mu__boolexpr795;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr795 = TRUE ;
  else {
  mu__boolexpr795 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
  mu__boolexpr794 = (mu__boolexpr795) ; 
}
  if (!(mu__boolexpr794)) mu__boolexpr793 = FALSE ;
  else {
  mu__boolexpr793 = (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) ; 
}
  mu__boolexpr791 = (mu__boolexpr793) ; 
}
mu_Guard ( mu__boolexpr791 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr796;
bool mu__boolexpr797;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr797 = TRUE ;
  else {
  mu__boolexpr797 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (!(mu__boolexpr797)) mu__boolexpr796 = TRUE ;
  else {
bool mu__boolexpr798;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr798 = FALSE ;
  else {
  mu__boolexpr798 = (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) ; 
}
  mu__boolexpr796 = (mu__boolexpr798) ; 
}
mu_Guard ( mu__boolexpr796 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr799;
bool mu__boolexpr800;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr800 = TRUE ;
  else {
  mu__boolexpr800 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (!(mu__boolexpr800)) mu__boolexpr799 = TRUE ;
  else {
bool mu__boolexpr801;
bool mu__boolexpr802;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr802 = FALSE ;
  else {
bool mu__boolexpr803;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr803 = TRUE ;
  else {
  mu__boolexpr803 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
  mu__boolexpr802 = (mu__boolexpr803) ; 
}
  if (!(mu__boolexpr802)) mu__boolexpr801 = FALSE ;
  else {
  mu__boolexpr801 = (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) ; 
}
  mu__boolexpr799 = (mu__boolexpr801) ; 
}
mu_Guard ( mu__boolexpr799 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr804;
  if (!((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv))) mu__boolexpr804 = TRUE ;
  else {
bool mu__boolexpr805;
bool mu__boolexpr806;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr806 = FALSE ;
  else {
bool mu__boolexpr807;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr807 = TRUE ;
  else {
  mu__boolexpr807 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
  mu__boolexpr806 = (mu__boolexpr807) ; 
}
  if (!(mu__boolexpr806)) mu__boolexpr805 = FALSE ;
  else {
  mu__boolexpr805 = (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) ; 
}
  mu__boolexpr804 = (mu__boolexpr805) ; 
}
mu_Guard ( mu__boolexpr804 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr808;
bool mu__boolexpr809;
bool mu__boolexpr810;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr810 = TRUE ;
  else {
  mu__boolexpr810 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr810) mu__boolexpr809 = TRUE ;
  else {
  mu__boolexpr809 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr809) mu__boolexpr808 = TRUE ;
  else {
  mu__boolexpr808 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
if ( mu__boolexpr808 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GoWritePull;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
mu_self.mu_tractor[mu_htid].mu_iresp_opcode = mu_IDI_Opcode__GoWritePull;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoData) )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__I;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
bool mu__boolexpr811;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr811 = TRUE ;
  else {
  mu__boolexpr811 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
if ( mu__boolexpr811 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__FastGO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
bool mu__boolexpr812;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr812 = TRUE ;
  else {
  mu__boolexpr812 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
if ( mu__boolexpr812 )
{
if ( !(mu_mufasa_mode) )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GoWritePullDrop;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
mu_self.mu_tractor[mu_htid].mu_iresp_opcode = mu_IDI_Opcode__GoWritePullDrop;
}
else
{
mu_packet.mu_opcode = mu_IDI_Opcode__GoWritePull;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
mu_self.mu_tractor[mu_htid].mu_iresp_opcode = mu_IDI_Opcode__GoWritePull;
}
}
else
{
bool mu__boolexpr813;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr813 = TRUE ;
  else {
  mu__boolexpr813 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
if ( mu__boolexpr813 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__FastGOWritePull;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv) )
{
mu_packet.mu_opcode = mu_IDI_Opcode__WritePull;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if (mu_htid.isundefined())
  mu_packet.mu_htid.undefine();
else
  mu_packet.mu_htid = mu_htid;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Guard needs to be updted");
}
}
}
}
}
}
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_resp_sent = mu_true;
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_late_response_to_idicagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",88);

/*** Variable declaration ***/
mu_1_MonitorSize mu_monid("monid",184);

/*** Variable declaration ***/
mu_0_boolean mu_flag("flag",192);

mu_Guard ( mu_self.mu_tractor[mu_htid].mu_valid );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr814;
bool mu__boolexpr815;
bool mu__boolexpr816;
bool mu__boolexpr817;
bool mu__boolexpr818;
bool mu__boolexpr819;
bool mu__boolexpr820;
bool mu__boolexpr821;
bool mu__boolexpr822;
bool mu__boolexpr823;
bool mu__boolexpr824;
bool mu__boolexpr825;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) mu__boolexpr825 = TRUE ;
  else {
  mu__boolexpr825 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr825) mu__boolexpr824 = TRUE ;
  else {
  mu__boolexpr824 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr824) mu__boolexpr823 = TRUE ;
  else {
  mu__boolexpr823 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr823) mu__boolexpr822 = TRUE ;
  else {
  mu__boolexpr822 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr822) mu__boolexpr821 = TRUE ;
  else {
  mu__boolexpr821 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr821) mu__boolexpr820 = TRUE ;
  else {
  mu__boolexpr820 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr820) mu__boolexpr819 = TRUE ;
  else {
  mu__boolexpr819 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr819) mu__boolexpr818 = TRUE ;
  else {
  mu__boolexpr818 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr818) mu__boolexpr817 = TRUE ;
  else {
  mu__boolexpr817 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr817) mu__boolexpr816 = TRUE ;
  else {
  mu__boolexpr816 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr816) mu__boolexpr815 = TRUE ;
  else {
  mu__boolexpr815 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr815) mu__boolexpr814 = TRUE ;
  else {
  mu__boolexpr814 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
mu_Guard ( mu__boolexpr814 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr826;
bool mu__boolexpr827;
bool mu__boolexpr828;
bool mu__boolexpr829;
bool mu__boolexpr830;
bool mu__boolexpr831;
bool mu__boolexpr832;
bool mu__boolexpr833;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr833 = TRUE ;
  else {
  mu__boolexpr833 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr833) mu__boolexpr832 = TRUE ;
  else {
  mu__boolexpr832 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr832) mu__boolexpr831 = TRUE ;
  else {
  mu__boolexpr831 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr831) mu__boolexpr830 = TRUE ;
  else {
  mu__boolexpr830 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr830) mu__boolexpr829 = TRUE ;
  else {
  mu__boolexpr829 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr829) mu__boolexpr828 = TRUE ;
  else {
  mu__boolexpr828 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr828) mu__boolexpr827 = TRUE ;
  else {
  mu__boolexpr827 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (!(mu__boolexpr827)) mu__boolexpr826 = TRUE ;
  else {
  mu__boolexpr826 = (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) ; 
}
mu_Guard ( mu__boolexpr826 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr834;
bool mu__boolexpr835;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr835 = TRUE ;
  else {
  mu__boolexpr835 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (!(mu__boolexpr835)) mu__boolexpr834 = TRUE ;
  else {
bool mu__boolexpr836;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_extcmp_sent))) mu__boolexpr836 = FALSE ;
  else {
  mu__boolexpr836 = (mu_self.mu_tractor[mu_htid].mu_resp_sent) ; 
}
  mu__boolexpr834 = (mu__boolexpr836) ; 
}
mu_Guard ( mu__boolexpr834 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr837;
bool mu__boolexpr838;
bool mu__boolexpr839;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr839 = TRUE ;
  else {
  mu__boolexpr839 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr839) mu__boolexpr838 = TRUE ;
  else {
  mu__boolexpr838 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (!(mu__boolexpr838)) mu__boolexpr837 = TRUE ;
  else {
bool mu__boolexpr840;
  if (!(mu_self.mu_tractor[mu_htid].mu_data_recvd)) mu__boolexpr840 = FALSE ;
  else {
  mu__boolexpr840 = (!(mu_self.mu_tractor[mu_htid].mu_extcmp_sent)) ; 
}
  mu__boolexpr837 = (mu__boolexpr840) ; 
}
mu_Guard ( mu__boolexpr837 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr841;
  if (!((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor))) mu__boolexpr841 = TRUE ;
  else {
  mu__boolexpr841 = (mu_HBo__is_available_monitor_entry( mu_self )) ; 
}
mu_Guard ( mu__boolexpr841 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr842;
  if (!(mu_self.mu_tractor[mu_htid].mu_in_mem_domain)) mu__boolexpr842 = FALSE ;
  else {
  mu__boolexpr842 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr842 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr843;
  if (!(mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded)) mu__boolexpr843 = TRUE ;
  else {
  mu__boolexpr843 = (mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done) ; 
}
mu_Guard ( mu__boolexpr843 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr844;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded)) mu__boolexpr844 = TRUE ;
  else {
  mu__boolexpr844 = (mu_self.mu_tractor[mu_htid].mu_mufasa_alloc_update_done) ; 
}
mu_Guard ( mu__boolexpr844 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr845;
  if (!(mu_disable_early_wrcmp_other)) mu__boolexpr845 = TRUE ;
  else {
bool mu__boolexpr846;
bool mu__boolexpr847;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr847 = FALSE ;
  else {
  mu__boolexpr847 = (!((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd))) ; 
}
  if (!(mu__boolexpr847)) mu__boolexpr846 = TRUE ;
  else {
bool mu__boolexpr848;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_req_sent)) mu__boolexpr848 = FALSE ;
  else {
  mu__boolexpr848 = (mu_self.mu_tractor[mu_htid].mu_mem_resp_recvd) ; 
}
  mu__boolexpr846 = (mu__boolexpr848) ; 
}
  mu__boolexpr845 = (mu__boolexpr846) ; 
}
mu_Guard ( mu__boolexpr845 );
if ( mu_guard_failed.isundefined() )
{
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny) )
{
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__S;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
bool mu__boolexpr849;
  if (!(mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent)) mu__boolexpr849 = FALSE ;
  else {
  mu__boolexpr849 = (!(mu_self.mu_tractor[mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr849 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_htid].mu_ifa_id].mu_dataE = mu_false;
}
}
else
{
bool mu__boolexpr850;
  if (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) mu__boolexpr850 = FALSE ;
  else {
  mu__boolexpr850 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr850 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__M;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__E;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
bool mu__boolexpr851;
  if (!(mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent)) mu__boolexpr851 = FALSE ;
  else {
  mu__boolexpr851 = (!(mu_self.mu_tractor[mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr851 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_htid].mu_ifa_id].mu_dataE = mu_true;
}
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn) )
{
bool mu__boolexpr852;
  if (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) mu__boolexpr852 = FALSE ;
  else {
  mu__boolexpr852 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr852 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__M;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__E;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData) )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__E;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
bool mu__boolexpr853;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) mu__boolexpr853 = TRUE ;
  else {
  mu__boolexpr853 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
if ( mu__boolexpr853 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__S;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor) )
{
mu_monid = mu_HBo__available_monitor_entry( mu_self );
mu_flag = mu_true;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( mu_self.mu_monitor[mu_id].mu_valid )
{
bool mu__boolexpr854;
  if (!((mu_self.mu_monitor[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address))) mu__boolexpr854 = FALSE ;
  else {
  mu__boolexpr854 = ((mu_self.mu_monitor[mu_id].mu_agent_id) == (mu_self.mu_tractor[mu_htid].mu_agent_id)) ; 
}
if ( mu__boolexpr854 )
{
mu_flag = mu_false;
}
}
};
};
if ( mu_flag )
{
mu_MonitorEntry__load ( mu_self.mu_monitor[mu_monid], mu_self.mu_tractor[mu_htid].mu_address, (int)mu_self.mu_tractor[mu_htid].mu_agent_id );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  two back to back set monitor without clr monitor for address:  self.tractor[htid].address  and agent:  self.tractor[htid].agent_id");
}
}
}
else
{
bool mu__boolexpr855;
bool mu__boolexpr856;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) mu__boolexpr856 = TRUE ;
  else {
  mu__boolexpr856 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr856) mu__boolexpr855 = TRUE ;
  else {
  mu__boolexpr855 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
if ( mu__boolexpr855 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__I;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
bool mu__boolexpr857;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr857 = TRUE ;
  else {
  mu__boolexpr857 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
if ( mu__boolexpr857 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__ExtCmp;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_extcmp_sent = mu_true;
}
else
{
bool mu__boolexpr858;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr858 = TRUE ;
  else {
  mu__boolexpr858 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
if ( mu__boolexpr858 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__ExtCmp;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_extcmp_sent = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv) )
{
mu_packet.mu_opcode = mu_IDI_Opcode__GO;
mu_packet.mu_cachestate = mu_CacheState__I;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_extcmp_sent = mu_true;
}
}
}
}
}
}
}
}
mu_self.mu_tractor[mu_htid].mu_resp_sent = mu_true;
}
}
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_data_to_idicagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",88);

bool mu__boolexpr859;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr859 = FALSE ;
  else {
  mu__boolexpr859 = (!(mu_self.mu_tractor[mu_htid].mu_data_sent)) ; 
}
mu_Guard ( mu__boolexpr859 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr860;
bool mu__boolexpr861;
bool mu__boolexpr862;
bool mu__boolexpr863;
bool mu__boolexpr864;
bool mu__boolexpr865;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr865 = TRUE ;
  else {
  mu__boolexpr865 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr865) mu__boolexpr864 = TRUE ;
  else {
  mu__boolexpr864 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr864) mu__boolexpr863 = TRUE ;
  else {
  mu__boolexpr863 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr863) mu__boolexpr862 = TRUE ;
  else {
  mu__boolexpr862 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr862) mu__boolexpr861 = TRUE ;
  else {
  mu__boolexpr861 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr861) mu__boolexpr860 = TRUE ;
  else {
  mu__boolexpr860 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
mu_Guard ( mu__boolexpr860 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr866;
  if (!(mu_self.mu_tractor[mu_htid].mu_in_mem_domain)) mu__boolexpr866 = FALSE ;
  else {
  mu__boolexpr866 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr866 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr867;
  if (mu_self.mu_tractor[mu_htid].mu_data_recvd) mu__boolexpr867 = TRUE ;
  else {
  mu__boolexpr867 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
mu_Guard ( mu__boolexpr867 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr868;
  if (!(mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded)) mu__boolexpr868 = TRUE ;
  else {
  mu__boolexpr868 = (mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done) ; 
}
mu_Guard ( mu__boolexpr868 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr869;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded)) mu__boolexpr869 = TRUE ;
  else {
  mu__boolexpr869 = (mu_self.mu_tractor[mu_htid].mu_mufasa_alloc_update_done) ; 
}
mu_Guard ( mu__boolexpr869 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr870;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr870 = TRUE ;
  else {
  mu__boolexpr870 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
if ( mu__boolexpr870 )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
}
else
{
bool mu__boolexpr871;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr871 = TRUE ;
  else {
  mu__boolexpr871 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
if ( mu__boolexpr871 )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if ( mu_self.mu_tractor[mu_htid].mu_wb_recvd )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
}
else
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
else
{
bool mu__boolexpr872;
bool mu__boolexpr873;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) mu__boolexpr873 = TRUE ;
  else {
  mu__boolexpr873 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr873) mu__boolexpr872 = TRUE ;
  else {
  mu__boolexpr872 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
if ( mu__boolexpr872 )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
}
}
}
mu_agentPacket.mu_packet = mu_packet;
mu_agentPacket.mu_network_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_tractor[mu_htid].mu_data_sent = mu_true;
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__release_tractor_entry(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
bool mu__boolexpr874;
bool mu__boolexpr875;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr875 = FALSE ;
  else {
  mu__boolexpr875 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
  if (!(mu__boolexpr875)) mu__boolexpr874 = FALSE ;
  else {
bool mu__boolexpr876;
bool mu__boolexpr877;
bool mu__boolexpr878;
bool mu__boolexpr879;
bool mu__boolexpr880;
bool mu__boolexpr881;
bool mu__boolexpr882;
bool mu__boolexpr883;
bool mu__boolexpr884;
bool mu__boolexpr885;
bool mu__boolexpr886;
bool mu__boolexpr887;
bool mu__boolexpr888;
bool mu__boolexpr889;
bool mu__boolexpr890;
bool mu__boolexpr891;
bool mu__boolexpr892;
bool mu__boolexpr893;
bool mu__boolexpr894;
bool mu__boolexpr895;
bool mu__boolexpr896;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr896 = TRUE ;
  else {
  mu__boolexpr896 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr896) mu__boolexpr895 = TRUE ;
  else {
  mu__boolexpr895 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr895) mu__boolexpr894 = TRUE ;
  else {
  mu__boolexpr894 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr894) mu__boolexpr893 = TRUE ;
  else {
  mu__boolexpr893 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr893) mu__boolexpr892 = TRUE ;
  else {
  mu__boolexpr892 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) ; 
}
  if (mu__boolexpr892) mu__boolexpr891 = TRUE ;
  else {
  mu__boolexpr891 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr891) mu__boolexpr890 = TRUE ;
  else {
  mu__boolexpr890 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr890) mu__boolexpr889 = TRUE ;
  else {
  mu__boolexpr889 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr889) mu__boolexpr888 = TRUE ;
  else {
  mu__boolexpr888 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr888) mu__boolexpr887 = TRUE ;
  else {
  mu__boolexpr887 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr887) mu__boolexpr886 = TRUE ;
  else {
  mu__boolexpr886 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr886) mu__boolexpr885 = TRUE ;
  else {
  mu__boolexpr885 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr885) mu__boolexpr884 = TRUE ;
  else {
  mu__boolexpr884 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr884) mu__boolexpr883 = TRUE ;
  else {
  mu__boolexpr883 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr883) mu__boolexpr882 = TRUE ;
  else {
  mu__boolexpr882 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr882) mu__boolexpr881 = TRUE ;
  else {
  mu__boolexpr881 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr881) mu__boolexpr880 = TRUE ;
  else {
  mu__boolexpr880 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr880) mu__boolexpr879 = TRUE ;
  else {
  mu__boolexpr879 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr879) mu__boolexpr878 = TRUE ;
  else {
  mu__boolexpr878 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr878) mu__boolexpr877 = TRUE ;
  else {
  mu__boolexpr877 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (mu__boolexpr877) mu__boolexpr876 = TRUE ;
  else {
  mu__boolexpr876 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  mu__boolexpr874 = (mu__boolexpr876) ; 
}
mu_Guard ( mu__boolexpr874 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr897;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr897 = TRUE ;
  else {
  mu__boolexpr897 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
mu_Guard ( mu__boolexpr897 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr898;
bool mu__boolexpr899;
bool mu__boolexpr900;
bool mu__boolexpr901;
bool mu__boolexpr902;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr902 = TRUE ;
  else {
  mu__boolexpr902 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr902) mu__boolexpr901 = TRUE ;
  else {
  mu__boolexpr901 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr901) mu__boolexpr900 = TRUE ;
  else {
  mu__boolexpr900 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr900) mu__boolexpr899 = TRUE ;
  else {
  mu__boolexpr899 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (!(mu__boolexpr899)) mu__boolexpr898 = TRUE ;
  else {
bool mu__boolexpr903;
bool mu__boolexpr904;
  if (mu_self.mu_tractor[mu_htid].mu_data_sent) mu__boolexpr904 = TRUE ;
  else {
bool mu__boolexpr905;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr905 = FALSE ;
  else {
  mu__boolexpr905 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd)) ; 
}
  mu__boolexpr904 = (mu__boolexpr905) ; 
}
  if (!(mu__boolexpr904)) mu__boolexpr903 = FALSE ;
  else {
  mu__boolexpr903 = (mu_self.mu_tractor[mu_htid].mu_resp_sent) ; 
}
  mu__boolexpr898 = (mu__boolexpr903) ; 
}
mu_Guard ( mu__boolexpr898 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr906;
bool mu__boolexpr907;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr907 = TRUE ;
  else {
  mu__boolexpr907 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  if (!(mu__boolexpr907)) mu__boolexpr906 = TRUE ;
  else {
bool mu__boolexpr908;
  if (mu_self.mu_tractor[mu_htid].mu_data_sent) mu__boolexpr908 = TRUE ;
  else {
bool mu__boolexpr909;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr909 = FALSE ;
  else {
  mu__boolexpr909 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd)) ; 
}
  mu__boolexpr908 = (mu__boolexpr909) ; 
}
  mu__boolexpr906 = (mu__boolexpr908) ; 
}
mu_Guard ( mu__boolexpr906 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr910;
bool mu__boolexpr911;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr911 = TRUE ;
  else {
  mu__boolexpr911 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (!(mu__boolexpr911)) mu__boolexpr910 = TRUE ;
  else {
bool mu__boolexpr912;
  if (!(mu_self.mu_tractor[mu_htid].mu_data_recvd)) mu__boolexpr912 = FALSE ;
  else {
  mu__boolexpr912 = (mu_self.mu_tractor[mu_htid].mu_in_mem_domain) ; 
}
  mu__boolexpr910 = (mu__boolexpr912) ; 
}
mu_Guard ( mu__boolexpr910 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr913;
bool mu__boolexpr914;
bool mu__boolexpr915;
bool mu__boolexpr916;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) mu__boolexpr916 = TRUE ;
  else {
  mu__boolexpr916 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr916) mu__boolexpr915 = TRUE ;
  else {
  mu__boolexpr915 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr915) mu__boolexpr914 = TRUE ;
  else {
  mu__boolexpr914 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (!(mu__boolexpr914)) mu__boolexpr913 = TRUE ;
  else {
  mu__boolexpr913 = (mu_self.mu_tractor[mu_htid].mu_resp_sent) ; 
}
mu_Guard ( mu__boolexpr913 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr917;
bool mu__boolexpr918;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr918 = TRUE ;
  else {
  mu__boolexpr918 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (!(mu__boolexpr918)) mu__boolexpr917 = TRUE ;
  else {
bool mu__boolexpr919;
  if (!(mu_self.mu_tractor[mu_htid].mu_extcmp_sent)) mu__boolexpr919 = FALSE ;
  else {
  mu__boolexpr919 = (mu_self.mu_tractor[mu_htid].mu_resp_sent) ; 
}
  mu__boolexpr917 = (mu__boolexpr919) ; 
}
mu_Guard ( mu__boolexpr917 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr920;
  if (!(mu_self.mu_tractor[mu_htid].mu_in_mem_domain)) mu__boolexpr920 = TRUE ;
  else {
  mu__boolexpr920 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr920 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr921;
bool mu__boolexpr922;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr922 = TRUE ;
  else {
  mu__boolexpr922 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (!(mu__boolexpr922)) mu__boolexpr921 = TRUE ;
  else {
bool mu__boolexpr923;
bool mu__boolexpr924;
  if (!(mu_self.mu_tractor[mu_htid].mu_resp_sent)) mu__boolexpr924 = FALSE ;
  else {
  mu__boolexpr924 = (mu_self.mu_tractor[mu_htid].mu_data_recvd) ; 
}
  if (!(mu__boolexpr924)) mu__boolexpr923 = FALSE ;
  else {
  mu__boolexpr923 = (mu_self.mu_tractor[mu_htid].mu_in_mem_domain) ; 
}
  mu__boolexpr921 = (mu__boolexpr923) ; 
}
mu_Guard ( mu__boolexpr921 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr925;
bool mu__boolexpr926;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) mu__boolexpr926 = TRUE ;
  else {
  mu__boolexpr926 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (!(mu__boolexpr926)) mu__boolexpr925 = TRUE ;
  else {
bool mu__boolexpr927;
  if (!(mu_self.mu_tractor[mu_htid].mu_data_recvd)) mu__boolexpr927 = FALSE ;
  else {
  mu__boolexpr927 = (mu_self.mu_tractor[mu_htid].mu_in_mem_domain) ; 
}
  mu__boolexpr925 = (mu__boolexpr927) ; 
}
mu_Guard ( mu__boolexpr925 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr928;
bool mu__boolexpr929;
bool mu__boolexpr930;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr930 = TRUE ;
  else {
  mu__boolexpr930 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr930) mu__boolexpr929 = TRUE ;
  else {
  mu__boolexpr929 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (!(mu__boolexpr929)) mu__boolexpr928 = TRUE ;
  else {
  mu__boolexpr928 = (mu_self.mu_tractor[mu_htid].mu_extcmp_sent) ; 
}
mu_Guard ( mu__boolexpr928 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr931;
bool mu__boolexpr932;
  if (!((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache))) mu__boolexpr932 = FALSE ;
  else {
  mu__boolexpr932 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  if (mu__boolexpr932) mu__boolexpr931 = TRUE ;
  else {
bool mu__boolexpr933;
  if (!(!((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)))) mu__boolexpr933 = FALSE ;
  else {
  mu__boolexpr933 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  mu__boolexpr931 = (mu__boolexpr933) ; 
}
mu_Guard ( mu__boolexpr931 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr934;
bool mu__boolexpr935;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr935 = FALSE ;
  else {
bool mu__boolexpr936;
bool mu__boolexpr937;
bool mu__boolexpr938;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)) mu__boolexpr938 = TRUE ;
  else {
  mu__boolexpr938 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
  if (mu__boolexpr938) mu__boolexpr937 = TRUE ;
  else {
  mu__boolexpr937 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)) ; 
}
  if (mu__boolexpr937) mu__boolexpr936 = TRUE ;
  else {
  mu__boolexpr936 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_P)) ; 
}
  mu__boolexpr935 = (mu__boolexpr936) ; 
}
  if (!(mu__boolexpr935)) mu__boolexpr934 = TRUE ;
  else {
bool mu__boolexpr939;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_req_sent)) mu__boolexpr939 = FALSE ;
  else {
  mu__boolexpr939 = (mu_self.mu_tractor[mu_htid].mu_mem_resp_recvd) ; 
}
  mu__boolexpr934 = (mu__boolexpr939) ; 
}
mu_Guard ( mu__boolexpr934 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr940;
bool mu__boolexpr941;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr941 = FALSE ;
  else {
  mu__boolexpr941 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd)) ; 
}
  if (!(mu__boolexpr941)) mu__boolexpr940 = TRUE ;
  else {
  mu__boolexpr940 = (mu_self.mu_tractor[mu_htid].mu_mem_req_sent) ; 
}
mu_Guard ( mu__boolexpr940 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr942;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_hit)) mu__boolexpr942 = FALSE ;
  else {
  mu__boolexpr942 = (mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way].mu_valid) ; 
}
if ( mu__boolexpr942 )
{
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way].mu_allocAvoid = mu_false;
}
if ( (mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache) )
{
if ( (mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail) == (mu_htid) )
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid = mu_false;
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head.undefine();
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
}
else
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head = mu_self.mu_tractor[mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_next_entry_m;
}
mu_TractorEntry__release_tractorentry ( mu_self.mu_tractor[mu_htid] );
}
else
{
mu_HBo__update_and_free_tractor_entry ( mu_self, mu_htid );
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_response_to_upiagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

mu_Guard ( mu_self.mu_tractor[mu_htid].mu_valid );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr943;
bool mu__boolexpr944;
bool mu__boolexpr945;
bool mu__boolexpr946;
bool mu__boolexpr947;
bool mu__boolexpr948;
bool mu__boolexpr949;
bool mu__boolexpr950;
bool mu__boolexpr951;
bool mu__boolexpr952;
bool mu__boolexpr953;
bool mu__boolexpr954;
bool mu__boolexpr955;
bool mu__boolexpr956;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr956 = TRUE ;
  else {
  mu__boolexpr956 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr956) mu__boolexpr955 = TRUE ;
  else {
  mu__boolexpr955 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr955) mu__boolexpr954 = TRUE ;
  else {
  mu__boolexpr954 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr954) mu__boolexpr953 = TRUE ;
  else {
  mu__boolexpr953 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr953) mu__boolexpr952 = TRUE ;
  else {
  mu__boolexpr952 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr952) mu__boolexpr951 = TRUE ;
  else {
  mu__boolexpr951 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr951) mu__boolexpr950 = TRUE ;
  else {
  mu__boolexpr950 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr950) mu__boolexpr949 = TRUE ;
  else {
  mu__boolexpr949 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr949) mu__boolexpr948 = TRUE ;
  else {
  mu__boolexpr948 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr948) mu__boolexpr947 = TRUE ;
  else {
  mu__boolexpr947 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr947) mu__boolexpr946 = TRUE ;
  else {
  mu__boolexpr946 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr946) mu__boolexpr945 = TRUE ;
  else {
  mu__boolexpr945 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr945) mu__boolexpr944 = TRUE ;
  else {
  mu__boolexpr944 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr944) mu__boolexpr943 = TRUE ;
  else {
  mu__boolexpr943 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
mu_Guard ( mu__boolexpr943 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_self.mu_tractor[mu_htid].mu_resp_sent) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr957;
  if (!(mu_self.mu_tractor[mu_htid].mu_in_mem_domain)) mu__boolexpr957 = FALSE ;
  else {
  mu__boolexpr957 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr957 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr958;
  if (!(mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded)) mu__boolexpr958 = TRUE ;
  else {
  mu__boolexpr958 = (mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done) ; 
}
mu_Guard ( mu__boolexpr958 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr959;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded)) mu__boolexpr959 = TRUE ;
  else {
  mu__boolexpr959 = (mu_self.mu_tractor[mu_htid].mu_mufasa_alloc_update_done) ; 
}
mu_Guard ( mu__boolexpr959 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr960;
  if (!(mu_disable_early_wrcmp_upiwb)) mu__boolexpr960 = TRUE ;
  else {
bool mu__boolexpr961;
bool mu__boolexpr962;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr962 = FALSE ;
  else {
bool mu__boolexpr963;
  if (!(!((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)))) mu__boolexpr963 = FALSE ;
  else {
  mu__boolexpr963 = (!((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd))) ; 
}
  mu__boolexpr962 = (mu__boolexpr963) ; 
}
  if (!(mu__boolexpr962)) mu__boolexpr961 = TRUE ;
  else {
bool mu__boolexpr964;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_req_sent)) mu__boolexpr964 = FALSE ;
  else {
  mu__boolexpr964 = (mu_self.mu_tractor[mu_htid].mu_mem_resp_recvd) ; 
}
  mu__boolexpr961 = (mu__boolexpr964) ; 
}
  mu__boolexpr960 = (mu__boolexpr961) ; 
}
mu_Guard ( mu__boolexpr960 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr965;
bool mu__boolexpr966;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr966 = TRUE ;
  else {
  mu__boolexpr966 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr966) mu__boolexpr965 = TRUE ;
  else {
  mu__boolexpr965 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
if ( mu__boolexpr965 )
{
mu_packet.mu_opcode = mu_UPI_Opcode__SI_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData) )
{
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
mu_packet.mu_opcode = mu_UPI_Opcode__SI_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__E_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig) )
{
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
mu_packet.mu_opcode = mu_UPI_Opcode__SI_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
bool mu__boolexpr967;
  if (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) mu__boolexpr967 = FALSE ;
  else {
  mu__boolexpr967 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr967 )
{
if ( (mu_self.mu_tractor[mu_htid].mu_resp_state) == (mu_CacheState__E) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__E_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__M_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_resp_state) == (mu_CacheState__E) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__E_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_resp_state) == (mu_CacheState__M) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__M_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn) )
{
bool mu__boolexpr968;
  if (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) mu__boolexpr968 = FALSE ;
  else {
  mu__boolexpr968 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr968 )
{
mu_packet.mu_opcode = mu_UPI_Opcode__M_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_resp_state) == (mu_CacheState__E) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__E_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_resp_state) == (mu_CacheState__M) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__M_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
}
else
{
bool mu__boolexpr969;
bool mu__boolexpr970;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) mu__boolexpr970 = TRUE ;
  else {
  mu__boolexpr970 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr970) mu__boolexpr969 = TRUE ;
  else {
  mu__boolexpr969 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
if ( mu__boolexpr969 )
{
mu_packet.mu_opcode = mu_UPI_Opcode__E_CmpO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
}
else
{
bool mu__boolexpr971;
bool mu__boolexpr972;
bool mu__boolexpr973;
bool mu__boolexpr974;
bool mu__boolexpr975;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr975 = TRUE ;
  else {
  mu__boolexpr975 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr975) mu__boolexpr974 = TRUE ;
  else {
  mu__boolexpr974 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr974) mu__boolexpr973 = TRUE ;
  else {
  mu__boolexpr973 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr973) mu__boolexpr972 = TRUE ;
  else {
  mu__boolexpr972 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr972) mu__boolexpr971 = TRUE ;
  else {
  mu__boolexpr971 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
if ( mu__boolexpr971 )
{
mu_packet.mu_opcode = mu_UPI_Opcode__CmpU;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added to send response packet for opcode  self.tractor[htid].uopcode");
}
}
}
}
}
}
mu_self.mu_tractor[mu_htid].mu_resp_sent = mu_true;
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_data_to_upiagent(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

bool mu__boolexpr976;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr976 = FALSE ;
  else {
  mu__boolexpr976 = (!(mu_self.mu_tractor[mu_htid].mu_data_sent)) ; 
}
mu_Guard ( mu__boolexpr976 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr977;
bool mu__boolexpr978;
bool mu__boolexpr979;
bool mu__boolexpr980;
bool mu__boolexpr981;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr981 = TRUE ;
  else {
  mu__boolexpr981 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr981) mu__boolexpr980 = TRUE ;
  else {
  mu__boolexpr980 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr980) mu__boolexpr979 = TRUE ;
  else {
  mu__boolexpr979 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr979) mu__boolexpr978 = TRUE ;
  else {
  mu__boolexpr978 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr978) mu__boolexpr977 = TRUE ;
  else {
  mu__boolexpr977 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
mu_Guard ( mu__boolexpr977 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr982;
  if (!(mu_self.mu_tractor[mu_htid].mu_in_mem_domain)) mu__boolexpr982 = FALSE ;
  else {
  mu__boolexpr982 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr982 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr983;
  if (mu_self.mu_tractor[mu_htid].mu_data_recvd) mu__boolexpr983 = TRUE ;
  else {
  mu__boolexpr983 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
mu_Guard ( mu__boolexpr983 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr984;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr984 = TRUE ;
  else {
  mu__boolexpr984 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) != (mu_Mem_Op__Fwd)) ; 
}
mu_Guard ( mu__boolexpr984 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr985;
  if (!(mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded)) mu__boolexpr985 = TRUE ;
  else {
  mu__boolexpr985 = (mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done) ; 
}
mu_Guard ( mu__boolexpr985 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr986;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded)) mu__boolexpr986 = TRUE ;
  else {
  mu__boolexpr986 = (mu_self.mu_tractor[mu_htid].mu_mufasa_alloc_update_done) ; 
}
mu_Guard ( mu__boolexpr986 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr987;
bool mu__boolexpr988;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr988 = FALSE ;
  else {
  mu__boolexpr988 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)) ; 
}
  if (!(mu__boolexpr988)) mu__boolexpr987 = TRUE ;
  else {
bool mu__boolexpr989;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_req_sent)) mu__boolexpr989 = FALSE ;
  else {
  mu__boolexpr989 = (mu_self.mu_tractor[mu_htid].mu_mem_resp_recvd) ; 
}
  mu__boolexpr987 = (mu__boolexpr989) ; 
}
mu_Guard ( mu__boolexpr987 );
if ( mu_guard_failed.isundefined() )
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode) )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData) )
{
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig) )
{
if ( mu_self.mu_tractor[mu_htid].mu_limit_S )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
}
else
{
bool mu__boolexpr990;
  if (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) mu__boolexpr990 = FALSE ;
  else {
  mu__boolexpr990 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr990 )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_M;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn) )
{
bool mu__boolexpr991;
  if (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) mu__boolexpr991 = FALSE ;
  else {
  mu__boolexpr991 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr991 )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_M;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv) )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur) )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
if ( mu_self.mu_tractor[mu_htid].mu_wb_recvd )
{
if ( mu_mem_abstracted )
{
mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address] = mu_self.mu_tractor[mu_htid].mu_data;
}
}
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
if ( mu_mem_abstracted )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_mem[mu_self.mu_tractor[mu_htid].mu_address];
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
}
}
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
}
}
}
}
}
mu_self.mu_tractor[mu_htid].mu_data_sent = mu_true;
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__release_tractor_uentry(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
bool mu__boolexpr992;
bool mu__boolexpr993;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr993 = FALSE ;
  else {
  mu__boolexpr993 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr993)) mu__boolexpr992 = FALSE ;
  else {
bool mu__boolexpr994;
bool mu__boolexpr995;
bool mu__boolexpr996;
bool mu__boolexpr997;
bool mu__boolexpr998;
bool mu__boolexpr999;
bool mu__boolexpr1000;
bool mu__boolexpr1001;
bool mu__boolexpr1002;
bool mu__boolexpr1003;
bool mu__boolexpr1004;
bool mu__boolexpr1005;
bool mu__boolexpr1006;
bool mu__boolexpr1007;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1007 = TRUE ;
  else {
  mu__boolexpr1007 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1007) mu__boolexpr1006 = TRUE ;
  else {
  mu__boolexpr1006 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1006) mu__boolexpr1005 = TRUE ;
  else {
  mu__boolexpr1005 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1005) mu__boolexpr1004 = TRUE ;
  else {
  mu__boolexpr1004 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1004) mu__boolexpr1003 = TRUE ;
  else {
  mu__boolexpr1003 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1003) mu__boolexpr1002 = TRUE ;
  else {
  mu__boolexpr1002 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1002) mu__boolexpr1001 = TRUE ;
  else {
  mu__boolexpr1001 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1001) mu__boolexpr1000 = TRUE ;
  else {
  mu__boolexpr1000 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr1000) mu__boolexpr999 = TRUE ;
  else {
  mu__boolexpr999 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr999) mu__boolexpr998 = TRUE ;
  else {
  mu__boolexpr998 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr998) mu__boolexpr997 = TRUE ;
  else {
  mu__boolexpr997 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr997) mu__boolexpr996 = TRUE ;
  else {
  mu__boolexpr996 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (mu__boolexpr996) mu__boolexpr995 = TRUE ;
  else {
  mu__boolexpr995 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  if (mu__boolexpr995) mu__boolexpr994 = TRUE ;
  else {
  mu__boolexpr994 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  mu__boolexpr992 = (mu__boolexpr994) ; 
}
mu_Guard ( mu__boolexpr992 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1008;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr1008 = TRUE ;
  else {
  mu__boolexpr1008 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
mu_Guard ( mu__boolexpr1008 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1009;
bool mu__boolexpr1010;
bool mu__boolexpr1011;
bool mu__boolexpr1012;
bool mu__boolexpr1013;
bool mu__boolexpr1014;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1014 = TRUE ;
  else {
  mu__boolexpr1014 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1014) mu__boolexpr1013 = TRUE ;
  else {
  mu__boolexpr1013 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1013) mu__boolexpr1012 = TRUE ;
  else {
  mu__boolexpr1012 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1012) mu__boolexpr1011 = TRUE ;
  else {
  mu__boolexpr1011 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1011) mu__boolexpr1010 = TRUE ;
  else {
  mu__boolexpr1010 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (!(mu__boolexpr1010)) mu__boolexpr1009 = TRUE ;
  else {
bool mu__boolexpr1015;
bool mu__boolexpr1016;
  if (mu_self.mu_tractor[mu_htid].mu_data_sent) mu__boolexpr1016 = TRUE ;
  else {
bool mu__boolexpr1017;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr1017 = FALSE ;
  else {
  mu__boolexpr1017 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd)) ; 
}
  mu__boolexpr1016 = (mu__boolexpr1017) ; 
}
  if (!(mu__boolexpr1016)) mu__boolexpr1015 = FALSE ;
  else {
  mu__boolexpr1015 = (mu_self.mu_tractor[mu_htid].mu_resp_sent) ; 
}
  mu__boolexpr1009 = (mu__boolexpr1015) ; 
}
mu_Guard ( mu__boolexpr1009 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1018;
bool mu__boolexpr1019;
bool mu__boolexpr1020;
bool mu__boolexpr1021;
bool mu__boolexpr1022;
bool mu__boolexpr1023;
bool mu__boolexpr1024;
bool mu__boolexpr1025;
bool mu__boolexpr1026;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) mu__boolexpr1026 = TRUE ;
  else {
  mu__boolexpr1026 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1026) mu__boolexpr1025 = TRUE ;
  else {
  mu__boolexpr1025 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1025) mu__boolexpr1024 = TRUE ;
  else {
  mu__boolexpr1024 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr1024) mu__boolexpr1023 = TRUE ;
  else {
  mu__boolexpr1023 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1023) mu__boolexpr1022 = TRUE ;
  else {
  mu__boolexpr1022 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr1022) mu__boolexpr1021 = TRUE ;
  else {
  mu__boolexpr1021 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr1021) mu__boolexpr1020 = TRUE ;
  else {
  mu__boolexpr1020 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  if (mu__boolexpr1020) mu__boolexpr1019 = TRUE ;
  else {
  mu__boolexpr1019 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (!(mu__boolexpr1019)) mu__boolexpr1018 = TRUE ;
  else {
  mu__boolexpr1018 = (mu_self.mu_tractor[mu_htid].mu_resp_sent) ; 
}
mu_Guard ( mu__boolexpr1018 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1027;
bool mu__boolexpr1028;
bool mu__boolexpr1029;
bool mu__boolexpr1030;
bool mu__boolexpr1031;
bool mu__boolexpr1032;
bool mu__boolexpr1033;
bool mu__boolexpr1034;
bool mu__boolexpr1035;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1035 = TRUE ;
  else {
  mu__boolexpr1035 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1035) mu__boolexpr1034 = TRUE ;
  else {
  mu__boolexpr1034 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1034) mu__boolexpr1033 = TRUE ;
  else {
  mu__boolexpr1033 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1033) mu__boolexpr1032 = TRUE ;
  else {
  mu__boolexpr1032 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1032) mu__boolexpr1031 = TRUE ;
  else {
  mu__boolexpr1031 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1031) mu__boolexpr1030 = TRUE ;
  else {
  mu__boolexpr1030 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1030) mu__boolexpr1029 = TRUE ;
  else {
  mu__boolexpr1029 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1029) mu__boolexpr1028 = TRUE ;
  else {
  mu__boolexpr1028 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (!(mu__boolexpr1028)) mu__boolexpr1027 = TRUE ;
  else {
  mu__boolexpr1027 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr1027 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1036;
bool mu__boolexpr1037;
bool mu__boolexpr1038;
bool mu__boolexpr1039;
bool mu__boolexpr1040;
bool mu__boolexpr1041;
bool mu__boolexpr1042;
bool mu__boolexpr1043;
bool mu__boolexpr1044;
bool mu__boolexpr1045;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1045 = TRUE ;
  else {
  mu__boolexpr1045 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1045) mu__boolexpr1044 = TRUE ;
  else {
  mu__boolexpr1044 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1044) mu__boolexpr1043 = TRUE ;
  else {
  mu__boolexpr1043 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1043) mu__boolexpr1042 = TRUE ;
  else {
  mu__boolexpr1042 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1042) mu__boolexpr1041 = TRUE ;
  else {
  mu__boolexpr1041 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1041) mu__boolexpr1040 = TRUE ;
  else {
  mu__boolexpr1040 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1040) mu__boolexpr1039 = TRUE ;
  else {
  mu__boolexpr1039 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1039) mu__boolexpr1038 = TRUE ;
  else {
  mu__boolexpr1038 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (!(mu__boolexpr1038)) mu__boolexpr1037 = FALSE ;
  else {
  mu__boolexpr1037 = (mu_self.mu_tractor[mu_htid].mu_in_mem_domain) ; 
}
  if (!(mu__boolexpr1037)) mu__boolexpr1036 = TRUE ;
  else {
  mu__boolexpr1036 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr1036 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1046;
bool mu__boolexpr1047;
bool mu__boolexpr1048;
bool mu__boolexpr1049;
bool mu__boolexpr1050;
bool mu__boolexpr1051;
bool mu__boolexpr1052;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr1052 = TRUE ;
  else {
  mu__boolexpr1052 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr1052) mu__boolexpr1051 = TRUE ;
  else {
  mu__boolexpr1051 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1051) mu__boolexpr1050 = TRUE ;
  else {
  mu__boolexpr1050 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr1050) mu__boolexpr1049 = TRUE ;
  else {
  mu__boolexpr1049 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr1049) mu__boolexpr1048 = TRUE ;
  else {
  mu__boolexpr1048 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr1048) mu__boolexpr1047 = TRUE ;
  else {
  mu__boolexpr1047 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  if (!(mu__boolexpr1047)) mu__boolexpr1046 = TRUE ;
  else {
  mu__boolexpr1046 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr1046 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1053;
bool mu__boolexpr1054;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr1054 = FALSE ;
  else {
bool mu__boolexpr1055;
bool mu__boolexpr1056;
bool mu__boolexpr1057;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)) mu__boolexpr1057 = TRUE ;
  else {
  mu__boolexpr1057 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
  if (mu__boolexpr1057) mu__boolexpr1056 = TRUE ;
  else {
  mu__boolexpr1056 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)) ; 
}
  if (mu__boolexpr1056) mu__boolexpr1055 = TRUE ;
  else {
  mu__boolexpr1055 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_P)) ; 
}
  mu__boolexpr1054 = (mu__boolexpr1055) ; 
}
  if (!(mu__boolexpr1054)) mu__boolexpr1053 = TRUE ;
  else {
bool mu__boolexpr1058;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_req_sent)) mu__boolexpr1058 = FALSE ;
  else {
  mu__boolexpr1058 = (mu_self.mu_tractor[mu_htid].mu_mem_resp_recvd) ; 
}
  mu__boolexpr1053 = (mu__boolexpr1058) ; 
}
mu_Guard ( mu__boolexpr1053 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1059;
bool mu__boolexpr1060;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr1060 = FALSE ;
  else {
  mu__boolexpr1060 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd)) ; 
}
  if (!(mu__boolexpr1060)) mu__boolexpr1059 = TRUE ;
  else {
  mu__boolexpr1059 = (mu_self.mu_tractor[mu_htid].mu_mem_req_sent) ; 
}
mu_Guard ( mu__boolexpr1059 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1061;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_hit)) mu__boolexpr1061 = FALSE ;
  else {
  mu__boolexpr1061 = (mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way].mu_valid) ; 
}
if ( mu__boolexpr1061 )
{
mu_self.mu_sf[mu_self.mu_tractor[mu_htid].mu_sf_way].mu_allocAvoid = mu_false;
}
bool mu__boolexpr1062;
bool mu__boolexpr1063;
bool mu__boolexpr1064;
bool mu__boolexpr1065;
bool mu__boolexpr1066;
bool mu__boolexpr1067;
bool mu__boolexpr1068;
bool mu__boolexpr1069;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1069 = TRUE ;
  else {
  mu__boolexpr1069 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1069) mu__boolexpr1068 = TRUE ;
  else {
  mu__boolexpr1068 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1068) mu__boolexpr1067 = TRUE ;
  else {
  mu__boolexpr1067 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1067) mu__boolexpr1066 = TRUE ;
  else {
  mu__boolexpr1066 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1066) mu__boolexpr1065 = TRUE ;
  else {
  mu__boolexpr1065 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1065) mu__boolexpr1064 = TRUE ;
  else {
  mu__boolexpr1064 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1064) mu__boolexpr1063 = TRUE ;
  else {
  mu__boolexpr1063 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1063) mu__boolexpr1062 = TRUE ;
  else {
  mu__boolexpr1062 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
if ( mu__boolexpr1062 )
{
if ( (mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail) == (mu_htid) )
{
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid = mu_false;
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head.undefine();
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
}
else
{
mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head = mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_next_entry_c;
}
bool mu__boolexpr1070;
  if (!(mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr1070 = FALSE ;
  else {
  mu__boolexpr1070 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail) == (mu_htid)) ; 
}
if ( mu__boolexpr1070 )
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid = mu_false;
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head.undefine();
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
}
else
{
bool mu__boolexpr1071;
  if (!(mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr1071 = FALSE ;
  else {
  mu__boolexpr1071 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
if ( mu__boolexpr1071 )
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head = mu_self.mu_tractor[mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_next_entry_m;
}
}
}
else
{
bool mu__boolexpr1072;
bool mu__boolexpr1073;
bool mu__boolexpr1074;
bool mu__boolexpr1075;
bool mu__boolexpr1076;
bool mu__boolexpr1077;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr1077 = TRUE ;
  else {
  mu__boolexpr1077 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr1077) mu__boolexpr1076 = TRUE ;
  else {
  mu__boolexpr1076 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1076) mu__boolexpr1075 = TRUE ;
  else {
  mu__boolexpr1075 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr1075) mu__boolexpr1074 = TRUE ;
  else {
  mu__boolexpr1074 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr1074) mu__boolexpr1073 = TRUE ;
  else {
  mu__boolexpr1073 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr1073) mu__boolexpr1072 = TRUE ;
  else {
  mu__boolexpr1072 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
if ( mu__boolexpr1072 )
{
if ( (mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail) == (mu_htid) )
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid = mu_false;
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head.undefine();
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
}
else
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head = mu_self.mu_tractor[mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_next_entry_m;
}
}
}
mu_TractorEntry__release_tractorentry ( mu_self.mu_tractor[mu_htid] );
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_fwd_response(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

bool mu__boolexpr1078;
bool mu__boolexpr1079;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr1079 = FALSE ;
  else {
  mu__boolexpr1079 = ((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr1079)) mu__boolexpr1078 = FALSE ;
  else {
  mu__boolexpr1078 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__ReqFwdCnflt)) ; 
}
mu_Guard ( mu__boolexpr1078 );
if ( mu_guard_failed.isundefined() )
{
mu_packet.mu_opcode = mu_UPI_Opcode__FwdCnfltO;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_self.mu_to_ca[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_tractor[mu_htid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
mu_TractorEntry__release_tractorentry ( mu_self.mu_tractor[mu_htid] );
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__is_available_mctentry(mu_1_HBo& mu_self)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag("flag",0);

mu_flag = mu_false;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_mct[mu_id].mu_valid) )
{
mu_flag = mu_true;
}
};
};
return mu_flag;
	Error.Error("The end of function HBo__is_available_mctentry reached without returning values.");
};
/*** end function declaration ***/

mu_1_MEM_TORID mu_HBo__available_mctentry(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_mct[mu_id].mu_valid) )
{
return mu_id;
}
};
};
	Error.Error("The end of function HBo__available_mctentry reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__send_memory_request(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_MFS_WAYS mu_way_found("way_found",0);

/*** Variable declaration ***/
mu_0_boolean mu_tag_match("tag_match",8);

/*** Variable declaration ***/
mu_1_CXMPacket mu_packet("packet",16);

/*** Variable declaration ***/
mu_1_MEM_TORID mu_mctid("mctid",88);

mu_Guard ( !(mu_mem_abstracted) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1080;
bool mu__boolexpr1081;
bool mu__boolexpr1082;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr1082 = FALSE ;
  else {
  mu__boolexpr1082 = (mu_self.mu_tractor[mu_htid].mu_in_mem_domain) ; 
}
  if (!(mu__boolexpr1082)) mu__boolexpr1081 = FALSE ;
  else {
  mu__boolexpr1081 = (mu_self.mu_tractor[mu_htid].mu_mem_op_assigned) ; 
}
  if (!(mu__boolexpr1081)) mu__boolexpr1080 = FALSE ;
  else {
  mu__boolexpr1080 = (!(mu_self.mu_tractor[mu_htid].mu_mem_req_sent)) ; 
}
mu_Guard ( mu__boolexpr1080 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1083;
  if (!(mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr1083 = FALSE ;
  else {
  mu__boolexpr1083 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr1083 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1084;
  if (!(mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded)) mu__boolexpr1084 = TRUE ;
  else {
  mu__boolexpr1084 = (mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done) ; 
}
mu_Guard ( mu__boolexpr1084 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1085;
bool mu__boolexpr1086;
bool mu__boolexpr1087;
bool mu__boolexpr1088;
bool mu__boolexpr1089;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)) mu__boolexpr1089 = TRUE ;
  else {
  mu__boolexpr1089 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
  if (mu__boolexpr1089) mu__boolexpr1088 = TRUE ;
  else {
  mu__boolexpr1088 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_P)) ; 
}
  if (mu__boolexpr1088) mu__boolexpr1087 = TRUE ;
  else {
  mu__boolexpr1087 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_E)) ; 
}
  if (!(mu__boolexpr1087)) mu__boolexpr1086 = FALSE ;
  else {
  mu__boolexpr1086 = (mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded) ; 
}
  if (!(mu__boolexpr1086)) mu__boolexpr1085 = TRUE ;
  else {
  mu__boolexpr1085 = (mu_self.mu_tractor[mu_htid].mu_mufasa_alloc_update_done) ; 
}
mu_Guard ( mu__boolexpr1085 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_HBo__is_available_mctentry( mu_self ) );
if ( mu_guard_failed.isundefined() )
{
mu_tag_match = mu_false;
{
for(int mu_way = 0; mu_way <= 0; mu_way++) {
bool mu__boolexpr1090;
  if (!(mu_self.mu_mufasa[mu_way].mu_valid)) mu__boolexpr1090 = FALSE ;
  else {
  mu__boolexpr1090 = ((mu_self.mu_mufasa[mu_way].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr1090 )
{
mu_tag_match = mu_true;
mu_way_found = mu_way;
}
};
};
if ( (mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_P) )
{
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_packet.mu_opcode = mu_CXM_Opcode__MemWrPtl;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_be = mu_self.mu_tractor[mu_htid].mu_be;
if (mu_htid.isundefined())
  mu_packet.mu_txnid.undefine();
else
  mu_packet.mu_txnid = mu_htid;
}
else
{
bool mu__boolexpr1091;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)) mu__boolexpr1091 = TRUE ;
  else {
  mu__boolexpr1091 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
if ( mu__boolexpr1091 )
{
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_packet.mu_opcode = mu_CXM_Opcode__MemWr;
mu_packet.mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_packet.mu_be = mu_self.mu_tractor[mu_htid].mu_be;
if (mu_htid.isundefined())
  mu_packet.mu_txnid.undefine();
else
  mu_packet.mu_txnid = mu_htid;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read) )
{
mu_packet.mu_opcode = mu_CXM_Opcode__MemRd;
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_packet.mu_prlrd = mu_false;
if (mu_htid.isundefined())
  mu_packet.mu_txnid.undefine();
else
  mu_packet.mu_txnid = mu_htid;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd) )
{
mu_packet.mu_opcode = mu_CXM_Opcode__MemRdFwd;
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
if (mu_htid.isundefined())
  mu_packet.mu_txnid.undefine();
else
  mu_packet.mu_txnid = mu_htid;
mu_packet.mu_rtid = mu_self.mu_tractor[mu_htid].mu_rtid;
mu_packet.mu_agent_id = mu_self.mu_tractor[mu_htid].mu_agent_id;
mu_packet.mu_protocol = mu_self.mu_tractor[mu_htid].mu_protocol;
mu_self.mu_tractor[mu_htid].mu_data_sent = mu_true;
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fill) )
{
mu_packet.mu_opcode = mu_CXM_Opcode__MemRd;
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_packet.mu_prlrd = mu_false;
if (mu_htid.isundefined())
  mu_packet.mu_txnid.undefine();
else
  mu_packet.mu_txnid = mu_htid;
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Unsupported mem opcode  self.tractor[htid].mem_op_init");
}
}
}
}
}
bool mu__boolexpr1092;
bool mu__boolexpr1093;
bool mu__boolexpr1094;
bool mu__boolexpr1095;
bool mu__boolexpr1096;
bool mu__boolexpr1097;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)) mu__boolexpr1097 = TRUE ;
  else {
  mu__boolexpr1097 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
  if (mu__boolexpr1097) mu__boolexpr1096 = TRUE ;
  else {
  mu__boolexpr1096 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)) ; 
}
  if (mu__boolexpr1096) mu__boolexpr1095 = TRUE ;
  else {
  mu__boolexpr1095 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_P)) ; 
}
  if (mu__boolexpr1095) mu__boolexpr1094 = TRUE ;
  else {
  mu__boolexpr1094 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd)) ; 
}
  if (mu__boolexpr1094) mu__boolexpr1093 = TRUE ;
  else {
  mu__boolexpr1093 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fill)) ; 
}
  if (!(mu__boolexpr1093)) mu__boolexpr1092 = FALSE ;
  else {
  mu__boolexpr1092 = (mu_self.mu_tractor[mu_htid].mu_mem_op_assigned) ; 
}
if ( mu__boolexpr1092 )
{
mu_mctid = mu_HBo__available_mctentry( mu_self );
mu_MemTOREntry__load ( mu_self.mu_mct[mu_mctid], mu_packet );
mu_self.mu_count = (mu_self.mu_count) + (1);
mu_self.mu_tractor[mu_htid].mu_mem_req_sent = mu_true;
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_memory_response(mu_1_HBo& mu_self, const mu_1_MEM_TORID& mu_index)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_CXMPacket mu_cxm_packet("cxm_packet",72);

/*** Variable declaration ***/
mu_1_IDIPacket mu_idiPacket("idiPacket",144);

/*** Variable declaration ***/
mu_1_AgentPacket mu_agentPacket("agentPacket",232);

mu_Guard ( mu_self.mu_mct[mu_index].mu_valid );
if ( mu_guard_failed.isundefined() )
{
if ( (mu_self.mu_mct[mu_index].mu_opcode) == (mu_CXM_Opcode__MemRd) )
{
if ( mu_self.mu_mct[mu_index].mu_prlrd )
{
mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_data = mu_self.mu_mem[mu_self.mu_mct[mu_index].mu_address];
if ( (mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_FOrDData) == (mu_FOrDDataState__D) )
{
bool mu__boolexpr1098;
bool mu__boolexpr1099;
  if (!(mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_valid)) mu__boolexpr1099 = FALSE ;
  else {
  mu__boolexpr1099 = (mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_prlrd_req_sent) ; 
}
  if (!(mu__boolexpr1099)) mu__boolexpr1098 = FALSE ;
  else {
  mu__boolexpr1098 = ((mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_ifa_id) == (mu_self.mu_mct[mu_index].mu_txnid)) ; 
}
if ( mu__boolexpr1098 )
{
mu_self.mu_tractor[mu_self.mu_mct[mu_index].mu_txnid].mu_prlrd_resp_recvd = mu_true;
}
mu_IFAEntry__release_ifaentry ( mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid] );
}
else
{
if ( (mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_FOrDData) == (mu_FOrDDataState__F) )
{
if ( (mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_req_protocol) == (mu_Protocol__UPI) )
{
if ( mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_dataE )
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet.mu_data = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_data;
mu_packet.mu_rtid = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_rtid;
}
else
{
mu_packet.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet.mu_data = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_data;
mu_packet.mu_rtid = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_rtid;
}
mu_self.mu_to_ca[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_agent_id] = mu_packet;
mu_self.mu_to_ca__update[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_idiPacket.mu_opcode = mu_IDI_Opcode__Data;
mu_idiPacket.mu_data = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_data;
mu_idiPacket.mu_rtid = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_rtid;
mu_agentPacket.mu_packet = mu_idiPacket;
mu_agentPacket.mu_network_id = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_agent_id;
mu_self.mu_to_idicagent[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_agent_id] = mu_agentPacket;
mu_self.mu_to_idicagent__update[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
bool mu__boolexpr1100;
bool mu__boolexpr1101;
  if (!(mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_valid)) mu__boolexpr1101 = FALSE ;
  else {
  mu__boolexpr1101 = (mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_prlrd_req_sent) ; 
}
  if (!(mu__boolexpr1101)) mu__boolexpr1100 = FALSE ;
  else {
  mu__boolexpr1100 = ((mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_ifa_id) == (mu_self.mu_mct[mu_index].mu_txnid)) ; 
}
if ( mu__boolexpr1100 )
{
mu_self.mu_tractor[mu_self.mu_mct[mu_index].mu_txnid].mu_prlrd_resp_recvd = mu_true;
}
mu_IFAEntry__release_ifaentry ( mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid] );
}
else
{
if ( !(mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_snoop_data_recvd) )
{
mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_data = mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_data;
}
mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_prlrd_resp_recvd = mu_true;
mu_self.mu_tractor[mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid].mu_tractor_id].mu_data_recvd = mu_true;
mu_IFAEntry__release_ifaentry ( mu_self.mu_ifa[mu_self.mu_mct[mu_index].mu_txnid] );
}
}
}
else
{
mu_self.mu_tractor[mu_self.mu_mct[mu_index].mu_txnid].mu_data = mu_self.mu_mem[mu_self.mu_mct[mu_index].mu_address];
mu_self.mu_tractor[mu_self.mu_mct[mu_index].mu_txnid].mu_mem_resp_recvd = mu_true;
mu_self.mu_tractor[mu_self.mu_mct[mu_index].mu_txnid].mu_data_recvd = mu_true;
}
}
else
{
if ( (mu_self.mu_mct[mu_index].mu_opcode) == (mu_CXM_Opcode__MemWr) )
{
mu_self.mu_mem[mu_self.mu_mct[mu_index].mu_address] = mu_self.mu_mct[mu_index].mu_data;
mu_self.mu_tractor[mu_self.mu_mct[mu_index].mu_txnid].mu_mem_resp_recvd = mu_true;
}
else
{
if ( (mu_self.mu_mct[mu_index].mu_opcode) == (mu_CXM_Opcode__MemWrPtl) )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_mct[mu_index].mu_be[mu_word] )
{
mu_self.mu_mem[mu_self.mu_mct[mu_index].mu_address][mu_word] = mu_self.mu_mct[mu_index].mu_data[mu_word];
}
};
};
mu_self.mu_tractor[mu_self.mu_mct[mu_index].mu_txnid].mu_mem_resp_recvd = mu_true;
}
else
{
if ( (mu_self.mu_mct[mu_index].mu_opcode) == (mu_CXM_Opcode__MemRdFwd) )
{
if ( (mu_self.mu_mct[mu_index].mu_protocol) == (mu_Protocol__IDIC) )
{
mu_cxm_packet.mu_rtid = mu_self.mu_mct[mu_index].mu_rtid;
mu_cxm_packet.mu_data = mu_self.mu_mem[mu_self.mu_mct[mu_index].mu_address];
mu_cxm_packet.mu_opcode = mu_CXM_Opcode__MemData;
mu_self.mu_from_mc_to_idiclink[mu_self.mu_mct[mu_index].mu_agent_id] = mu_cxm_packet;
mu_self.mu_from_mc_to_idiclink__update[mu_self.mu_mct[mu_index].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_cxm_packet.mu_rtid = mu_self.mu_mct[mu_index].mu_rtid;
mu_cxm_packet.mu_data = mu_self.mu_mem[mu_self.mu_mct[mu_index].mu_address];
mu_cxm_packet.mu_opcode = mu_CXM_Opcode__MemData;
mu_self.mu_from_mc_to_santa[mu_self.mu_mct[mu_index].mu_agent_id] = mu_cxm_packet;
mu_self.mu_from_mc_to_santa__update[mu_self.mu_mct[mu_index].mu_agent_id] = mu_true;
mu_rbw_port_transfer (  );
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  response not added for opcode  self.mct[index].opcode");
}
}
}
}
{
int mu__ub1102 = ((mu_self.mu_count) - (1)) - (1);
for (int mu_id = mu_index; mu_id <= mu__ub1102; mu_id += 1) {
mu_self.mu_mct[mu_id] = mu_self.mu_mct[(mu_id) + (1)];
};
};
mu_MemTOREntry__reset ( mu_self.mu_mct[(mu_self.mu_count) - (1)] );
mu_self.mu_count = (mu_self.mu_count) - (1);
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__request_requires_early_mufasa_lookup(mu_1_HBo& mu_self,const mu_1_HTID& mu_htid)
{
bool mu__boolexpr1103;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1103 = FALSE ;
  else {
bool mu__boolexpr1104;
bool mu__boolexpr1105;
bool mu__boolexpr1106;
bool mu__boolexpr1107;
bool mu__boolexpr1108;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1108 = TRUE ;
  else {
  mu__boolexpr1108 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr1108) mu__boolexpr1107 = TRUE ;
  else {
  mu__boolexpr1107 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1107) mu__boolexpr1106 = TRUE ;
  else {
  mu__boolexpr1106 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1106) mu__boolexpr1105 = TRUE ;
  else {
  mu__boolexpr1105 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1105) mu__boolexpr1104 = TRUE ;
  else {
  mu__boolexpr1104 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr1103 = (mu__boolexpr1104) ; 
}
if ( mu__boolexpr1103 )
{
return mu_true;
}
else
{
bool mu__boolexpr1109;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1109 = FALSE ;
  else {
bool mu__boolexpr1110;
bool mu__boolexpr1111;
bool mu__boolexpr1112;
bool mu__boolexpr1113;
bool mu__boolexpr1114;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1114 = TRUE ;
  else {
  mu__boolexpr1114 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1114) mu__boolexpr1113 = TRUE ;
  else {
  mu__boolexpr1113 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1113) mu__boolexpr1112 = TRUE ;
  else {
  mu__boolexpr1112 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr1112) mu__boolexpr1111 = TRUE ;
  else {
  mu__boolexpr1111 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1111) mu__boolexpr1110 = TRUE ;
  else {
  mu__boolexpr1110 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  mu__boolexpr1109 = (mu__boolexpr1110) ; 
}
if ( mu__boolexpr1109 )
{
return mu_true;
}
}
return mu_false;
	Error.Error("The end of function HBo__request_requires_early_mufasa_lookup reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_HBo__request_with_goM_intention(mu_1_HBo& mu_self,const mu_1_HTID& mu_htid)
{
bool mu__boolexpr1115;
bool mu__boolexpr1116;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1116 = FALSE ;
  else {
bool mu__boolexpr1117;
bool mu__boolexpr1118;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) mu__boolexpr1118 = TRUE ;
  else {
  mu__boolexpr1118 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1118) mu__boolexpr1117 = TRUE ;
  else {
  mu__boolexpr1117 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr1116 = (mu__boolexpr1117) ; 
}
  if (!(mu__boolexpr1116)) mu__boolexpr1115 = FALSE ;
  else {
  mu__boolexpr1115 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr1115 )
{
return mu_true;
}
else
{
bool mu__boolexpr1119;
bool mu__boolexpr1120;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1120 = FALSE ;
  else {
bool mu__boolexpr1121;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr1121 = TRUE ;
  else {
  mu__boolexpr1121 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  mu__boolexpr1120 = (mu__boolexpr1121) ; 
}
  if (!(mu__boolexpr1120)) mu__boolexpr1119 = FALSE ;
  else {
  mu__boolexpr1119 = (!(mu_dont_go_m)) ; 
}
if ( mu__boolexpr1119 )
{
return mu_true;
}
}
return mu_false;
	Error.Error("The end of function HBo__request_with_goM_intention reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__move_to_memory_domain(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
bool mu__boolexpr1122;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr1122 = FALSE ;
  else {
  mu__boolexpr1122 = (!(mu_self.mu_tractor[mu_htid].mu_in_mem_domain)) ; 
}
mu_Guard ( mu__boolexpr1122 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1123;
bool mu__boolexpr1124;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1124 = FALSE ;
  else {
bool mu__boolexpr1125;
bool mu__boolexpr1126;
bool mu__boolexpr1127;
bool mu__boolexpr1128;
bool mu__boolexpr1129;
bool mu__boolexpr1130;
bool mu__boolexpr1131;
bool mu__boolexpr1132;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1132 = TRUE ;
  else {
  mu__boolexpr1132 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1132) mu__boolexpr1131 = TRUE ;
  else {
  mu__boolexpr1131 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1131) mu__boolexpr1130 = TRUE ;
  else {
  mu__boolexpr1130 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr1130) mu__boolexpr1129 = TRUE ;
  else {
  mu__boolexpr1129 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr1129) mu__boolexpr1128 = TRUE ;
  else {
  mu__boolexpr1128 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1128) mu__boolexpr1127 = TRUE ;
  else {
  mu__boolexpr1127 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1127) mu__boolexpr1126 = TRUE ;
  else {
  mu__boolexpr1126 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr1126) mu__boolexpr1125 = TRUE ;
  else {
  mu__boolexpr1125 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  mu__boolexpr1124 = (mu__boolexpr1125) ; 
}
  if (!(mu__boolexpr1124)) mu__boolexpr1123 = TRUE ;
  else {
bool mu__boolexpr1133;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr1133 = FALSE ;
  else {
bool mu__boolexpr1134;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr1134 = TRUE ;
  else {
  mu__boolexpr1134 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
  mu__boolexpr1133 = (mu__boolexpr1134) ; 
}
  mu__boolexpr1123 = (mu__boolexpr1133) ; 
}
mu_Guard ( mu__boolexpr1123 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1135;
bool mu__boolexpr1136;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1136 = FALSE ;
  else {
bool mu__boolexpr1137;
bool mu__boolexpr1138;
bool mu__boolexpr1139;
bool mu__boolexpr1140;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1140 = TRUE ;
  else {
  mu__boolexpr1140 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr1140) mu__boolexpr1139 = TRUE ;
  else {
  mu__boolexpr1139 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1139) mu__boolexpr1138 = TRUE ;
  else {
  mu__boolexpr1138 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1138) mu__boolexpr1137 = TRUE ;
  else {
  mu__boolexpr1137 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  mu__boolexpr1136 = (mu__boolexpr1137) ; 
}
  if (!(mu__boolexpr1136)) mu__boolexpr1135 = TRUE ;
  else {
  mu__boolexpr1135 = (mu_self.mu_tractor[mu_htid].mu_data_recvd) ; 
}
mu_Guard ( mu__boolexpr1135 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1141;
bool mu__boolexpr1142;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1142 = FALSE ;
  else {
bool mu__boolexpr1143;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) mu__boolexpr1143 = TRUE ;
  else {
  mu__boolexpr1143 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  mu__boolexpr1142 = (mu__boolexpr1143) ; 
}
  if (!(mu__boolexpr1142)) mu__boolexpr1141 = TRUE ;
  else {
bool mu__boolexpr1144;
bool mu__boolexpr1145;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr1145 = FALSE ;
  else {
bool mu__boolexpr1146;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr1146 = TRUE ;
  else {
  mu__boolexpr1146 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
  mu__boolexpr1145 = (mu__boolexpr1146) ; 
}
  if (!(mu__boolexpr1145)) mu__boolexpr1144 = FALSE ;
  else {
  mu__boolexpr1144 = (mu_self.mu_tractor[mu_htid].mu_resp_sent) ; 
}
  mu__boolexpr1141 = (mu__boolexpr1144) ; 
}
mu_Guard ( mu__boolexpr1141 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1147;
bool mu__boolexpr1148;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1148 = FALSE ;
  else {
bool mu__boolexpr1149;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1149 = TRUE ;
  else {
  mu__boolexpr1149 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  mu__boolexpr1148 = (mu__boolexpr1149) ; 
}
  if (!(mu__boolexpr1148)) mu__boolexpr1147 = TRUE ;
  else {
  mu__boolexpr1147 = (mu_self.mu_tractor[mu_htid].mu_data_recvd) ; 
}
mu_Guard ( mu__boolexpr1147 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1150;
bool mu__boolexpr1151;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1151 = FALSE ;
  else {
bool mu__boolexpr1152;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) mu__boolexpr1152 = TRUE ;
  else {
  mu__boolexpr1152 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  mu__boolexpr1151 = (mu__boolexpr1152) ; 
}
  if (!(mu__boolexpr1151)) mu__boolexpr1150 = TRUE ;
  else {
  mu__boolexpr1150 = (mu_self.mu_tractor[mu_htid].mu_data_recvd) ; 
}
mu_Guard ( mu__boolexpr1150 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1153;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1153 = TRUE ;
  else {
bool mu__boolexpr1154;
  if (!(!((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ClrMonitor)))) mu__boolexpr1154 = FALSE ;
  else {
  mu__boolexpr1154 = (!((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoData))) ; 
}
  mu__boolexpr1153 = (mu__boolexpr1154) ; 
}
mu_Guard ( mu__boolexpr1153 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1155;
bool mu__boolexpr1156;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1156 = FALSE ;
  else {
bool mu__boolexpr1157;
bool mu__boolexpr1158;
bool mu__boolexpr1159;
bool mu__boolexpr1160;
bool mu__boolexpr1161;
bool mu__boolexpr1162;
bool mu__boolexpr1163;
bool mu__boolexpr1164;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1164 = TRUE ;
  else {
  mu__boolexpr1164 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr1164) mu__boolexpr1163 = TRUE ;
  else {
  mu__boolexpr1163 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1163) mu__boolexpr1162 = TRUE ;
  else {
  mu__boolexpr1162 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1162) mu__boolexpr1161 = TRUE ;
  else {
  mu__boolexpr1161 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1161) mu__boolexpr1160 = TRUE ;
  else {
  mu__boolexpr1160 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1160) mu__boolexpr1159 = TRUE ;
  else {
  mu__boolexpr1159 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1159) mu__boolexpr1158 = TRUE ;
  else {
  mu__boolexpr1158 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1158) mu__boolexpr1157 = TRUE ;
  else {
  mu__boolexpr1157 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  mu__boolexpr1156 = (mu__boolexpr1157) ; 
}
  if (!(mu__boolexpr1156)) mu__boolexpr1155 = TRUE ;
  else {
bool mu__boolexpr1165;
  if (!(mu_self.mu_tractor[mu_htid].mu_sf_lookup_done)) mu__boolexpr1165 = FALSE ;
  else {
bool mu__boolexpr1166;
  if (mu_self.mu_tractor[mu_htid].mu_snpdone) mu__boolexpr1166 = TRUE ;
  else {
  mu__boolexpr1166 = (!(mu_self.mu_tractor[mu_htid].mu_snpneeded)) ; 
}
  mu__boolexpr1165 = (mu__boolexpr1166) ; 
}
  mu__boolexpr1155 = (mu__boolexpr1165) ; 
}
mu_Guard ( mu__boolexpr1155 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1167;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1167 = TRUE ;
  else {
  mu__boolexpr1167 = (!((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__ReqFwdCnflt))) ; 
}
mu_Guard ( mu__boolexpr1167 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1168;
  if (!(mu_mufasa_mode)) mu__boolexpr1168 = TRUE ;
  else {
bool mu__boolexpr1169;
  if (!(mu_HBo__request_requires_early_mufasa_lookup( mu_self, mu_htid ))) mu__boolexpr1169 = TRUE ;
  else {
  mu__boolexpr1169 = (mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done) ; 
}
  mu__boolexpr1168 = (mu__boolexpr1169) ; 
}
mu_Guard ( mu__boolexpr1168 );
if ( mu_guard_failed.isundefined() )
{
if ( mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid )
{
if (mu_htid.isundefined())
  mu_self.mu_tractor[mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail].mu_next_entry_m.undefine();
else
  mu_self.mu_tractor[mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail].mu_next_entry_m = mu_htid;
if (mu_htid.isundefined())
  mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
else
  mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail = mu_htid;
}
else
{
mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid = mu_true;
if (mu_htid.isundefined())
  mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head.undefine();
else
  mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head = mu_htid;
if (mu_htid.isundefined())
  mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail.undefine();
else
  mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_tail = mu_htid;
}
mu_self.mu_tractor[mu_htid].mu_in_mem_domain = mu_true;
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC) )
{
bool mu__boolexpr1170;
bool mu__boolexpr1171;
bool mu__boolexpr1172;
bool mu__boolexpr1173;
bool mu__boolexpr1174;
bool mu__boolexpr1175;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1175 = TRUE ;
  else {
  mu__boolexpr1175 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1175) mu__boolexpr1174 = TRUE ;
  else {
  mu__boolexpr1174 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1174) mu__boolexpr1173 = TRUE ;
  else {
  mu__boolexpr1173 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr1173) mu__boolexpr1172 = TRUE ;
  else {
  mu__boolexpr1172 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1172) mu__boolexpr1171 = TRUE ;
  else {
  mu__boolexpr1171 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  if (mu__boolexpr1171) mu__boolexpr1170 = TRUE ;
  else {
  mu__boolexpr1170 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
if ( mu__boolexpr1170 )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) )
{
bool mu__boolexpr1176;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent))) mu__boolexpr1176 = FALSE ;
  else {
  mu__boolexpr1176 = (!(mu_self.mu_tractor[mu_htid].mu_data_sent)) ; 
}
if ( mu__boolexpr1176 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
if ( !(mu_self.mu_tractor[mu_htid].mu_alloc_hint) )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Fwd;
}
else
{
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Read;
}
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent )
{
if ( mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Read;
}
}
}
}
else
{
bool mu__boolexpr1177;
bool mu__boolexpr1178;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1178 = TRUE ;
  else {
  mu__boolexpr1178 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  if (!(mu__boolexpr1178)) mu__boolexpr1177 = FALSE ;
  else {
  mu__boolexpr1177 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
if ( mu__boolexpr1177 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
else
{
bool mu__boolexpr1179;
bool mu__boolexpr1180;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) mu__boolexpr1180 = TRUE ;
  else {
  mu__boolexpr1180 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (!(mu__boolexpr1180)) mu__boolexpr1179 = FALSE ;
  else {
  mu__boolexpr1179 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
if ( mu__boolexpr1179 )
{
bool mu__boolexpr1181;
  if (mu_dont_go_m) mu__boolexpr1181 = TRUE ;
  else {
  mu__boolexpr1181 = (mu_self.mu_tractor[mu_htid].mu_limit_S) ; 
}
if ( mu__boolexpr1181 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
}
}
else
{
bool mu__boolexpr1182;
bool mu__boolexpr1183;
bool mu__boolexpr1184;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) mu__boolexpr1184 = TRUE ;
  else {
  mu__boolexpr1184 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1184) mu__boolexpr1183 = TRUE ;
  else {
  mu__boolexpr1183 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (!(mu__boolexpr1183)) mu__boolexpr1182 = FALSE ;
  else {
  mu__boolexpr1182 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
if ( mu__boolexpr1182 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
}
}
}
}
else
{
bool mu__boolexpr1185;
bool mu__boolexpr1186;
bool mu__boolexpr1187;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) mu__boolexpr1187 = TRUE ;
  else {
  mu__boolexpr1187 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1187) mu__boolexpr1186 = TRUE ;
  else {
  mu__boolexpr1186 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr1186) mu__boolexpr1185 = TRUE ;
  else {
  mu__boolexpr1185 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
if ( mu__boolexpr1185 )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
}
else
{
bool mu__boolexpr1188;
bool mu__boolexpr1189;
bool mu__boolexpr1190;
bool mu__boolexpr1191;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1191 = TRUE ;
  else {
  mu__boolexpr1191 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr1191) mu__boolexpr1190 = TRUE ;
  else {
  mu__boolexpr1190 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1190) mu__boolexpr1189 = TRUE ;
  else {
  mu__boolexpr1189 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1189) mu__boolexpr1188 = TRUE ;
  else {
  mu__boolexpr1188 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
if ( mu__boolexpr1188 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Write_M;
}
else
{
bool mu__boolexpr1192;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1192 = TRUE ;
  else {
  mu__boolexpr1192 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
if ( mu__boolexpr1192 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Write_E;
}
else
{
bool mu__boolexpr1193;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr1193 = TRUE ;
  else {
  mu__boolexpr1193 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
if ( mu__boolexpr1193 )
{
if ( mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Write_M;
}
else
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Write_P;
}
}
}
}
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI) )
{
bool mu__boolexpr1194;
bool mu__boolexpr1195;
bool mu__boolexpr1196;
bool mu__boolexpr1197;
bool mu__boolexpr1198;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1198 = TRUE ;
  else {
  mu__boolexpr1198 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr1198) mu__boolexpr1197 = TRUE ;
  else {
  mu__boolexpr1197 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1197) mu__boolexpr1196 = TRUE ;
  else {
  mu__boolexpr1196 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1196) mu__boolexpr1195 = TRUE ;
  else {
  mu__boolexpr1195 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1195) mu__boolexpr1194 = TRUE ;
  else {
  mu__boolexpr1194 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
if ( mu__boolexpr1194 )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) )
{
bool mu__boolexpr1199;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent))) mu__boolexpr1199 = FALSE ;
  else {
  mu__boolexpr1199 = (!(mu_self.mu_tractor[mu_htid].mu_data_sent)) ; 
}
if ( mu__boolexpr1199 )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_alloc_hint) )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Fwd;
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
}
else
{
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Read;
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
}
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent )
{
if ( mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Read;
}
}
}
}
else
{
bool mu__boolexpr1200;
  if (!((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur))) mu__boolexpr1200 = FALSE ;
  else {
  mu__boolexpr1200 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
if ( mu__boolexpr1200 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
else
{
bool mu__boolexpr1201;
bool mu__boolexpr1202;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) mu__boolexpr1202 = TRUE ;
  else {
  mu__boolexpr1202 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (!(mu__boolexpr1202)) mu__boolexpr1201 = FALSE ;
  else {
  mu__boolexpr1201 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
if ( mu__boolexpr1201 )
{
bool mu__boolexpr1203;
  if (mu_dont_go_m) mu__boolexpr1203 = TRUE ;
  else {
  mu__boolexpr1203 = (mu_self.mu_tractor[mu_htid].mu_limit_S) ; 
}
if ( mu__boolexpr1203 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
else
{
if ( mu_self.mu_tractor[mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
}
}
else
{
bool mu__boolexpr1204;
bool mu__boolexpr1205;
bool mu__boolexpr1206;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1206 = TRUE ;
  else {
  mu__boolexpr1206 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1206) mu__boolexpr1205 = TRUE ;
  else {
  mu__boolexpr1205 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (!(mu__boolexpr1205)) mu__boolexpr1204 = FALSE ;
  else {
  mu__boolexpr1204 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
if ( mu__boolexpr1204 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
}
}
}
}
else
{
bool mu__boolexpr1207;
bool mu__boolexpr1208;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) mu__boolexpr1208 = TRUE ;
  else {
  mu__boolexpr1208 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1208) mu__boolexpr1207 = TRUE ;
  else {
  mu__boolexpr1207 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
if ( mu__boolexpr1207 )
{
bool mu__boolexpr1209;
  if (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) mu__boolexpr1209 = FALSE ;
  else {
  mu__boolexpr1209 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
if ( mu__boolexpr1209 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_true;
mu_self.mu_tractor[mu_htid].mu_mem_op_init = mu_Mem_Op__Snoop_M;
}
}
}
}
}
if ( mu_mufasa_mode )
{
bool mu__boolexpr1210;
bool mu__boolexpr1211;
bool mu__boolexpr1212;
bool mu__boolexpr1213;
bool mu__boolexpr1214;
bool mu__boolexpr1215;
bool mu__boolexpr1216;
  if (mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded) mu__boolexpr1216 = TRUE ;
  else {
bool mu__boolexpr1217;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1217 = FALSE ;
  else {
bool mu__boolexpr1218;
bool mu__boolexpr1219;
bool mu__boolexpr1220;
bool mu__boolexpr1221;
bool mu__boolexpr1222;
bool mu__boolexpr1223;
bool mu__boolexpr1224;
bool mu__boolexpr1225;
bool mu__boolexpr1226;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1226 = TRUE ;
  else {
  mu__boolexpr1226 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr1226) mu__boolexpr1225 = TRUE ;
  else {
  mu__boolexpr1225 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr1225) mu__boolexpr1224 = TRUE ;
  else {
  mu__boolexpr1224 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1224) mu__boolexpr1223 = TRUE ;
  else {
  mu__boolexpr1223 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1223) mu__boolexpr1222 = TRUE ;
  else {
  mu__boolexpr1222 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr1222) mu__boolexpr1221 = TRUE ;
  else {
  mu__boolexpr1221 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1221) mu__boolexpr1220 = TRUE ;
  else {
  mu__boolexpr1220 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1220) mu__boolexpr1219 = TRUE ;
  else {
  mu__boolexpr1219 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1219) mu__boolexpr1218 = TRUE ;
  else {
  mu__boolexpr1218 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  mu__boolexpr1217 = (mu__boolexpr1218) ; 
}
  mu__boolexpr1216 = (mu__boolexpr1217) ; 
}
  if (mu__boolexpr1216) mu__boolexpr1215 = TRUE ;
  else {
bool mu__boolexpr1227;
bool mu__boolexpr1228;
bool mu__boolexpr1229;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1229 = FALSE ;
  else {
bool mu__boolexpr1230;
bool mu__boolexpr1231;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) mu__boolexpr1231 = TRUE ;
  else {
  mu__boolexpr1231 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1231) mu__boolexpr1230 = TRUE ;
  else {
  mu__boolexpr1230 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  mu__boolexpr1229 = (mu__boolexpr1230) ; 
}
  if (!(mu__boolexpr1229)) mu__boolexpr1228 = FALSE ;
  else {
  mu__boolexpr1228 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
  if (!(mu__boolexpr1228)) mu__boolexpr1227 = FALSE ;
  else {
  mu__boolexpr1227 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1215 = (mu__boolexpr1227) ; 
}
  if (mu__boolexpr1215) mu__boolexpr1214 = TRUE ;
  else {
bool mu__boolexpr1232;
bool mu__boolexpr1233;
bool mu__boolexpr1234;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1234 = FALSE ;
  else {
bool mu__boolexpr1235;
bool mu__boolexpr1236;
bool mu__boolexpr1237;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) mu__boolexpr1237 = TRUE ;
  else {
  mu__boolexpr1237 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1237) mu__boolexpr1236 = TRUE ;
  else {
  mu__boolexpr1236 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr1236) mu__boolexpr1235 = TRUE ;
  else {
  mu__boolexpr1235 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  mu__boolexpr1234 = (mu__boolexpr1235) ; 
}
  if (!(mu__boolexpr1234)) mu__boolexpr1233 = FALSE ;
  else {
  mu__boolexpr1233 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
  if (!(mu__boolexpr1233)) mu__boolexpr1232 = FALSE ;
  else {
  mu__boolexpr1232 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1214 = (mu__boolexpr1232) ; 
}
  if (mu__boolexpr1214) mu__boolexpr1213 = TRUE ;
  else {
bool mu__boolexpr1238;
bool mu__boolexpr1239;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1239 = FALSE ;
  else {
  mu__boolexpr1239 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
  if (!(mu__boolexpr1239)) mu__boolexpr1238 = FALSE ;
  else {
  mu__boolexpr1238 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1213 = (mu__boolexpr1238) ; 
}
  if (mu__boolexpr1213) mu__boolexpr1212 = TRUE ;
  else {
bool mu__boolexpr1240;
bool mu__boolexpr1241;
bool mu__boolexpr1242;
bool mu__boolexpr1243;
bool mu__boolexpr1244;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1244 = FALSE ;
  else {
  mu__boolexpr1244 = (mu_self.mu_tractor[mu_htid].mu_mfs_hit) ; 
}
  if (!(mu__boolexpr1244)) mu__boolexpr1243 = FALSE ;
  else {
bool mu__boolexpr1245;
  if ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__E)) mu__boolexpr1245 = TRUE ;
  else {
  mu__boolexpr1245 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
  mu__boolexpr1243 = (mu__boolexpr1245) ; 
}
  if (!(mu__boolexpr1243)) mu__boolexpr1242 = FALSE ;
  else {
  mu__boolexpr1242 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
  if (!(mu__boolexpr1242)) mu__boolexpr1241 = FALSE ;
  else {
  mu__boolexpr1241 = (mu_self.mu_tractor[mu_htid].mu_mem_op_assigned) ; 
}
  if (!(mu__boolexpr1241)) mu__boolexpr1240 = FALSE ;
  else {
  mu__boolexpr1240 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
  mu__boolexpr1212 = (mu__boolexpr1240) ; 
}
  if (mu__boolexpr1212) mu__boolexpr1211 = TRUE ;
  else {
bool mu__boolexpr1246;
bool mu__boolexpr1247;
bool mu__boolexpr1248;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1248 = FALSE ;
  else {
  mu__boolexpr1248 = (mu_self.mu_tractor[mu_htid].mu_mfs_hit) ; 
}
  if (!(mu__boolexpr1248)) mu__boolexpr1247 = FALSE ;
  else {
  mu__boolexpr1247 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
  if (!(mu__boolexpr1247)) mu__boolexpr1246 = FALSE ;
  else {
  mu__boolexpr1246 = (mu_HBo__request_with_goM_intention( mu_self, mu_htid )) ; 
}
  mu__boolexpr1211 = (mu__boolexpr1246) ; 
}
  if (mu__boolexpr1211) mu__boolexpr1210 = TRUE ;
  else {
  mu__boolexpr1210 = (mu_self.mu_tractor[mu_htid].mu_mem_op_assigned) ; 
}
if ( mu__boolexpr1210 )
{
mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded = mu_true;
if ( mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent )
{
bool mu__boolexpr1249;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_prlrd_resp_recvd))) mu__boolexpr1249 = FALSE ;
  else {
  mu__boolexpr1249 = ((mu_self.mu_ifa[mu_self.mu_tractor[mu_htid].mu_ifa_id].mu_FOrDData) == (mu_FOrDDataState__F)) ; 
}
if ( mu__boolexpr1249 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__Un;
if ( mu_self.mu_tractor[mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_htid].mu_data_sent = mu_false;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__late_mufasa_lookup_phase(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_MFS_WAYS mu_way("way",0);

/*** Variable declaration ***/
mu_0_boolean mu_way_found("way_found",8);

bool mu__boolexpr1250;
bool mu__boolexpr1251;
bool mu__boolexpr1252;
bool mu__boolexpr1253;
bool mu__boolexpr1254;
  if (!(mu_mufasa_mode)) mu__boolexpr1254 = FALSE ;
  else {
  mu__boolexpr1254 = (mu_self.mu_tractor[mu_htid].mu_valid) ; 
}
  if (!(mu__boolexpr1254)) mu__boolexpr1253 = FALSE ;
  else {
  mu__boolexpr1253 = (mu_self.mu_tractor[mu_htid].mu_in_mem_domain) ; 
}
  if (!(mu__boolexpr1253)) mu__boolexpr1252 = FALSE ;
  else {
  mu__boolexpr1252 = (!(mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done)) ; 
}
  if (!(mu__boolexpr1252)) mu__boolexpr1251 = FALSE ;
  else {
  mu__boolexpr1251 = (mu_self.mu_tractor[mu_htid].mu_lateMfsLkupNeeded) ; 
}
  if (!(mu__boolexpr1251)) mu__boolexpr1250 = FALSE ;
  else {
  mu__boolexpr1250 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr1250 );
if ( mu_guard_failed.isundefined() )
{
mu_way_found = mu_false;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1255;
  if (!(mu_self.mu_mufasa[mu_id].mu_valid)) mu__boolexpr1255 = FALSE ;
  else {
  mu__boolexpr1255 = ((mu_self.mu_mufasa[mu_id].mu_address) == (mu_self.mu_tractor[mu_htid].mu_address)) ; 
}
if ( mu__boolexpr1255 )
{
mu_way_found = mu_true;
mu_way = mu_id;
}
};
};
if ( mu_way_found )
{
mu_self.mu_tractor[mu_htid].mu_mfs_hit = mu_true;
mu_self.mu_tractor[mu_htid].mu_mfs_state = mu_self.mu_mufasa[mu_way].mu_state;
if (mu_way.isundefined())
  mu_self.mu_tractor[mu_htid].mu_mfs_way.undefine();
else
  mu_self.mu_tractor[mu_htid].mu_mfs_way = mu_way;
bool mu__boolexpr1256;
  if ((mu_self.mu_mufasa[mu_way].mu_state) == (mu_MFSState__E)) mu__boolexpr1256 = TRUE ;
  else {
  mu__boolexpr1256 = ((mu_self.mu_mufasa[mu_way].mu_state) == (mu_MFSState__M)) ; 
}
if ( mu__boolexpr1256 )
{
bool mu__boolexpr1257;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd))) mu__boolexpr1257 = FALSE ;
  else {
bool mu__boolexpr1258;
bool mu__boolexpr1259;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1259 = FALSE ;
  else {
bool mu__boolexpr1260;
bool mu__boolexpr1261;
bool mu__boolexpr1262;
bool mu__boolexpr1263;
bool mu__boolexpr1264;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1264 = TRUE ;
  else {
  mu__boolexpr1264 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1264) mu__boolexpr1263 = TRUE ;
  else {
  mu__boolexpr1263 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1263) mu__boolexpr1262 = TRUE ;
  else {
  mu__boolexpr1262 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1262) mu__boolexpr1261 = TRUE ;
  else {
  mu__boolexpr1261 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1261) mu__boolexpr1260 = TRUE ;
  else {
  mu__boolexpr1260 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  mu__boolexpr1259 = (mu__boolexpr1260) ; 
}
  if (mu__boolexpr1259) mu__boolexpr1258 = TRUE ;
  else {
bool mu__boolexpr1265;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1265 = FALSE ;
  else {
bool mu__boolexpr1266;
bool mu__boolexpr1267;
bool mu__boolexpr1268;
bool mu__boolexpr1269;
bool mu__boolexpr1270;
bool mu__boolexpr1271;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr1271 = TRUE ;
  else {
  mu__boolexpr1271 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr1271) mu__boolexpr1270 = TRUE ;
  else {
  mu__boolexpr1270 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1270) mu__boolexpr1269 = TRUE ;
  else {
  mu__boolexpr1269 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1269) mu__boolexpr1268 = TRUE ;
  else {
  mu__boolexpr1268 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr1268) mu__boolexpr1267 = TRUE ;
  else {
  mu__boolexpr1267 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1267) mu__boolexpr1266 = TRUE ;
  else {
  mu__boolexpr1266 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  mu__boolexpr1265 = (mu__boolexpr1266) ; 
}
  mu__boolexpr1258 = (mu__boolexpr1265) ; 
}
  mu__boolexpr1257 = (mu__boolexpr1258) ; 
}
if ( mu__boolexpr1257 )
{
mu_self.mu_tractor[mu_htid].mu_data_recvd = mu_true;
mu_self.mu_tractor[mu_htid].mu_data = mu_self.mu_mufasa[mu_way].mu_data;
bool mu__boolexpr1272;
  if (!(mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent)) mu__boolexpr1272 = FALSE ;
  else {
  mu__boolexpr1272 = (!(mu_self.mu_tractor[mu_htid].mu_prlrd_resp_recvd)) ; 
}
if ( mu__boolexpr1272 )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_htid].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
if ( mu_self.mu_tractor[mu_htid].mu_data_sent )
{
mu_self.mu_tractor[mu_htid].mu_data_sent = mu_false;
}
}
}
bool mu__boolexpr1273;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd))) mu__boolexpr1273 = FALSE ;
  else {
bool mu__boolexpr1274;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr1274 = TRUE ;
  else {
bool mu__boolexpr1275;
bool mu__boolexpr1276;
  if (!(!((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)))) mu__boolexpr1276 = FALSE ;
  else {
  mu__boolexpr1276 = (!((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_P))) ; 
}
  if (!(mu__boolexpr1276)) mu__boolexpr1275 = FALSE ;
  else {
  mu__boolexpr1275 = (!((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_E))) ; 
}
  mu__boolexpr1274 = (mu__boolexpr1275) ; 
}
  mu__boolexpr1273 = (mu__boolexpr1274) ; 
}
if ( mu__boolexpr1273 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_false;
}
}
}
mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done = mu_true;
bool mu__boolexpr1277;
bool mu__boolexpr1278;
bool mu__boolexpr1279;
bool mu__boolexpr1280;
bool mu__boolexpr1281;
bool mu__boolexpr1282;
bool mu__boolexpr1283;
bool mu__boolexpr1284;
bool mu__boolexpr1285;
bool mu__boolexpr1286;
bool mu__boolexpr1287;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1287 = FALSE ;
  else {
bool mu__boolexpr1288;
bool mu__boolexpr1289;
bool mu__boolexpr1290;
bool mu__boolexpr1291;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr1291 = TRUE ;
  else {
  mu__boolexpr1291 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1291) mu__boolexpr1290 = TRUE ;
  else {
  mu__boolexpr1290 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr1290) mu__boolexpr1289 = TRUE ;
  else {
  mu__boolexpr1289 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr1289) mu__boolexpr1288 = TRUE ;
  else {
  mu__boolexpr1288 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  mu__boolexpr1287 = (mu__boolexpr1288) ; 
}
  if (!(mu__boolexpr1287)) mu__boolexpr1286 = FALSE ;
  else {
bool mu__boolexpr1292;
  if (mu_way_found) mu__boolexpr1292 = TRUE ;
  else {
  mu__boolexpr1292 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1286 = (mu__boolexpr1292) ; 
}
  if (mu__boolexpr1286) mu__boolexpr1285 = TRUE ;
  else {
bool mu__boolexpr1293;
bool mu__boolexpr1294;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1294 = FALSE ;
  else {
  mu__boolexpr1294 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (!(mu__boolexpr1294)) mu__boolexpr1293 = FALSE ;
  else {
bool mu__boolexpr1295;
  if (!(!(mu_way_found))) mu__boolexpr1295 = FALSE ;
  else {
  mu__boolexpr1295 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1293 = (mu__boolexpr1295) ; 
}
  mu__boolexpr1285 = (mu__boolexpr1293) ; 
}
  if (mu__boolexpr1285) mu__boolexpr1284 = TRUE ;
  else {
bool mu__boolexpr1296;
bool mu__boolexpr1297;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1297 = FALSE ;
  else {
bool mu__boolexpr1298;
bool mu__boolexpr1299;
bool mu__boolexpr1300;
bool mu__boolexpr1301;
bool mu__boolexpr1302;
bool mu__boolexpr1303;
bool mu__boolexpr1304;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1304 = TRUE ;
  else {
  mu__boolexpr1304 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr1304) mu__boolexpr1303 = TRUE ;
  else {
  mu__boolexpr1303 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1303) mu__boolexpr1302 = TRUE ;
  else {
  mu__boolexpr1302 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr1302) mu__boolexpr1301 = TRUE ;
  else {
  mu__boolexpr1301 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1301) mu__boolexpr1300 = TRUE ;
  else {
  mu__boolexpr1300 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1300) mu__boolexpr1299 = TRUE ;
  else {
  mu__boolexpr1299 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1299) mu__boolexpr1298 = TRUE ;
  else {
  mu__boolexpr1298 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  mu__boolexpr1297 = (mu__boolexpr1298) ; 
}
  if (!(mu__boolexpr1297)) mu__boolexpr1296 = FALSE ;
  else {
bool mu__boolexpr1305;
  if (mu_way_found) mu__boolexpr1305 = TRUE ;
  else {
  mu__boolexpr1305 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1296 = (mu__boolexpr1305) ; 
}
  mu__boolexpr1284 = (mu__boolexpr1296) ; 
}
  if (mu__boolexpr1284) mu__boolexpr1283 = TRUE ;
  else {
bool mu__boolexpr1306;
bool mu__boolexpr1307;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1307 = FALSE ;
  else {
bool mu__boolexpr1308;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1308 = TRUE ;
  else {
  mu__boolexpr1308 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  mu__boolexpr1307 = (mu__boolexpr1308) ; 
}
  if (!(mu__boolexpr1307)) mu__boolexpr1306 = FALSE ;
  else {
bool mu__boolexpr1309;
  if (!(!(mu_way_found))) mu__boolexpr1309 = FALSE ;
  else {
  mu__boolexpr1309 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1306 = (mu__boolexpr1309) ; 
}
  mu__boolexpr1283 = (mu__boolexpr1306) ; 
}
  if (mu__boolexpr1283) mu__boolexpr1282 = TRUE ;
  else {
bool mu__boolexpr1310;
bool mu__boolexpr1311;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1311 = FALSE ;
  else {
  mu__boolexpr1311 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
  if (!(mu__boolexpr1311)) mu__boolexpr1310 = FALSE ;
  else {
  mu__boolexpr1310 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1282 = (mu__boolexpr1310) ; 
}
  if (mu__boolexpr1282) mu__boolexpr1281 = TRUE ;
  else {
bool mu__boolexpr1312;
bool mu__boolexpr1313;
bool mu__boolexpr1314;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1314 = FALSE ;
  else {
bool mu__boolexpr1315;
bool mu__boolexpr1316;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvXtoI)) mu__boolexpr1316 = TRUE ;
  else {
  mu__boolexpr1316 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1316) mu__boolexpr1315 = TRUE ;
  else {
  mu__boolexpr1315 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  mu__boolexpr1314 = (mu__boolexpr1315) ; 
}
  if (!(mu__boolexpr1314)) mu__boolexpr1313 = FALSE ;
  else {
  mu__boolexpr1313 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
  if (!(mu__boolexpr1313)) mu__boolexpr1312 = FALSE ;
  else {
bool mu__boolexpr1317;
  if (mu_way_found) mu__boolexpr1317 = TRUE ;
  else {
  mu__boolexpr1317 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1312 = (mu__boolexpr1317) ; 
}
  mu__boolexpr1281 = (mu__boolexpr1312) ; 
}
  if (mu__boolexpr1281) mu__boolexpr1280 = TRUE ;
  else {
bool mu__boolexpr1318;
bool mu__boolexpr1319;
bool mu__boolexpr1320;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1320 = FALSE ;
  else {
bool mu__boolexpr1321;
bool mu__boolexpr1322;
bool mu__boolexpr1323;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwnNoData)) mu__boolexpr1323 = TRUE ;
  else {
  mu__boolexpr1323 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1323) mu__boolexpr1322 = TRUE ;
  else {
  mu__boolexpr1322 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr1322) mu__boolexpr1321 = TRUE ;
  else {
  mu__boolexpr1321 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  mu__boolexpr1320 = (mu__boolexpr1321) ; 
}
  if (!(mu__boolexpr1320)) mu__boolexpr1319 = FALSE ;
  else {
  mu__boolexpr1319 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
  if (!(mu__boolexpr1319)) mu__boolexpr1318 = FALSE ;
  else {
bool mu__boolexpr1324;
  if (mu_way_found) mu__boolexpr1324 = TRUE ;
  else {
  mu__boolexpr1324 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1318 = (mu__boolexpr1324) ; 
}
  mu__boolexpr1280 = (mu__boolexpr1318) ; 
}
  if (mu__boolexpr1280) mu__boolexpr1279 = TRUE ;
  else {
bool mu__boolexpr1325;
bool mu__boolexpr1326;
bool mu__boolexpr1327;
bool mu__boolexpr1328;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1328 = FALSE ;
  else {
  mu__boolexpr1328 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  if (!(mu__boolexpr1328)) mu__boolexpr1327 = FALSE ;
  else {
  mu__boolexpr1327 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
  if (!(mu__boolexpr1327)) mu__boolexpr1326 = FALSE ;
  else {
  mu__boolexpr1326 = (mu_self.mu_tractor[mu_htid].mu_wb_recvd) ; 
}
  if (!(mu__boolexpr1326)) mu__boolexpr1325 = FALSE ;
  else {
bool mu__boolexpr1329;
  if (mu_way_found) mu__boolexpr1329 = TRUE ;
  else {
  mu__boolexpr1329 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  mu__boolexpr1325 = (mu__boolexpr1329) ; 
}
  mu__boolexpr1279 = (mu__boolexpr1325) ; 
}
  if (mu__boolexpr1279) mu__boolexpr1278 = TRUE ;
  else {
bool mu__boolexpr1330;
bool mu__boolexpr1331;
bool mu__boolexpr1332;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1332 = FALSE ;
  else {
  mu__boolexpr1332 = (mu_self.mu_tractor[mu_htid].mu_mfs_hit) ; 
}
  if (!(mu__boolexpr1332)) mu__boolexpr1331 = FALSE ;
  else {
bool mu__boolexpr1333;
  if ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__E)) mu__boolexpr1333 = TRUE ;
  else {
  mu__boolexpr1333 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
  mu__boolexpr1331 = (mu__boolexpr1333) ; 
}
  if (!(mu__boolexpr1331)) mu__boolexpr1330 = FALSE ;
  else {
  mu__boolexpr1330 = (mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) ; 
}
  mu__boolexpr1278 = (mu__boolexpr1330) ; 
}
  if (mu__boolexpr1278) mu__boolexpr1277 = TRUE ;
  else {
bool mu__boolexpr1334;
bool mu__boolexpr1335;
bool mu__boolexpr1336;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1336 = FALSE ;
  else {
  mu__boolexpr1336 = (mu_self.mu_tractor[mu_htid].mu_mfs_hit) ; 
}
  if (!(mu__boolexpr1336)) mu__boolexpr1335 = FALSE ;
  else {
  mu__boolexpr1335 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
  if (!(mu__boolexpr1335)) mu__boolexpr1334 = FALSE ;
  else {
  mu__boolexpr1334 = (mu_HBo__request_with_goM_intention( mu_self, mu_htid )) ; 
}
  mu__boolexpr1277 = (mu__boolexpr1334) ; 
}
if ( mu__boolexpr1277 )
{
mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded = mu_true;
}
bool mu__boolexpr1337;
bool mu__boolexpr1338;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded))) mu__boolexpr1338 = FALSE ;
  else {
  mu__boolexpr1338 = (mu_self.mu_tractor[mu_htid].mu_mem_op_assigned) ; 
}
  if (!(mu__boolexpr1338)) mu__boolexpr1337 = FALSE ;
  else {
  mu__boolexpr1337 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_E)) ; 
}
if ( mu__boolexpr1337 )
{
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_false;
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__is_available_mfs_way(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_mufasa[mu_id].mu_valid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function HBo__is_available_mfs_way reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__mufasa_alloc_and_update(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_MFS_WAYS mu_avail_way("avail_way",0);

bool mu__boolexpr1339;
bool mu__boolexpr1340;
bool mu__boolexpr1341;
bool mu__boolexpr1342;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr1342 = FALSE ;
  else {
  mu__boolexpr1342 = (mu_self.mu_tractor[mu_htid].mu_late_mufasa_lookup_done) ; 
}
  if (!(mu__boolexpr1342)) mu__boolexpr1341 = FALSE ;
  else {
  mu__boolexpr1341 = (!(mu_self.mu_tractor[mu_htid].mu_mufasa_alloc_update_done)) ; 
}
  if (!(mu__boolexpr1341)) mu__boolexpr1340 = FALSE ;
  else {
  mu__boolexpr1340 = (mu_self.mu_tractor[mu_htid].mu_mfsUpdateNeeded) ; 
}
  if (!(mu__boolexpr1340)) mu__boolexpr1339 = FALSE ;
  else {
  mu__boolexpr1339 = ((mu_self.mu_mem_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
mu_Guard ( mu__boolexpr1339 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1343;
bool mu__boolexpr1344;
bool mu__boolexpr1345;
bool mu__boolexpr1346;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr1346 = FALSE ;
  else {
bool mu__boolexpr1347;
bool mu__boolexpr1348;
bool mu__boolexpr1349;
bool mu__boolexpr1350;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)) mu__boolexpr1350 = TRUE ;
  else {
  mu__boolexpr1350 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
  if (mu__boolexpr1350) mu__boolexpr1349 = TRUE ;
  else {
  mu__boolexpr1349 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_E)) ; 
}
  if (mu__boolexpr1349) mu__boolexpr1348 = TRUE ;
  else {
  mu__boolexpr1348 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)) ; 
}
  if (mu__boolexpr1348) mu__boolexpr1347 = TRUE ;
  else {
  mu__boolexpr1347 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fill)) ; 
}
  mu__boolexpr1346 = (mu__boolexpr1347) ; 
}
  if (!(mu__boolexpr1346)) mu__boolexpr1345 = FALSE ;
  else {
  mu__boolexpr1345 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  if (!(mu__boolexpr1345)) mu__boolexpr1344 = FALSE ;
  else {
  mu__boolexpr1344 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
  if (!(mu__boolexpr1344)) mu__boolexpr1343 = TRUE ;
  else {
  mu__boolexpr1343 = (mu_HBo__is_available_mfs_way( mu_self )) ; 
}
mu_Guard ( mu__boolexpr1343 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1351;
bool mu__boolexpr1352;
bool mu__boolexpr1353;
bool mu__boolexpr1354;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr1354 = FALSE ;
  else {
  mu__boolexpr1354 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)) ; 
}
  if (!(mu__boolexpr1354)) mu__boolexpr1353 = FALSE ;
  else {
  mu__boolexpr1353 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  if (!(mu__boolexpr1353)) mu__boolexpr1352 = FALSE ;
  else {
  mu__boolexpr1352 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
  if (!(mu__boolexpr1352)) mu__boolexpr1351 = TRUE ;
  else {
  mu__boolexpr1351 = (mu_self.mu_tractor[mu_htid].mu_mem_resp_recvd) ; 
}
mu_Guard ( mu__boolexpr1351 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1355;
bool mu__boolexpr1356;
bool mu__boolexpr1357;
bool mu__boolexpr1358;
  if (!(!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned))) mu__boolexpr1358 = FALSE ;
  else {
  mu__boolexpr1358 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  if (!(mu__boolexpr1358)) mu__boolexpr1357 = FALSE ;
  else {
  mu__boolexpr1357 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
  if (!(mu__boolexpr1357)) mu__boolexpr1356 = FALSE ;
  else {
  mu__boolexpr1356 = (mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent) ; 
}
  if (!(mu__boolexpr1356)) mu__boolexpr1355 = TRUE ;
  else {
  mu__boolexpr1355 = (mu_self.mu_tractor[mu_htid].mu_prlrd_resp_recvd) ; 
}
mu_Guard ( mu__boolexpr1355 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1359;
bool mu__boolexpr1360;
bool mu__boolexpr1361;
bool mu__boolexpr1362;
  if (!(mu_self.mu_tractor[mu_htid].mu_mem_op_assigned)) mu__boolexpr1362 = FALSE ;
  else {
  mu__boolexpr1362 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fill)) ; 
}
  if (!(mu__boolexpr1362)) mu__boolexpr1361 = FALSE ;
  else {
  mu__boolexpr1361 = (mu_self.mu_tractor[mu_htid].mu_alloc_hint) ; 
}
  if (!(mu__boolexpr1361)) mu__boolexpr1360 = FALSE ;
  else {
  mu__boolexpr1360 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
  if (!(mu__boolexpr1360)) mu__boolexpr1359 = TRUE ;
  else {
  mu__boolexpr1359 = (mu_self.mu_tractor[mu_htid].mu_mem_resp_recvd) ; 
}
mu_Guard ( mu__boolexpr1359 );
if ( mu_guard_failed.isundefined() )
{
if ( mu_self.mu_tractor[mu_htid].mu_mem_op_assigned )
{
bool mu__boolexpr1363;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_M)) mu__boolexpr1363 = TRUE ;
  else {
  mu__boolexpr1363 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Snoop_M)) ; 
}
if ( mu__boolexpr1363 )
{
bool mu__boolexpr1364;
  if (!(mu_self.mu_tractor[mu_htid].mu_alloc_hint)) mu__boolexpr1364 = FALSE ;
  else {
  mu__boolexpr1364 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
if ( mu__boolexpr1364 )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_mufasa[mu_id].mu_valid) )
{
mu_avail_way = mu_id;
}
};
};
mu_self.mu_mufasa[mu_avail_way].mu_valid = mu_true;
mu_self.mu_mufasa[mu_avail_way].mu_state = mu_MFSState__M;
mu_self.mu_mufasa[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_mufasa[mu_avail_way].mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_false;
}
else
{
bool mu__boolexpr1365;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) mu__boolexpr1365 = FALSE ;
  else {
bool mu__boolexpr1366;
  if ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__E)) mu__boolexpr1366 = TRUE ;
  else {
  mu__boolexpr1366 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
  mu__boolexpr1365 = (mu__boolexpr1366) ; 
}
if ( mu__boolexpr1365 )
{
mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_state = mu_MFSState__M;
mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_false;
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_E) )
{
bool mu__boolexpr1367;
  if (!(mu_self.mu_tractor[mu_htid].mu_alloc_hint)) mu__boolexpr1367 = FALSE ;
  else {
  mu__boolexpr1367 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
if ( mu__boolexpr1367 )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_mufasa[mu_id].mu_valid) )
{
mu_avail_way = mu_id;
}
};
};
mu_self.mu_mufasa[mu_avail_way].mu_valid = mu_true;
mu_self.mu_mufasa[mu_avail_way].mu_state = mu_MFSState__E;
mu_self.mu_mufasa[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_mufasa[mu_avail_way].mu_data = mu_self.mu_tractor[mu_htid].mu_data;
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_false;
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Write_P) )
{
bool mu__boolexpr1368;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) mu__boolexpr1368 = FALSE ;
  else {
bool mu__boolexpr1369;
  if ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__E)) mu__boolexpr1369 = TRUE ;
  else {
  mu__boolexpr1369 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
  mu__boolexpr1368 = (mu__boolexpr1369) ; 
}
if ( mu__boolexpr1368 )
{
mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_state = mu_MFSState__M;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_tractor[mu_htid].mu_be[mu_word] )
{
mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_data[mu_word] = mu_self.mu_tractor[mu_htid].mu_data[mu_word];
}
};
};
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_false;
}
}
else
{
bool mu__boolexpr1370;
  if ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Read)) mu__boolexpr1370 = TRUE ;
  else {
  mu__boolexpr1370 = ((mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fwd)) ; 
}
if ( mu__boolexpr1370 )
{
bool mu__boolexpr1371;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) mu__boolexpr1371 = FALSE ;
  else {
  mu__boolexpr1371 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
if ( mu__boolexpr1371 )
{
if ( mu_HBo__request_with_goM_intention( mu_self, mu_htid ) )
{
mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_state = mu_MFSState__E;
mu_self.mu_tractor[mu_htid].mu_mem_op_assigned = mu_false;
}
}
else
{
bool mu__boolexpr1372;
  if (!(mu_self.mu_tractor[mu_htid].mu_alloc_hint)) mu__boolexpr1372 = FALSE ;
  else {
  mu__boolexpr1372 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
if ( mu__boolexpr1372 )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_mufasa[mu_id].mu_valid) )
{
mu_avail_way = mu_id;
}
};
};
mu_self.mu_mufasa[mu_avail_way].mu_valid = mu_true;
mu_self.mu_mufasa[mu_avail_way].mu_state = mu_MFSState__E;
mu_self.mu_mufasa[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_mufasa[mu_avail_way].mu_data = mu_self.mu_tractor[mu_htid].mu_data;
}
}
}
else
{
if ( (mu_self.mu_tractor[mu_htid].mu_mem_op_init) == (mu_Mem_Op__Fill) )
{
bool mu__boolexpr1373;
  if (!(mu_self.mu_tractor[mu_htid].mu_alloc_hint)) mu__boolexpr1373 = FALSE ;
  else {
  mu__boolexpr1373 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) ; 
}
if ( mu__boolexpr1373 )
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_mufasa[mu_id].mu_valid) )
{
mu_avail_way = mu_id;
}
};
};
mu_self.mu_mufasa[mu_avail_way].mu_valid = mu_true;
mu_self.mu_mufasa[mu_avail_way].mu_state = mu_MFSState__E;
mu_self.mu_mufasa[mu_avail_way].mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_self.mu_mufasa[mu_avail_way].mu_data = mu_self.mu_tractor[mu_htid].mu_data;
}
}
}
}
}
}
}
mu_self.mu_tractor[mu_htid].mu_mufasa_alloc_update_done = mu_true;
bool mu__boolexpr1374;
  if (!(mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid)) mu__boolexpr1374 = FALSE ;
  else {
  mu__boolexpr1374 = (!((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid))) ; 
}
if ( mu__boolexpr1374 )
{
mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_lateMfsLkupNeeded = mu_true;
if ( mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_prlrd_req_sent )
{
if ( !(mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_prlrd_resp_recvd) )
{
mu_self.mu_ifa[mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_ifa_id].mu_FOrDData = mu_FOrDDataState__D;
if ( mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_data_sent )
{
mu_self.mu_tractor[mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head].mu_data_sent = mu_false;
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_HBo__is_available_ifa_entry(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_ifa[mu_id].mu_valid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function HBo__is_available_ifa_entry reached without returning values.");
};
/*** end function declaration ***/

mu_1_IFASize mu_HBo__available_ifa_entry(mu_1_HBo& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_ifa[mu_id].mu_valid) )
{
return mu_id;
}
};
};
	Error.Error("The end of function HBo__available_ifa_entry reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_HBo__no_pending_mem_ll_request_for_same_address(mu_1_HBo& mu_self,const mu_1_HTID& mu_htid,const mu_1_Address& mu_address)
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr1375;
bool mu__boolexpr1376;
bool mu__boolexpr1377;
  if (!((mu_id) != (mu_htid))) mu__boolexpr1377 = FALSE ;
  else {
  mu__boolexpr1377 = (mu_self.mu_tractor[mu_id].mu_valid) ; 
}
  if (!(mu__boolexpr1377)) mu__boolexpr1376 = FALSE ;
  else {
  mu__boolexpr1376 = (mu_self.mu_tractor[mu_id].mu_in_mem_domain) ; 
}
  if (!(mu__boolexpr1376)) mu__boolexpr1375 = FALSE ;
  else {
  mu__boolexpr1375 = ((mu_self.mu_tractor[mu_id].mu_address) == (mu_address)) ; 
}
if ( mu__boolexpr1375 )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function HBo__no_pending_mem_ll_request_for_same_address reached without returning values.");
};
/*** end function declaration ***/

void mu_HBo__mufasa_early_read(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
bool mu__boolexpr1378;
bool mu__boolexpr1379;
bool mu__boolexpr1380;
bool mu__boolexpr1381;
bool mu__boolexpr1382;
bool mu__boolexpr1383;
bool mu__boolexpr1384;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr1384 = FALSE ;
  else {
  mu__boolexpr1384 = (mu_self.mu_tractor[mu_htid].mu_sf_lookup_done) ; 
}
  if (!(mu__boolexpr1384)) mu__boolexpr1383 = FALSE ;
  else {
  mu__boolexpr1383 = (mu_self.mu_tractor[mu_htid].mu_snpneeded) ; 
}
  if (!(mu__boolexpr1383)) mu__boolexpr1382 = FALSE ;
  else {
  mu__boolexpr1382 = (!(mu_self.mu_tractor[mu_htid].mu_snpdone)) ; 
}
  if (!(mu__boolexpr1382)) mu__boolexpr1381 = FALSE ;
  else {
  mu__boolexpr1381 = (!(mu_self.mu_tractor[mu_htid].mu_mfs_read_done)) ; 
}
  if (!(mu__boolexpr1381)) mu__boolexpr1380 = FALSE ;
  else {
  mu__boolexpr1380 = (mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid) ; 
}
  if (!(mu__boolexpr1380)) mu__boolexpr1379 = FALSE ;
  else {
  mu__boolexpr1379 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  if (!(mu__boolexpr1379)) mu__boolexpr1378 = FALSE ;
  else {
  mu__boolexpr1378 = (!(mu_self.mu_tractor[mu_htid].mu_data_sent)) ; 
}
mu_Guard ( mu__boolexpr1378 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1385;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1385 = TRUE ;
  else {
bool mu__boolexpr1386;
bool mu__boolexpr1387;
bool mu__boolexpr1388;
bool mu__boolexpr1389;
bool mu__boolexpr1390;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1390 = TRUE ;
  else {
  mu__boolexpr1390 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1390) mu__boolexpr1389 = TRUE ;
  else {
  mu__boolexpr1389 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1389) mu__boolexpr1388 = TRUE ;
  else {
  mu__boolexpr1388 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr1388) mu__boolexpr1387 = TRUE ;
  else {
  mu__boolexpr1387 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1387) mu__boolexpr1386 = TRUE ;
  else {
  mu__boolexpr1386 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  mu__boolexpr1385 = (mu__boolexpr1386) ; 
}
mu_Guard ( mu__boolexpr1385 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1391;
bool mu__boolexpr1392;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1392 = FALSE ;
  else {
bool mu__boolexpr1393;
bool mu__boolexpr1394;
bool mu__boolexpr1395;
bool mu__boolexpr1396;
bool mu__boolexpr1397;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1397 = TRUE ;
  else {
  mu__boolexpr1397 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1397) mu__boolexpr1396 = TRUE ;
  else {
  mu__boolexpr1396 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1396) mu__boolexpr1395 = TRUE ;
  else {
  mu__boolexpr1395 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr1395) mu__boolexpr1394 = TRUE ;
  else {
  mu__boolexpr1394 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1394) mu__boolexpr1393 = TRUE ;
  else {
  mu__boolexpr1393 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  mu__boolexpr1392 = (mu__boolexpr1393) ; 
}
  if (!(mu__boolexpr1392)) mu__boolexpr1391 = TRUE ;
  else {
  mu__boolexpr1391 = (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) ; 
}
mu_Guard ( mu__boolexpr1391 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1398;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1398 = TRUE ;
  else {
bool mu__boolexpr1399;
bool mu__boolexpr1400;
bool mu__boolexpr1401;
bool mu__boolexpr1402;
bool mu__boolexpr1403;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1403 = TRUE ;
  else {
  mu__boolexpr1403 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr1403) mu__boolexpr1402 = TRUE ;
  else {
  mu__boolexpr1402 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1402) mu__boolexpr1401 = TRUE ;
  else {
  mu__boolexpr1401 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1401) mu__boolexpr1400 = TRUE ;
  else {
  mu__boolexpr1400 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1400) mu__boolexpr1399 = TRUE ;
  else {
  mu__boolexpr1399 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr1398 = (mu__boolexpr1399) ; 
}
mu_Guard ( mu__boolexpr1398 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1404;
bool mu__boolexpr1405;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1405 = FALSE ;
  else {
bool mu__boolexpr1406;
bool mu__boolexpr1407;
bool mu__boolexpr1408;
bool mu__boolexpr1409;
bool mu__boolexpr1410;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1410 = TRUE ;
  else {
  mu__boolexpr1410 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr1410) mu__boolexpr1409 = TRUE ;
  else {
  mu__boolexpr1409 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1409) mu__boolexpr1408 = TRUE ;
  else {
  mu__boolexpr1408 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1408) mu__boolexpr1407 = TRUE ;
  else {
  mu__boolexpr1407 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1407) mu__boolexpr1406 = TRUE ;
  else {
  mu__boolexpr1406 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr1405 = (mu__boolexpr1406) ; 
}
  if (!(mu__boolexpr1405)) mu__boolexpr1404 = TRUE ;
  else {
  mu__boolexpr1404 = (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) ; 
}
mu_Guard ( mu__boolexpr1404 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1411;
bool mu__boolexpr1412;
  if (!(mu_mufasa_mode)) mu__boolexpr1412 = FALSE ;
  else {
  mu__boolexpr1412 = (mu_HBo__request_requires_early_mufasa_lookup( mu_self, mu_htid )) ; 
}
  if (!(mu__boolexpr1412)) mu__boolexpr1411 = TRUE ;
  else {
bool mu__boolexpr1413;
bool mu__boolexpr1414;
bool mu__boolexpr1415;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1415 = FALSE ;
  else {
  mu__boolexpr1415 = (mu_self.mu_tractor[mu_htid].mu_mfs_hit) ; 
}
  if (!(mu__boolexpr1415)) mu__boolexpr1414 = FALSE ;
  else {
bool mu__boolexpr1416;
  if ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__E)) mu__boolexpr1416 = TRUE ;
  else {
  mu__boolexpr1416 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__M)) ; 
}
  mu__boolexpr1414 = (mu__boolexpr1416) ; 
}
  if (!(mu__boolexpr1414)) mu__boolexpr1413 = FALSE ;
  else {
bool mu__boolexpr1417;
  if ((mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_state) == (mu_MFSState__E)) mu__boolexpr1417 = TRUE ;
  else {
  mu__boolexpr1417 = ((mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_state) == (mu_MFSState__M)) ; 
}
  mu__boolexpr1413 = (mu__boolexpr1417) ; 
}
  mu__boolexpr1411 = (mu__boolexpr1413) ; 
}
mu_Guard ( mu__boolexpr1411 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_prll_lkup_enabled );
if ( mu_guard_failed.isundefined() )
{
if ( !(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd) )
{
mu_self.mu_tractor[mu_htid].mu_data = mu_self.mu_mufasa[mu_self.mu_tractor[mu_htid].mu_mfs_way].mu_data;
}
mu_self.mu_tractor[mu_htid].mu_mfs_read_done = mu_true;
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_HBo__send_parallel_mem_read_request(mu_1_HBo& mu_self, const mu_1_HTID& mu_htid)
{
/*** Variable declaration ***/
mu_1_IFASize mu_ifa_id("ifa_id",0);

/*** Variable declaration ***/
mu_1_CXMPacket mu_packet("packet",8);

/*** Variable declaration ***/
mu_1_MEM_TORID mu_mctid("mctid",80);

bool mu__boolexpr1418;
bool mu__boolexpr1419;
bool mu__boolexpr1420;
bool mu__boolexpr1421;
bool mu__boolexpr1422;
bool mu__boolexpr1423;
bool mu__boolexpr1424;
bool mu__boolexpr1425;
  if (!(mu_self.mu_tractor[mu_htid].mu_valid)) mu__boolexpr1425 = FALSE ;
  else {
  mu__boolexpr1425 = (mu_self.mu_tractor[mu_htid].mu_sf_lookup_done) ; 
}
  if (!(mu__boolexpr1425)) mu__boolexpr1424 = FALSE ;
  else {
  mu__boolexpr1424 = (mu_self.mu_tractor[mu_htid].mu_snpneeded) ; 
}
  if (!(mu__boolexpr1424)) mu__boolexpr1423 = FALSE ;
  else {
  mu__boolexpr1423 = (!(mu_self.mu_tractor[mu_htid].mu_snpdone)) ; 
}
  if (!(mu__boolexpr1423)) mu__boolexpr1422 = FALSE ;
  else {
  mu__boolexpr1422 = (mu_HBo__is_available_ifa_entry( mu_self )) ; 
}
  if (!(mu__boolexpr1422)) mu__boolexpr1421 = FALSE ;
  else {
  mu__boolexpr1421 = (!(mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent)) ; 
}
  if (!(mu__boolexpr1421)) mu__boolexpr1420 = FALSE ;
  else {
  mu__boolexpr1420 = (mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_valid) ; 
}
  if (!(mu__boolexpr1420)) mu__boolexpr1419 = FALSE ;
  else {
  mu__boolexpr1419 = ((mu_self.mu_coh_ll[mu_self.mu_tractor[mu_htid].mu_address].mu_head) == (mu_htid)) ; 
}
  if (!(mu__boolexpr1419)) mu__boolexpr1418 = FALSE ;
  else {
  mu__boolexpr1418 = (!(mu_self.mu_tractor[mu_htid].mu_data_sent)) ; 
}
mu_Guard ( mu__boolexpr1418 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1426;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1426 = TRUE ;
  else {
bool mu__boolexpr1427;
bool mu__boolexpr1428;
bool mu__boolexpr1429;
bool mu__boolexpr1430;
bool mu__boolexpr1431;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1431 = TRUE ;
  else {
  mu__boolexpr1431 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1431) mu__boolexpr1430 = TRUE ;
  else {
  mu__boolexpr1430 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1430) mu__boolexpr1429 = TRUE ;
  else {
  mu__boolexpr1429 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr1429) mu__boolexpr1428 = TRUE ;
  else {
  mu__boolexpr1428 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1428) mu__boolexpr1427 = TRUE ;
  else {
  mu__boolexpr1427 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  mu__boolexpr1426 = (mu__boolexpr1427) ; 
}
mu_Guard ( mu__boolexpr1426 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1432;
bool mu__boolexpr1433;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1433 = FALSE ;
  else {
bool mu__boolexpr1434;
bool mu__boolexpr1435;
bool mu__boolexpr1436;
bool mu__boolexpr1437;
bool mu__boolexpr1438;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1438 = TRUE ;
  else {
  mu__boolexpr1438 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1438) mu__boolexpr1437 = TRUE ;
  else {
  mu__boolexpr1437 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1437) mu__boolexpr1436 = TRUE ;
  else {
  mu__boolexpr1436 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  if (mu__boolexpr1436) mu__boolexpr1435 = TRUE ;
  else {
  mu__boolexpr1435 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1435) mu__boolexpr1434 = TRUE ;
  else {
  mu__boolexpr1434 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  mu__boolexpr1433 = (mu__boolexpr1434) ; 
}
  if (!(mu__boolexpr1433)) mu__boolexpr1432 = TRUE ;
  else {
  mu__boolexpr1432 = (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) ; 
}
mu_Guard ( mu__boolexpr1432 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1439;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1439 = TRUE ;
  else {
bool mu__boolexpr1440;
bool mu__boolexpr1441;
bool mu__boolexpr1442;
bool mu__boolexpr1443;
bool mu__boolexpr1444;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1444 = TRUE ;
  else {
  mu__boolexpr1444 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr1444) mu__boolexpr1443 = TRUE ;
  else {
  mu__boolexpr1443 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1443) mu__boolexpr1442 = TRUE ;
  else {
  mu__boolexpr1442 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1442) mu__boolexpr1441 = TRUE ;
  else {
  mu__boolexpr1441 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1441) mu__boolexpr1440 = TRUE ;
  else {
  mu__boolexpr1440 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr1439 = (mu__boolexpr1440) ; 
}
mu_Guard ( mu__boolexpr1439 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1445;
bool mu__boolexpr1446;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1446 = FALSE ;
  else {
bool mu__boolexpr1447;
bool mu__boolexpr1448;
bool mu__boolexpr1449;
bool mu__boolexpr1450;
bool mu__boolexpr1451;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1451 = TRUE ;
  else {
  mu__boolexpr1451 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  if (mu__boolexpr1451) mu__boolexpr1450 = TRUE ;
  else {
  mu__boolexpr1450 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1450) mu__boolexpr1449 = TRUE ;
  else {
  mu__boolexpr1449 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1449) mu__boolexpr1448 = TRUE ;
  else {
  mu__boolexpr1448 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1448) mu__boolexpr1447 = TRUE ;
  else {
  mu__boolexpr1447 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr1446 = (mu__boolexpr1447) ; 
}
  if (!(mu__boolexpr1446)) mu__boolexpr1445 = TRUE ;
  else {
  mu__boolexpr1445 = (!(mu_self.mu_tractor[mu_htid].mu_snoop_data_recvd)) ; 
}
mu_Guard ( mu__boolexpr1445 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_HBo__is_available_mctentry( mu_self ) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1452;
  if (!(mu_mufasa_mode)) mu__boolexpr1452 = TRUE ;
  else {
  mu__boolexpr1452 = (!(mu_self.mu_tractor[mu_htid].mu_alloc_hint)) ; 
}
mu_Guard ( mu__boolexpr1452 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1453;
bool mu__boolexpr1454;
  if (!(mu_mufasa_mode)) mu__boolexpr1454 = FALSE ;
  else {
  mu__boolexpr1454 = (mu_HBo__request_requires_early_mufasa_lookup( mu_self, mu_htid )) ; 
}
  if (!(mu__boolexpr1454)) mu__boolexpr1453 = TRUE ;
  else {
bool mu__boolexpr1455;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_lookup_done)) mu__boolexpr1455 = FALSE ;
  else {
bool mu__boolexpr1456;
  if (!(mu_self.mu_tractor[mu_htid].mu_mfs_hit)) mu__boolexpr1456 = TRUE ;
  else {
  mu__boolexpr1456 = ((mu_self.mu_tractor[mu_htid].mu_mfs_state) == (mu_MFSState__I)) ; 
}
  mu__boolexpr1455 = (mu__boolexpr1456) ; 
}
  mu__boolexpr1453 = (mu__boolexpr1455) ; 
}
mu_Guard ( mu__boolexpr1453 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_HBo__no_pending_mem_ll_request_for_same_address( mu_self, mu_htid, mu_self.mu_tractor[mu_htid].mu_address ) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_prll_lkup_enabled );
if ( mu_guard_failed.isundefined() )
{
mu_ifa_id = mu_HBo__available_ifa_entry( mu_self );
mu_IFAEntry__load ( mu_self.mu_ifa[mu_ifa_id], mu_htid, mu_self.mu_tractor[mu_htid].mu_rtid, mu_self.mu_tractor[mu_htid].mu_agent_id, mu_self.mu_tractor[mu_htid].mu_protocol );
bool mu__boolexpr1457;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1457 = FALSE ;
  else {
bool mu__boolexpr1458;
bool mu__boolexpr1459;
bool mu__boolexpr1460;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdCurr)) mu__boolexpr1460 = TRUE ;
  else {
  mu__boolexpr1460 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1460) mu__boolexpr1459 = TRUE ;
  else {
  mu__boolexpr1459 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1459) mu__boolexpr1458 = TRUE ;
  else {
  mu__boolexpr1458 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  mu__boolexpr1457 = (mu__boolexpr1458) ; 
}
if ( mu__boolexpr1457 )
{
mu_self.mu_ifa[mu_ifa_id].mu_dataE = mu_false;
}
else
{
bool mu__boolexpr1461;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__IDIC))) mu__boolexpr1461 = FALSE ;
  else {
bool mu__boolexpr1462;
  if ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdOwn)) mu__boolexpr1462 = TRUE ;
  else {
  mu__boolexpr1462 = ((mu_self.mu_tractor[mu_htid].mu_iopcode) == (mu_IDI_Opcode__RdAny)) ; 
}
  mu__boolexpr1461 = (mu__boolexpr1462) ; 
}
if ( mu__boolexpr1461 )
{
mu_self.mu_ifa[mu_ifa_id].mu_dataE = mu_true;
}
else
{
bool mu__boolexpr1463;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1463 = FALSE ;
  else {
bool mu__boolexpr1464;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCur)) mu__boolexpr1464 = TRUE ;
  else {
  mu__boolexpr1464 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdCode)) ; 
}
  mu__boolexpr1463 = (mu__boolexpr1464) ; 
}
if ( mu__boolexpr1463 )
{
mu_self.mu_ifa[mu_ifa_id].mu_dataE = mu_false;
}
else
{
bool mu__boolexpr1465;
  if (!((mu_self.mu_tractor[mu_htid].mu_protocol) == (mu_Protocol__UPI))) mu__boolexpr1465 = FALSE ;
  else {
bool mu__boolexpr1466;
bool mu__boolexpr1467;
bool mu__boolexpr1468;
  if ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdData)) mu__boolexpr1468 = TRUE ;
  else {
  mu__boolexpr1468 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1468) mu__boolexpr1467 = TRUE ;
  else {
  mu__boolexpr1467 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1467) mu__boolexpr1466 = TRUE ;
  else {
  mu__boolexpr1466 = ((mu_self.mu_tractor[mu_htid].mu_uopcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  mu__boolexpr1465 = (mu__boolexpr1466) ; 
}
if ( mu__boolexpr1465 )
{
mu_self.mu_ifa[mu_ifa_id].mu_dataE = mu_true;
}
}
}
}
if (mu_ifa_id.isundefined())
  mu_self.mu_tractor[mu_htid].mu_ifa_id.undefine();
else
  mu_self.mu_tractor[mu_htid].mu_ifa_id = mu_ifa_id;
mu_packet.mu_opcode = mu_CXM_Opcode__MemRd;
mu_packet.mu_address = mu_self.mu_tractor[mu_htid].mu_address;
mu_packet.mu_prlrd = mu_true;
if (mu_ifa_id.isundefined())
  mu_packet.mu_txnid.undefine();
else
  mu_packet.mu_txnid = mu_ifa_id;
mu_mctid = mu_HBo__available_mctentry( mu_self );
mu_MemTOREntry__load ( mu_self.mu_mct[mu_mctid], mu_packet );
mu_self.mu_count = (mu_self.mu_count) + (1);
mu_self.mu_tractor[mu_htid].mu_prlrd_req_sent = mu_true;
}
}
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_TOREntry__load(mu_1_TOREntry& mu_self, const mu_1_Address& mu_address, const mu_1_UPI_Opcode& mu_opcode)
{
if (mu_address.isundefined())
  mu_self.mu_address.undefine();
else
  mu_self.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_self.mu_opcode.undefine();
else
  mu_self.mu_opcode = mu_opcode;
mu_self.mu_state = mu_RTID_STATE__SentReq;
};
/*** end procedure declaration ***/

void mu_CA_SnoopEntry__release(mu_1_CA_SnoopEntry& mu_self)
{
mu_self.mu_opcode.undefine();
mu_self.mu_htid.undefine();
mu_self.mu_state = mu_SRB_STATE__Idle;
mu_self.mu_fwdtid.undefine();
mu_self.mu_rtid.undefine();
mu_self.mu_crnid.undefine();
};
/*** end procedure declaration ***/

void mu_CA__reset(mu_1_CA& mu_self, const mu_1_UPIAgents& mu_crnid)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_TOREntry__release ( mu_self.mu_tor[mu_id] );
mu_self.mu_rtid_usedby_snp[mu_id] = mu_false;
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_CA_SnoopEntry__release ( mu_self.mu_snoopq[mu_id] );
};
};
if (mu_crnid.isundefined())
  mu_self.mu_crnid.undefine();
else
  mu_self.mu_crnid = mu_crnid;
{
for(int mu_address = 0; mu_address <= 0; mu_address++) {
mu_CacheEntry__release ( mu_self.mu_cache[mu_address] );
};
};
if ( (mu_self.mu_crnid) == (0) )
{
mu_self.mu_forwardFromS = mu_CAFwdFromS;
}
else
{
mu_self.mu_forwardFromS = mu_false;
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_CA__is_available_torentry(mu_1_CA& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tor[mu_id].mu_state) == (mu_RTID_STATE__Idle) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function CA__is_available_torentry reached without returning values.");
};
/*** end function declaration ***/

mu_1_RTID mu_CA__available_torentry(mu_1_CA& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_self.mu_tor[mu_id].mu_state) == (mu_RTID_STATE__Idle) )
{
return mu_id;
}
};
};
	Error.Error("The end of function CA__available_torentry reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_CA__tor_has_matching_wb_or_evict(mu_1_CA& mu_self,const mu_1_Address& mu_address)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1469;
bool mu__boolexpr1470;
  if (!((mu_self.mu_tor[mu_id].mu_state) != (mu_RTID_STATE__Idle))) mu__boolexpr1470 = FALSE ;
  else {
  mu__boolexpr1470 = ((mu_self.mu_tor[mu_id].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1470)) mu__boolexpr1469 = FALSE ;
  else {
bool mu__boolexpr1471;
bool mu__boolexpr1472;
bool mu__boolexpr1473;
bool mu__boolexpr1474;
bool mu__boolexpr1475;
  if ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr1475 = TRUE ;
  else {
  mu__boolexpr1475 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1475) mu__boolexpr1474 = TRUE ;
  else {
  mu__boolexpr1474 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr1474) mu__boolexpr1473 = TRUE ;
  else {
  mu__boolexpr1473 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr1473) mu__boolexpr1472 = TRUE ;
  else {
  mu__boolexpr1472 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr1472) mu__boolexpr1471 = TRUE ;
  else {
  mu__boolexpr1471 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  mu__boolexpr1469 = (mu__boolexpr1471) ; 
}
if ( mu__boolexpr1469 )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function CA__tor_has_matching_wb_or_evict reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_CA__tor_has_matching_read_or_inv(mu_1_CA& mu_self,const mu_1_Address& mu_address)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1476;
bool mu__boolexpr1477;
  if (!((mu_self.mu_tor[mu_id].mu_state) != (mu_RTID_STATE__Idle))) mu__boolexpr1477 = FALSE ;
  else {
  mu__boolexpr1477 = ((mu_self.mu_tor[mu_id].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1477)) mu__boolexpr1476 = FALSE ;
  else {
bool mu__boolexpr1478;
bool mu__boolexpr1479;
bool mu__boolexpr1480;
bool mu__boolexpr1481;
bool mu__boolexpr1482;
bool mu__boolexpr1483;
bool mu__boolexpr1484;
  if ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1484 = TRUE ;
  else {
  mu__boolexpr1484 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1484) mu__boolexpr1483 = TRUE ;
  else {
  mu__boolexpr1483 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1483) mu__boolexpr1482 = TRUE ;
  else {
  mu__boolexpr1482 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1482) mu__boolexpr1481 = TRUE ;
  else {
  mu__boolexpr1481 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1481) mu__boolexpr1480 = TRUE ;
  else {
  mu__boolexpr1480 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1480) mu__boolexpr1479 = TRUE ;
  else {
  mu__boolexpr1479 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1479) mu__boolexpr1478 = TRUE ;
  else {
  mu__boolexpr1478 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  mu__boolexpr1476 = (mu__boolexpr1478) ; 
}
if ( mu__boolexpr1476 )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function CA__tor_has_matching_read_or_inv reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_CA__ca_be_empty(mu_1_CA& mu_self,const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag_e("flag_e",0);

mu_flag_e = mu_true;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_cache[mu_address].mu_be[mu_word] )
{
mu_flag_e = mu_false;
}
};
};
return mu_flag_e;
	Error.Error("The end of function CA__ca_be_empty reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_CA__ca_be_full(mu_1_CA& mu_self,const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag_f("flag_f",0);

mu_flag_f = mu_true;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_address].mu_be[mu_word]) )
{
mu_flag_f = mu_false;
}
};
};
return mu_flag_f;
	Error.Error("The end of function CA__ca_be_full reached without returning values.");
};
/*** end function declaration ***/

mu_1_RTID mu_CA__matching_readinv_id(mu_1_CA& mu_self,const mu_1_Address& mu_address)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1485;
bool mu__boolexpr1486;
  if (!((mu_self.mu_tor[mu_id].mu_state) != (mu_RTID_STATE__Idle))) mu__boolexpr1486 = FALSE ;
  else {
  mu__boolexpr1486 = ((mu_self.mu_tor[mu_id].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1486)) mu__boolexpr1485 = FALSE ;
  else {
bool mu__boolexpr1487;
bool mu__boolexpr1488;
bool mu__boolexpr1489;
bool mu__boolexpr1490;
bool mu__boolexpr1491;
bool mu__boolexpr1492;
bool mu__boolexpr1493;
  if ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1493 = TRUE ;
  else {
  mu__boolexpr1493 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1493) mu__boolexpr1492 = TRUE ;
  else {
  mu__boolexpr1492 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1492) mu__boolexpr1491 = TRUE ;
  else {
  mu__boolexpr1491 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1491) mu__boolexpr1490 = TRUE ;
  else {
  mu__boolexpr1490 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1490) mu__boolexpr1489 = TRUE ;
  else {
  mu__boolexpr1489 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1489) mu__boolexpr1488 = TRUE ;
  else {
  mu__boolexpr1488 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1488) mu__boolexpr1487 = TRUE ;
  else {
  mu__boolexpr1487 = ((mu_self.mu_tor[mu_id].mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  mu__boolexpr1485 = (mu__boolexpr1487) ; 
}
if ( mu__boolexpr1485 )
{
return mu_id;
}
};
};
	Error.Error("The end of function CA__matching_readinv_id reached without returning values.");
};
/*** end function declaration ***/

void mu_CA__send_new_request(mu_1_CA& mu_self, const mu_1_Address& mu_address, const mu_1_UPI_Opcode& mu_opcode, const mu_0_boolean& mu_alloc_hint)
{
/*** Variable declaration ***/
mu_1_RTID mu_rtid("rtid",0);

/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",8);

bool mu__boolexpr1494;
bool mu__boolexpr1495;
bool mu__boolexpr1496;
bool mu__boolexpr1497;
bool mu__boolexpr1498;
bool mu__boolexpr1499;
bool mu__boolexpr1500;
bool mu__boolexpr1501;
bool mu__boolexpr1502;
bool mu__boolexpr1503;
  if ((mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1503 = TRUE ;
  else {
  mu__boolexpr1503 = ((mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1503) mu__boolexpr1502 = TRUE ;
  else {
  mu__boolexpr1502 = ((mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1502) mu__boolexpr1501 = TRUE ;
  else {
  mu__boolexpr1501 = ((mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1501) mu__boolexpr1500 = TRUE ;
  else {
  mu__boolexpr1500 = ((mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1500) mu__boolexpr1499 = TRUE ;
  else {
  mu__boolexpr1499 = ((mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1499) mu__boolexpr1498 = TRUE ;
  else {
  mu__boolexpr1498 = ((mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1498) mu__boolexpr1497 = TRUE ;
  else {
  mu__boolexpr1497 = ((mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1497) mu__boolexpr1496 = TRUE ;
  else {
  mu__boolexpr1496 = ((mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (mu__boolexpr1496) mu__boolexpr1495 = TRUE ;
  else {
bool mu__boolexpr1504;
bool mu__boolexpr1505;
bool mu__boolexpr1506;
bool mu__boolexpr1507;
bool mu__boolexpr1508;
bool mu__boolexpr1509;
  if ((mu_opcode) == (mu_UPI_Opcode__ReqFwdCnflt)) mu__boolexpr1509 = TRUE ;
  else {
  mu__boolexpr1509 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr1509) mu__boolexpr1508 = TRUE ;
  else {
  mu__boolexpr1508 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1508) mu__boolexpr1507 = TRUE ;
  else {
  mu__boolexpr1507 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr1507) mu__boolexpr1506 = TRUE ;
  else {
  mu__boolexpr1506 = ((mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
  if (mu__boolexpr1506) mu__boolexpr1505 = TRUE ;
  else {
  mu__boolexpr1505 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) ; 
}
  if (mu__boolexpr1505) mu__boolexpr1504 = TRUE ;
  else {
  mu__boolexpr1504 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  mu__boolexpr1495 = (mu__boolexpr1504) ; 
}
  if (!(mu__boolexpr1495)) mu__boolexpr1494 = FALSE ;
  else {
  mu__boolexpr1494 = (mu_CA__is_available_torentry( mu_self )) ; 
}
mu_Guard ( mu__boolexpr1494 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1510;
bool mu__boolexpr1511;
bool mu__boolexpr1512;
bool mu__boolexpr1513;
bool mu__boolexpr1514;
bool mu__boolexpr1515;
bool mu__boolexpr1516;
bool mu__boolexpr1517;
bool mu__boolexpr1518;
bool mu__boolexpr1519;
bool mu__boolexpr1520;
bool mu__boolexpr1521;
bool mu__boolexpr1522;
bool mu__boolexpr1523;
bool mu__boolexpr1524;
bool mu__boolexpr1525;
  if ((mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1525 = TRUE ;
  else {
  mu__boolexpr1525 = ((mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1525) mu__boolexpr1524 = TRUE ;
  else {
  mu__boolexpr1524 = ((mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1524) mu__boolexpr1523 = TRUE ;
  else {
  mu__boolexpr1523 = ((mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1523) mu__boolexpr1522 = TRUE ;
  else {
  mu__boolexpr1522 = ((mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1522) mu__boolexpr1521 = TRUE ;
  else {
  mu__boolexpr1521 = ((mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1521) mu__boolexpr1520 = TRUE ;
  else {
  mu__boolexpr1520 = ((mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1520) mu__boolexpr1519 = TRUE ;
  else {
  mu__boolexpr1519 = ((mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (!(mu__boolexpr1519)) mu__boolexpr1518 = FALSE ;
  else {
bool mu__boolexpr1526;
bool mu__boolexpr1527;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__I)) mu__boolexpr1527 = TRUE ;
  else {
  mu__boolexpr1527 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S)) ; 
}
  if (mu__boolexpr1527) mu__boolexpr1526 = TRUE ;
  else {
bool mu__boolexpr1528;
  if (!(mu_CAAllowBuriedHitM)) mu__boolexpr1528 = FALSE ;
  else {
bool mu__boolexpr1529;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) mu__boolexpr1529 = TRUE ;
  else {
  mu__boolexpr1529 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  mu__boolexpr1528 = (mu__boolexpr1529) ; 
}
  mu__boolexpr1526 = (mu__boolexpr1528) ; 
}
  mu__boolexpr1518 = (mu__boolexpr1526) ; 
}
  if (!(mu__boolexpr1518)) mu__boolexpr1517 = FALSE ;
  else {
  mu__boolexpr1517 = (!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ))) ; 
}
  if (mu__boolexpr1517) mu__boolexpr1516 = TRUE ;
  else {
bool mu__boolexpr1530;
bool mu__boolexpr1531;
  if (!((mu_opcode) == (mu_UPI_Opcode__InvXtoI))) mu__boolexpr1531 = FALSE ;
  else {
bool mu__boolexpr1532;
bool mu__boolexpr1533;
bool mu__boolexpr1534;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__I)) mu__boolexpr1534 = TRUE ;
  else {
  mu__boolexpr1534 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S)) ; 
}
  if (mu__boolexpr1534) mu__boolexpr1533 = TRUE ;
  else {
  mu__boolexpr1533 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (mu__boolexpr1533) mu__boolexpr1532 = TRUE ;
  else {
bool mu__boolexpr1535;
  if (!(mu_CA__ca_be_empty( mu_self, mu_address ))) mu__boolexpr1535 = FALSE ;
  else {
  mu__boolexpr1535 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  mu__boolexpr1532 = (mu__boolexpr1535) ; 
}
  mu__boolexpr1531 = (mu__boolexpr1532) ; 
}
  if (!(mu__boolexpr1531)) mu__boolexpr1530 = FALSE ;
  else {
  mu__boolexpr1530 = (!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ))) ; 
}
  mu__boolexpr1516 = (mu__boolexpr1530) ; 
}
  if (mu__boolexpr1516) mu__boolexpr1515 = TRUE ;
  else {
bool mu__boolexpr1536;
bool mu__boolexpr1537;
bool mu__boolexpr1538;
bool mu__boolexpr1539;
  if ((mu_opcode) == (mu_UPI_Opcode__WbMtoI)) mu__boolexpr1539 = TRUE ;
  else {
  mu__boolexpr1539 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1539) mu__boolexpr1538 = TRUE ;
  else {
  mu__boolexpr1538 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (!(mu__boolexpr1538)) mu__boolexpr1537 = FALSE ;
  else {
bool mu__boolexpr1540;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M))) mu__boolexpr1540 = FALSE ;
  else {
  mu__boolexpr1540 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
  mu__boolexpr1537 = (mu__boolexpr1540) ; 
}
  if (!(mu__boolexpr1537)) mu__boolexpr1536 = FALSE ;
  else {
  mu__boolexpr1536 = (!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ))) ; 
}
  mu__boolexpr1515 = (mu__boolexpr1536) ; 
}
  if (mu__boolexpr1515) mu__boolexpr1514 = TRUE ;
  else {
bool mu__boolexpr1541;
bool mu__boolexpr1542;
bool mu__boolexpr1543;
  if (!((mu_opcode) == (mu_UPI_Opcode__WbMtoE))) mu__boolexpr1543 = FALSE ;
  else {
bool mu__boolexpr1544;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M))) mu__boolexpr1544 = FALSE ;
  else {
  mu__boolexpr1544 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
  mu__boolexpr1543 = (mu__boolexpr1544) ; 
}
  if (!(mu__boolexpr1543)) mu__boolexpr1542 = FALSE ;
  else {
  mu__boolexpr1542 = (mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address )) ; 
}
  if (!(mu__boolexpr1542)) mu__boolexpr1541 = FALSE ;
  else {
  mu__boolexpr1541 = ((mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_state) == (mu_RTID_STATE__SentReq)) ; 
}
  mu__boolexpr1514 = (mu__boolexpr1541) ; 
}
  if (mu__boolexpr1514) mu__boolexpr1513 = TRUE ;
  else {
bool mu__boolexpr1545;
bool mu__boolexpr1546;
  if (!((mu_opcode) == (mu_UPI_Opcode__WbEtoI))) mu__boolexpr1546 = FALSE ;
  else {
bool mu__boolexpr1547;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E))) mu__boolexpr1547 = FALSE ;
  else {
  mu__boolexpr1547 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
  mu__boolexpr1546 = (mu__boolexpr1547) ; 
}
  if (!(mu__boolexpr1546)) mu__boolexpr1545 = FALSE ;
  else {
  mu__boolexpr1545 = (!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ))) ; 
}
  mu__boolexpr1513 = (mu__boolexpr1545) ; 
}
  if (mu__boolexpr1513) mu__boolexpr1512 = TRUE ;
  else {
bool mu__boolexpr1548;
bool mu__boolexpr1549;
bool mu__boolexpr1550;
  if ((mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl)) mu__boolexpr1550 = TRUE ;
  else {
  mu__boolexpr1550 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl)) ; 
}
  if (!(mu__boolexpr1550)) mu__boolexpr1549 = FALSE ;
  else {
  mu__boolexpr1549 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  if (!(mu__boolexpr1549)) mu__boolexpr1548 = FALSE ;
  else {
  mu__boolexpr1548 = (!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ))) ; 
}
  mu__boolexpr1512 = (mu__boolexpr1548) ; 
}
  if (mu__boolexpr1512) mu__boolexpr1511 = TRUE ;
  else {
bool mu__boolexpr1551;
bool mu__boolexpr1552;
bool mu__boolexpr1553;
bool mu__boolexpr1554;
  if (!((mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl))) mu__boolexpr1554 = FALSE ;
  else {
  mu__boolexpr1554 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  if (!(mu__boolexpr1554)) mu__boolexpr1553 = FALSE ;
  else {
  mu__boolexpr1553 = (mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address )) ; 
}
  if (!(mu__boolexpr1553)) mu__boolexpr1552 = FALSE ;
  else {
  mu__boolexpr1552 = ((mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_state) == (mu_RTID_STATE__SentReq)) ; 
}
  if (!(mu__boolexpr1552)) mu__boolexpr1551 = FALSE ;
  else {
  mu__boolexpr1551 = ((mu_self.mu_snoopq[mu_address].mu_state) != (mu_SRB_STATE__Idle)) ; 
}
  mu__boolexpr1511 = (mu__boolexpr1551) ; 
}
  if (mu__boolexpr1511) mu__boolexpr1510 = TRUE ;
  else {
bool mu__boolexpr1555;
bool mu__boolexpr1556;
bool mu__boolexpr1557;
  if (!((mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl))) mu__boolexpr1557 = FALSE ;
  else {
  mu__boolexpr1557 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  if (!(mu__boolexpr1557)) mu__boolexpr1556 = FALSE ;
  else {
  mu__boolexpr1556 = (mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address )) ; 
}
  if (!(mu__boolexpr1556)) mu__boolexpr1555 = FALSE ;
  else {
  mu__boolexpr1555 = ((mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_state) == (mu_RTID_STATE__SentReq)) ; 
}
  mu__boolexpr1510 = (mu__boolexpr1555) ; 
}
mu_Guard ( mu__boolexpr1510 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( !(mu_CA__tor_has_matching_wb_or_evict( mu_self, mu_address )) );
if ( mu_guard_failed.isundefined() )
{
mu_rtid = mu_CA__available_torentry( mu_self );
mu_TOREntry__load ( mu_self.mu_tor[mu_rtid], mu_address, mu_opcode );
bool mu__boolexpr1558;
bool mu__boolexpr1559;
bool mu__boolexpr1560;
bool mu__boolexpr1561;
bool mu__boolexpr1562;
bool mu__boolexpr1563;
bool mu__boolexpr1564;
  if ((mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1564 = TRUE ;
  else {
  mu__boolexpr1564 = ((mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1564) mu__boolexpr1563 = TRUE ;
  else {
  mu__boolexpr1563 = ((mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1563) mu__boolexpr1562 = TRUE ;
  else {
  mu__boolexpr1562 = ((mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1562) mu__boolexpr1561 = TRUE ;
  else {
  mu__boolexpr1561 = ((mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1561) mu__boolexpr1560 = TRUE ;
  else {
  mu__boolexpr1560 = ((mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1560) mu__boolexpr1559 = TRUE ;
  else {
  mu__boolexpr1559 = ((mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1559) mu__boolexpr1558 = TRUE ;
  else {
  mu__boolexpr1558 = ((mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
if ( mu__boolexpr1558 )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
}
else
{
if ( (mu_opcode) == (mu_UPI_Opcode__InvXtoI) )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_false;
};
};
}
else
{
if ( (mu_opcode) == (mu_UPI_Opcode__WbMtoI) )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_false;
};
};
}
else
{
if ( (mu_opcode) == (mu_UPI_Opcode__WbMtoS) )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
}
else
{
if ( (mu_opcode) == (mu_UPI_Opcode__WbMtoE) )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__E;
if ( mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ) )
{
if ( (mu_self.mu_snoopq[mu_address].mu_state) != (mu_SRB_STATE__Idle) )
{
mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_stale = mu_false;
}
else
{
if ( (mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Idle) )
{
mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_stale = mu_true;
}
}
}
}
else
{
if ( (mu_opcode) == (mu_UPI_Opcode__WbEtoI) )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
else
{
if ( (mu_opcode) == (mu_UPI_Opcode__WbMtoIPtl) )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_false;
};
};
if ( mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ) )
{
if ( (mu_self.mu_snoopq[mu_address].mu_state) != (mu_SRB_STATE__Idle) )
{
mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_stale = mu_false;
}
}
}
else
{
if ( (mu_opcode) == (mu_UPI_Opcode__WbMtoEPtl) )
{
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
if (mu_opcode.isundefined())
  mu_packet.mu_opcode.undefine();
else
  mu_packet.mu_opcode = mu_opcode;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
if (mu_alloc_hint.isundefined())
  mu_packet.mu_alloc_hint.undefine();
else
  mu_packet.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__E;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_false;
};
};
if ( mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ) )
{
if ( (mu_self.mu_snoopq[mu_address].mu_state) != (mu_SRB_STATE__Idle) )
{
mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_stale = mu_false;
}
else
{
if ( (mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Idle) )
{
mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_stale = mu_true;
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  Support not added to send req packet for opcode  opcode");
}
}
}
}
}
}
}
}
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_CA__be_either_full_or_empty(mu_1_CA& mu_self,const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag_e("flag_e",0);

/*** Variable declaration ***/
mu_0_boolean mu_flag_f("flag_f",8);

mu_flag_e = mu_true;
mu_flag_f = mu_true;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_cache[mu_address].mu_be[mu_word] )
{
mu_flag_e = mu_false;
}
};
};
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_address].mu_be[mu_word]) )
{
mu_flag_f = mu_false;
}
};
};
bool mu__boolexpr1565;
  if (mu_flag_e) mu__boolexpr1565 = TRUE ;
  else {
  mu__boolexpr1565 = (mu_flag_f) ; 
}
return mu__boolexpr1565;
	Error.Error("The end of function CA__be_either_full_or_empty reached without returning values.");
};
/*** end function declaration ***/

void mu_CA__process_snoop_entry(mu_1_CA& mu_self, const mu_1_Address& mu_address, const mu_1_UPI_Opcode& mu_resp_opcode)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_UPIPacket mu_packet_to_ca("packet_to_ca",72);

mu_Guard ( !(mu_CA__tor_has_matching_wb_or_evict( mu_self, mu_address )) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1566;
bool mu__boolexpr1567;
bool mu__boolexpr1568;
bool mu__boolexpr1569;
bool mu__boolexpr1570;
bool mu__boolexpr1571;
bool mu__boolexpr1572;
bool mu__boolexpr1573;
bool mu__boolexpr1574;
bool mu__boolexpr1575;
  if ((mu_resp_opcode) == (mu_UPI_Opcode__RspI)) mu__boolexpr1575 = TRUE ;
  else {
  mu__boolexpr1575 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspIWb)) ; 
}
  if (mu__boolexpr1575) mu__boolexpr1574 = TRUE ;
  else {
  mu__boolexpr1574 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspS)) ; 
}
  if (mu__boolexpr1574) mu__boolexpr1573 = TRUE ;
  else {
  mu__boolexpr1573 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspSWb)) ; 
}
  if (mu__boolexpr1573) mu__boolexpr1572 = TRUE ;
  else {
  mu__boolexpr1572 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspCurData)) ; 
}
  if (mu__boolexpr1572) mu__boolexpr1571 = TRUE ;
  else {
  mu__boolexpr1571 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspE)) ; 
}
  if (mu__boolexpr1571) mu__boolexpr1570 = TRUE ;
  else {
  mu__boolexpr1570 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspFwdID)) ; 
}
  if (mu__boolexpr1570) mu__boolexpr1569 = TRUE ;
  else {
  mu__boolexpr1569 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIWb)) ; 
}
  if (mu__boolexpr1569) mu__boolexpr1568 = TRUE ;
  else {
  mu__boolexpr1568 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIC)) ; 
}
  if (mu__boolexpr1568) mu__boolexpr1567 = TRUE ;
  else {
  mu__boolexpr1567 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspFwdSWb)) ; 
}
  if (mu__boolexpr1567) mu__boolexpr1566 = TRUE ;
  else {
  mu__boolexpr1566 = ((mu_resp_opcode) == (mu_UPI_Opcode__RspFwdS)) ; 
}
mu_Guard ( mu__boolexpr1566 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1576;
bool mu__boolexpr1577;
bool mu__boolexpr1578;
  if (!(!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address )))) mu__boolexpr1578 = FALSE ;
  else {
bool mu__boolexpr1579;
  if ((mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Ready)) mu__boolexpr1579 = TRUE ;
  else {
  mu__boolexpr1579 = ((mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Resolved)) ; 
}
  mu__boolexpr1578 = (mu__boolexpr1579) ; 
}
  if (mu__boolexpr1578) mu__boolexpr1577 = TRUE ;
  else {
bool mu__boolexpr1580;
bool mu__boolexpr1581;
bool mu__boolexpr1582;
  if (!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ))) mu__boolexpr1582 = FALSE ;
  else {
  mu__boolexpr1582 = (mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_conflict) ; 
}
  if (!(mu__boolexpr1582)) mu__boolexpr1581 = FALSE ;
  else {
  mu__boolexpr1581 = ((mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_state) == (mu_RTID_STATE__SentReq)) ; 
}
  if (!(mu__boolexpr1581)) mu__boolexpr1580 = FALSE ;
  else {
  mu__boolexpr1580 = ((mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Resolved)) ; 
}
  mu__boolexpr1577 = (mu__boolexpr1580) ; 
}
  if (mu__boolexpr1577) mu__boolexpr1576 = TRUE ;
  else {
bool mu__boolexpr1583;
bool mu__boolexpr1584;
  if (!(mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ))) mu__boolexpr1584 = FALSE ;
  else {
  mu__boolexpr1584 = (!(mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_conflict)) ; 
}
  if (!(mu__boolexpr1584)) mu__boolexpr1583 = FALSE ;
  else {
bool mu__boolexpr1585;
  if ((mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Ready)) mu__boolexpr1585 = TRUE ;
  else {
  mu__boolexpr1585 = ((mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Resolved)) ; 
}
  mu__boolexpr1583 = (mu__boolexpr1585) ; 
}
  mu__boolexpr1576 = (mu__boolexpr1583) ; 
}
mu_Guard ( mu__boolexpr1576 );
if ( mu_guard_failed.isundefined() )
{
if ( mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ) )
{
mu_self.mu_tor[mu_CA__matching_readinv_id( mu_self, mu_address )].mu_stale = mu_false;
}
bool mu__boolexpr1586;
  if (mu_CA__ca_be_empty( mu_self, mu_address )) mu__boolexpr1586 = TRUE ;
  else {
  mu__boolexpr1586 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
mu_Guard ( mu__boolexpr1586 );
if ( mu_guard_failed.isundefined() )
{
if ( (mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpLInv) )
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
bool mu__boolexpr1587;
  if ((mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpLCode)) mu__boolexpr1587 = TRUE ;
  else {
  mu__boolexpr1587 = ((mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpLData)) ; 
}
if ( mu__boolexpr1587 )
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspSWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspSWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpLCurr) )
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspCurData) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspCurData;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspCurData) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspCurData;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspE) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspE;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpInvOwn) )
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdID) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdID;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_M;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIC) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIC;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
bool mu__boolexpr1588;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr1588 = TRUE ;
  else {
  mu__boolexpr1588 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__I)) ; 
}
if ( mu__boolexpr1588 )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpCode) )
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdSWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdSWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspSWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspSWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIC) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIC;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S) )
{
if ( mu_self.mu_forwardFromS )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__I) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
}
else
{
if ( (mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpData) )
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdSWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdSWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspSWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspSWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIC) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIC;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S) )
{
if ( mu_self.mu_forwardFromS )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__I) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
}
else
{
if ( (mu_self.mu_snoopq[mu_address].mu_opcode) == (mu_UPI_Opcode__SnpDataMig) )
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdSWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdSWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_E;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdID) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdID;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_M;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspSWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspSWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspIWb) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspIWb;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E) )
{
if ( mu_CA__ca_be_full( mu_self, mu_address ) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdIC) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdIC;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S) )
{
if ( mu_self.mu_forwardFromS )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspFwdS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspFwdS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_packet_to_ca.mu_opcode = mu_UPI_Opcode__Data_SI;
mu_packet_to_ca.mu_rtid = mu_self.mu_snoopq[mu_address].mu_rtid;
mu_packet_to_ca.mu_be = mu_self.mu_cache[mu_address].mu_be;
mu_packet_to_ca.mu_data = mu_self.mu_cache[mu_address].mu_data;
mu_self.mu_to_ca[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_packet_to_ca;
mu_self.mu_to_ca__update[mu_self.mu_snoopq[mu_address].mu_crnid] = mu_true;
mu_rbw_port_transfer (  );
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspS) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
mu_packet.mu_opcode = mu_UPI_Opcode__RspS;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
else
{
if ( (mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__I) )
{
if ( (mu_resp_opcode) == (mu_UPI_Opcode__RspI) )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
mu_packet.mu_opcode = mu_UPI_Opcode__RspI;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_address].mu_htid;
mu_packet.mu_responder_id = mu_self.mu_crnid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
mu_Guard ( mu_false );
}
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  snoop process not added for  self.snoopq[address].opcode");
}
}
}
}
}
}
}
mu_CA_SnoopEntry__release ( mu_self.mu_snoopq[mu_address] );
}
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_CA__is_available_rtid_for_snp(mu_1_CA& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_rtid_usedby_snp[mu_id]) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function CA__is_available_rtid_for_snp reached without returning values.");
};
/*** end function declaration ***/

mu_1_RTID mu_CA__available_rtid(mu_1_CA& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_rtid_usedby_snp[mu_id]) )
{
return mu_id;
}
};
};
	Error.Error("The end of function CA__available_rtid reached without returning values.");
};
/*** end function declaration ***/

void mu_CA__request_fwd_conflict(mu_1_CA& mu_self, const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_1_RTID mu_rtid("rtid",0);

/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",8);

mu_Guard ( mu_CA__is_available_rtid_for_snp( mu_self ) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_self.mu_snoopq[mu_address].mu_state) == (mu_SRB_STATE__Ready) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_CA__tor_has_matching_read_or_inv( mu_self, mu_address ) );
if ( mu_guard_failed.isundefined() )
{
mu_rtid = mu_CA__available_rtid( mu_self );
mu_self.mu_rtid_usedby_snp[mu_rtid] = mu_true;
mu_self.mu_snoopq[mu_address].mu_state = mu_SRB_STATE__ReqSent;
if (mu_rtid.isundefined())
  mu_self.mu_snoopq[mu_address].mu_fwdtid.undefine();
else
  mu_self.mu_snoopq[mu_address].mu_fwdtid = mu_rtid;
mu_packet.mu_opcode = mu_UPI_Opcode__ReqFwdCnflt;
if (mu_rtid.isundefined())
  mu_packet.mu_rtid.undefine();
else
  mu_packet.mu_rtid = mu_rtid;
mu_packet.mu_crnid = mu_self.mu_crnid;
if (mu_address.isundefined())
  mu_packet.mu_address.undefine();
else
  mu_packet.mu_address = mu_address;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_CA__no_active_req(mu_1_CA& mu_self,const mu_1_Address& mu_address)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1589;
  if (!((mu_self.mu_tor[mu_id].mu_state) != (mu_RTID_STATE__Idle))) mu__boolexpr1589 = FALSE ;
  else {
  mu__boolexpr1589 = ((mu_self.mu_tor[mu_id].mu_address) == (mu_address)) ; 
}
if ( mu__boolexpr1589 )
{
return mu_false;
}
};
};
if ( (mu_self.mu_snoopq[mu_address].mu_state) != (mu_SRB_STATE__Idle) )
{
return mu_false;
}
return mu_true;
	Error.Error("The end of function CA__no_active_req reached without returning values.");
};
/*** end function declaration ***/

void mu_CA__ca_modify_cacheline(mu_1_CA& mu_self, const mu_1_Address& mu_address, const mu_1_Word& mu_word, const mu_1_Data& mu_data)
{
bool mu__boolexpr1590;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) mu__boolexpr1590 = TRUE ;
  else {
  mu__boolexpr1590 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
mu_Guard ( mu__boolexpr1590 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1591;
  if (!(mu_self.mu_cache[mu_address].mu_be[mu_word])) mu__boolexpr1591 = TRUE ;
  else {
  mu__boolexpr1591 = ((mu_self.mu_cache[mu_address].mu_data[mu_word]) != (mu_data)) ; 
}
mu_Guard ( mu__boolexpr1591 );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__M;
if (mu_data.isundefined())
  mu_self.mu_cache[mu_address].mu_data[mu_word].undefine();
else
  mu_self.mu_cache[mu_address].mu_data[mu_word] = mu_data;
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_true;
}
}
};
/*** end procedure declaration ***/

void mu_CA__ca_downgrade_cacheline(mu_1_CA& mu_self, const mu_1_Address& mu_address, const mu_1_CacheOp& mu_cacheOp)
{
bool mu__boolexpr1592;
bool mu__boolexpr1593;
bool mu__boolexpr1594;
bool mu__boolexpr1595;
bool mu__boolexpr1596;
  if (!((mu_cacheOp) == (mu_CacheOp__ToI))) mu__boolexpr1596 = FALSE ;
  else {
bool mu__boolexpr1597;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) mu__boolexpr1597 = TRUE ;
  else {
  mu__boolexpr1597 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S)) ; 
}
  mu__boolexpr1596 = (mu__boolexpr1597) ; 
}
  if (mu__boolexpr1596) mu__boolexpr1595 = TRUE ;
  else {
bool mu__boolexpr1598;
bool mu__boolexpr1599;
  if (!((mu_cacheOp) == (mu_CacheOp__ToI))) mu__boolexpr1599 = FALSE ;
  else {
  mu__boolexpr1599 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  if (!(mu__boolexpr1599)) mu__boolexpr1598 = FALSE ;
  else {
  mu__boolexpr1598 = (mu_CA__ca_be_empty( mu_self, mu_address )) ; 
}
  mu__boolexpr1595 = (mu__boolexpr1598) ; 
}
  if (mu__boolexpr1595) mu__boolexpr1594 = TRUE ;
  else {
bool mu__boolexpr1600;
bool mu__boolexpr1601;
  if (!((mu_cacheOp) == (mu_CacheOp__ToS))) mu__boolexpr1601 = FALSE ;
  else {
  mu__boolexpr1601 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr1601)) mu__boolexpr1600 = FALSE ;
  else {
  mu__boolexpr1600 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
  mu__boolexpr1594 = (mu__boolexpr1600) ; 
}
  if (mu__boolexpr1594) mu__boolexpr1593 = TRUE ;
  else {
bool mu__boolexpr1602;
bool mu__boolexpr1603;
  if (!((mu_cacheOp) == (mu_CacheOp__ToEmptyE))) mu__boolexpr1603 = FALSE ;
  else {
  mu__boolexpr1603 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  if (!(mu__boolexpr1603)) mu__boolexpr1602 = FALSE ;
  else {
  mu__boolexpr1602 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
  mu__boolexpr1593 = (mu__boolexpr1602) ; 
}
  if (mu__boolexpr1593) mu__boolexpr1592 = TRUE ;
  else {
bool mu__boolexpr1604;
bool mu__boolexpr1605;
  if (!((mu_cacheOp) == (mu_CacheOp__ToEmptyE))) mu__boolexpr1605 = FALSE ;
  else {
  mu__boolexpr1605 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  if (!(mu__boolexpr1605)) mu__boolexpr1604 = FALSE ;
  else {
  mu__boolexpr1604 = (mu_CA__ca_be_empty( mu_self, mu_address )) ; 
}
  mu__boolexpr1592 = (mu__boolexpr1604) ; 
}
mu_Guard ( mu__boolexpr1592 );
if ( mu_guard_failed.isundefined() )
{
if ( (mu_cacheOp) == (mu_CacheOp__ToI) )
{
bool mu__boolexpr1606;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) mu__boolexpr1606 = TRUE ;
  else {
  mu__boolexpr1606 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S)) ; 
}
if ( mu__boolexpr1606 )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_false;
};
};
}
else
{
bool mu__boolexpr1607;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M))) mu__boolexpr1607 = FALSE ;
  else {
  mu__boolexpr1607 = (mu_CA__ca_be_empty( mu_self, mu_address )) ; 
}
if ( mu__boolexpr1607 )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__I;
}
}
}
else
{
if ( (mu_cacheOp) == (mu_CacheOp__ToS) )
{
bool mu__boolexpr1608;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E))) mu__boolexpr1608 = FALSE ;
  else {
  mu__boolexpr1608 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
if ( mu__boolexpr1608 )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__S;
}
}
else
{
if ( (mu_cacheOp) == (mu_CacheOp__ToEmptyE) )
{
bool mu__boolexpr1609;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E))) mu__boolexpr1609 = FALSE ;
  else {
  mu__boolexpr1609 = (mu_CA__ca_be_full( mu_self, mu_address )) ; 
}
if ( mu__boolexpr1609 )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__E;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_false;
};
};
}
else
{
bool mu__boolexpr1610;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M))) mu__boolexpr1610 = FALSE ;
  else {
  mu__boolexpr1610 = (mu_CA__ca_be_empty( mu_self, mu_address )) ; 
}
if ( mu__boolexpr1610 )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__E;
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed: Guard needs to be updated");
}
}
}
}
};
/*** end procedure declaration ***/

void mu_UChannel__1__reset(mu_1_UChannel__1& mu_self)
{
mu_self.mu_count = 0;
mu_self.mu_pkts.undefine();
};
/*** end procedure declaration ***/

mu_1_UPIPacket mu_UChannel__1__pop(mu_1_UChannel__1& mu_self,const mu_1_Index__1& mu_index)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_pkt("pkt",0);

mu_pkt = mu_self.mu_pkts[mu_index];
return mu_pkt;
	Error.Error("The end of function UChannel__1__pop reached without returning values.");
};
/*** end function declaration ***/

void mu_UChannel__1__left_shift(mu_1_UChannel__1& mu_self, const mu_1_Index__1& mu_index)
{
{
int mu__ub1611 = ((mu_self.mu_count) - (1)) - (1);
for (int mu_i = mu_index; mu_i <= mu__ub1611; mu_i += 1) {
mu_self.mu_pkts[mu_i] = mu_self.mu_pkts[(mu_i) + (1)];
};
};
mu_self.mu_count = (mu_self.mu_count) - (1);
mu_self.mu_pkts[mu_self.mu_count].undefine();
};
/*** end procedure declaration ***/

void mu_CChannel__1__reset(mu_1_CChannel__1& mu_self)
{
mu_self.mu_count = 0;
mu_self.mu_pkts.undefine();
};
/*** end procedure declaration ***/

mu_1_CXMPacket mu_CChannel__1__pop(mu_1_CChannel__1& mu_self,const mu_1_Index__1& mu_index)
{
/*** Variable declaration ***/
mu_1_CXMPacket mu_pkt("pkt",0);

mu_pkt = mu_self.mu_pkts[mu_index];
return mu_pkt;
	Error.Error("The end of function CChannel__1__pop reached without returning values.");
};
/*** end function declaration ***/

void mu_CChannel__1__left_shift(mu_1_CChannel__1& mu_self, const mu_1_Index__1& mu_index)
{
{
int mu__ub1612 = ((mu_self.mu_count) - (1)) - (1);
for (int mu_i = mu_index; mu_i <= mu__ub1612; mu_i += 1) {
mu_self.mu_pkts[mu_i] = mu_self.mu_pkts[(mu_i) + (1)];
};
};
mu_self.mu_count = (mu_self.mu_count) - (1);
mu_self.mu_pkts[mu_self.mu_count].undefine();
};
/*** end procedure declaration ***/

void mu_ULink__reset(mu_1_ULink& mu_self)
{
mu_UChannel__1__reset ( mu_self.mu_CAReq );
mu_UChannel__1__reset ( mu_self.mu_CAWb );
mu_UChannel__1__reset ( mu_self.mu_CAResp );
mu_UChannel__1__reset ( mu_self.mu_HASnp );
mu_UChannel__1__reset ( mu_self.mu_HAResp );
mu_CChannel__1__reset ( mu_self.mu_MCResp );
};
/*** end procedure declaration ***/

void mu_ULink__send_CAReq_packet(mu_1_ULink& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_CAReq.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_packet = mu_UChannel__1__pop( mu_self.mu_CAReq, (int)mu_index );
mu_self.mu_to_ha = mu_packet;
mu_self.mu_to_ha__update = mu_true;
mu_rbw_port_transfer (  );
mu_UChannel__1__left_shift ( mu_self.mu_CAReq, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_ULink__send_CAWb_packet(mu_1_ULink& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_CAWb.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_packet = mu_UChannel__1__pop( mu_self.mu_CAWb, (int)mu_index );
mu_self.mu_to_ha = mu_packet;
mu_self.mu_to_ha__update = mu_true;
mu_rbw_port_transfer (  );
mu_UChannel__1__left_shift ( mu_self.mu_CAWb, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_ULink__send_CAResp_packet(mu_1_ULink& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_CAResp.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_packet = mu_UChannel__1__pop( mu_self.mu_CAResp, (int)mu_index );
mu_self.mu_to_ha = mu_packet;
mu_self.mu_to_ha__update = mu_true;
mu_rbw_port_transfer (  );
mu_UChannel__1__left_shift ( mu_self.mu_CAResp, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_ULink__no_pending_Cmpl(mu_1_ULink& mu_self,const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag("flag",0);

mu_flag = mu_true;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( (mu_id) != (mu_index) )
{
bool mu__boolexpr1613;
  if (!((mu_id) < (mu_self.mu_HAResp.mu_count))) mu__boolexpr1613 = FALSE ;
  else {
bool mu__boolexpr1614;
bool mu__boolexpr1615;
  if ((mu_self.mu_HAResp.mu_pkts[mu_id].mu_opcode) == (mu_UPI_Opcode__SI_CmpO)) mu__boolexpr1615 = TRUE ;
  else {
  mu__boolexpr1615 = ((mu_self.mu_HAResp.mu_pkts[mu_id].mu_opcode) == (mu_UPI_Opcode__E_CmpO)) ; 
}
  if (mu__boolexpr1615) mu__boolexpr1614 = TRUE ;
  else {
  mu__boolexpr1614 = ((mu_self.mu_HAResp.mu_pkts[mu_id].mu_opcode) == (mu_UPI_Opcode__M_CmpO)) ; 
}
  mu__boolexpr1613 = (mu__boolexpr1614) ; 
}
if ( mu__boolexpr1613 )
{
mu_flag = mu_false;
}
}
};
};
bool mu__boolexpr1616;
  if ((mu_self.mu_HAResp.mu_count) == (0)) mu__boolexpr1616 = TRUE ;
  else {
  mu__boolexpr1616 = (mu_flag) ; 
}
return mu__boolexpr1616;
	Error.Error("The end of function ULink__no_pending_Cmpl reached without returning values.");
};
/*** end function declaration ***/

void mu_ULink__send_HAResp_packet(mu_1_ULink& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_HAResp.mu_count) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1617;
  if (!((mu_self.mu_HAResp.mu_pkts[mu_index].mu_opcode) == (mu_UPI_Opcode__FwdCnfltO))) mu__boolexpr1617 = TRUE ;
  else {
  mu__boolexpr1617 = (mu_ULink__no_pending_Cmpl( mu_self, mu_index )) ; 
}
mu_Guard ( mu__boolexpr1617 );
if ( mu_guard_failed.isundefined() )
{
mu_packet = mu_UChannel__1__pop( mu_self.mu_HAResp, (int)mu_index );
mu_self.mu_to_ca = mu_packet;
mu_self.mu_to_ca__update = mu_true;
mu_rbw_port_transfer (  );
mu_UChannel__1__left_shift ( mu_self.mu_HAResp, (int)mu_index );
}
}
}
};
/*** end procedure declaration ***/

void mu_ULink__send_MCResp_packet(mu_1_ULink& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_CXMPacket mu_packet("packet",0);

/*** Variable declaration ***/
mu_1_IDIPacket mu_idiPacket("idiPacket",72);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_MCResp.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_packet = mu_CChannel__1__pop( mu_self.mu_MCResp, (int)mu_index );
mu_idiPacket.mu_opcode = mu_IDI_Opcode__Data;
mu_idiPacket.mu_rtid = mu_packet.mu_rtid;
mu_idiPacket.mu_data = mu_packet.mu_data;
mu_self.mu_to_core = mu_idiPacket;
mu_self.mu_to_core__update = mu_true;
mu_rbw_port_transfer (  );
mu_CChannel__1__left_shift ( mu_self.mu_MCResp, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_ULink__send_HASnp_packet(mu_1_ULink& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_UPIPacket mu_packet("packet",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_HASnp.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_packet = mu_UChannel__1__pop( mu_self.mu_HASnp, (int)mu_index );
mu_self.mu_to_ca = mu_packet;
mu_self.mu_to_ca__update = mu_true;
mu_rbw_port_transfer (  );
mu_UChannel__1__left_shift ( mu_self.mu_HASnp, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_CQEntry__release(mu_1_CQEntry& mu_self)
{
mu_self.mu_valid = mu_false;
mu_self.mu_opcode.undefine();
mu_self.mu_resp_recvd = mu_false;
mu_self.mu_respstate.undefine();
mu_self.mu_address.undefine();
mu_self.mu_data_recvd = mu_false;
mu_self.mu_selfsnp = mu_false;
mu_self.mu_data_sent = mu_false;
mu_self.mu_htid.undefine();
mu_self.mu_extcmp_recvd = mu_false;
mu_self.mu_resp_opcode.undefine();
mu_self.mu_bogus = mu_false;
mu_self.mu_data.undefine();
mu_self.mu_stale = mu_false;
};
/*** end procedure declaration ***/

void mu_CQEntry__load(mu_1_CQEntry& mu_self, const mu_1_IDI_Opcode& mu_opcode, const mu_1_Address& mu_address, const mu_0_boolean& mu_selfsnp)
{
mu_self.mu_valid = mu_true;
if (mu_opcode.isundefined())
  mu_self.mu_opcode.undefine();
else
  mu_self.mu_opcode = mu_opcode;
if (mu_address.isundefined())
  mu_self.mu_address.undefine();
else
  mu_self.mu_address = mu_address;
if (mu_selfsnp.isundefined())
  mu_self.mu_selfsnp.undefine();
else
  mu_self.mu_selfsnp = mu_selfsnp;
};
/*** end procedure declaration ***/

void mu_SnoopEntry__release(mu_1_SnoopEntry& mu_self)
{
mu_self.mu_valid = mu_false;
mu_self.mu_opcode.undefine();
mu_self.mu_address.undefine();
mu_self.mu_htid.undefine();
mu_self.mu_data_sent = mu_false;
mu_self.mu_resp_sent = mu_false;
mu_self.mu_resp_opcode.undefine();
mu_self.mu_resp_computed = mu_false;
};
/*** end procedure declaration ***/

void mu_IDIAgent__reset(mu_1_IDIAgent& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_CQEntry__release ( mu_self.mu_cq[mu_id] );
};
};
{
for(int mu_addr = 0; mu_addr <= 0; mu_addr++) {
mu_CacheEntry__release ( mu_self.mu_cache[mu_addr] );
mu_self.mu_address_monitored[mu_addr] = mu_false;
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
mu_SnoopEntry__release ( mu_self.mu_snoopq[mu_id] );
};
};
};
/*** end procedure declaration ***/

mu_0_boolean mu_IDIAgent__is_available_cqentry(mu_1_IDIAgent& mu_self)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_cq[mu_id].mu_valid) )
{
return mu_true;
}
};
};
return mu_false;
	Error.Error("The end of function IDIAgent__is_available_cqentry reached without returning values.");
};
/*** end function declaration ***/

mu_1_RTID mu_IDIAgent__available_cqentry(mu_1_IDIAgent& mu_self)
{
/*** Variable declaration ***/
mu_1_RTID mu_ret_id("ret_id",0);

{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
if ( !(mu_self.mu_cq[mu_id].mu_valid) )
{
mu_ret_id = mu_id;
}
};
};
return mu_ret_id;
	Error.Error("The end of function IDIAgent__available_cqentry reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_IDIAgent__all_caches_are_flushed(mu_1_IDIAgent& mu_self)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag("flag",0);

mu_flag = mu_true;
{
for(int mu_address = 0; mu_address <= 0; mu_address++) {
if ( !((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__I)) )
{
mu_flag = mu_false;
return mu_flag;
}
};
};
return mu_flag;
	Error.Error("The end of function IDIAgent__all_caches_are_flushed reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_IDIAgent__no_outstanding_ordering_request(mu_1_IDIAgent& mu_self,const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag("flag",0);

mu_flag = mu_true;
{
for(int mu_rtid = 0; mu_rtid <= 0; mu_rtid++) {
bool mu__boolexpr1618;
bool mu__boolexpr1619;
bool mu__boolexpr1620;
  if (!(mu_self.mu_cq[mu_rtid].mu_valid)) mu__boolexpr1620 = FALSE ;
  else {
bool mu__boolexpr1621;
bool mu__boolexpr1622;
bool mu__boolexpr1623;
bool mu__boolexpr1624;
bool mu__boolexpr1625;
bool mu__boolexpr1626;
bool mu__boolexpr1627;
bool mu__boolexpr1628;
bool mu__boolexpr1629;
bool mu__boolexpr1630;
bool mu__boolexpr1631;
bool mu__boolexpr1632;
bool mu__boolexpr1633;
bool mu__boolexpr1634;
bool mu__boolexpr1635;
bool mu__boolexpr1636;
  if ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr1636 = TRUE ;
  else {
  mu__boolexpr1636 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1636) mu__boolexpr1635 = TRUE ;
  else {
  mu__boolexpr1635 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1635) mu__boolexpr1634 = TRUE ;
  else {
  mu__boolexpr1634 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr1634) mu__boolexpr1633 = TRUE ;
  else {
  mu__boolexpr1633 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__ItoMWr)) ; 
}
  if (mu__boolexpr1633) mu__boolexpr1632 = TRUE ;
  else {
  mu__boolexpr1632 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1632) mu__boolexpr1631 = TRUE ;
  else {
  mu__boolexpr1631 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr1631) mu__boolexpr1630 = TRUE ;
  else {
  mu__boolexpr1630 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1630) mu__boolexpr1629 = TRUE ;
  else {
  mu__boolexpr1629 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1629) mu__boolexpr1628 = TRUE ;
  else {
  mu__boolexpr1628 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr1628) mu__boolexpr1627 = TRUE ;
  else {
  mu__boolexpr1627 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr1627) mu__boolexpr1626 = TRUE ;
  else {
  mu__boolexpr1626 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr1626) mu__boolexpr1625 = TRUE ;
  else {
  mu__boolexpr1625 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1625) mu__boolexpr1624 = TRUE ;
  else {
  mu__boolexpr1624 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1624) mu__boolexpr1623 = TRUE ;
  else {
  mu__boolexpr1623 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1623) mu__boolexpr1622 = TRUE ;
  else {
  mu__boolexpr1622 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr1622) mu__boolexpr1621 = TRUE ;
  else {
  mu__boolexpr1621 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  mu__boolexpr1620 = (mu__boolexpr1621) ; 
}
  if (!(mu__boolexpr1620)) mu__boolexpr1619 = FALSE ;
  else {
  mu__boolexpr1619 = ((mu_self.mu_cq[mu_rtid].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1619)) mu__boolexpr1618 = FALSE ;
  else {
  mu__boolexpr1618 = (!(mu_self.mu_cq[mu_rtid].mu_resp_recvd)) ; 
}
if ( mu__boolexpr1618 )
{
mu_flag = mu_false;
}
};
};
return mu_flag;
	Error.Error("The end of function IDIAgent__no_outstanding_ordering_request reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_IDIAgent__agent_be_full(mu_1_IDIAgent& mu_self,const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag_f("flag_f",0);

mu_flag_f = mu_true;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_cache[mu_address].mu_be[mu_word]) )
{
mu_flag_f = mu_false;
}
};
};
return mu_flag_f;
	Error.Error("The end of function IDIAgent__agent_be_full reached without returning values.");
};
/*** end function declaration ***/

void mu_IDIAgent__new_request(mu_1_IDIAgent& mu_self, const mu_1_IDI_Opcode& mu_opcode, const mu_1_Address& mu_address, const mu_0_boolean& mu_selfsnp, const mu_0_boolean& mu_alloc_hint)
{
/*** Variable declaration ***/
mu_1_RTID mu_rtid("rtid",0);

/*** Variable declaration ***/
mu_1_IDIPacket mu_pkt("pkt",8);

bool mu__boolexpr1637;
bool mu__boolexpr1638;
bool mu__boolexpr1639;
bool mu__boolexpr1640;
bool mu__boolexpr1641;
bool mu__boolexpr1642;
bool mu__boolexpr1643;
bool mu__boolexpr1644;
bool mu__boolexpr1645;
bool mu__boolexpr1646;
bool mu__boolexpr1647;
bool mu__boolexpr1648;
bool mu__boolexpr1649;
bool mu__boolexpr1650;
bool mu__boolexpr1651;
bool mu__boolexpr1652;
bool mu__boolexpr1653;
bool mu__boolexpr1654;
bool mu__boolexpr1655;
bool mu__boolexpr1656;
bool mu__boolexpr1657;
bool mu__boolexpr1658;
bool mu__boolexpr1659;
  if ((mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr1659 = TRUE ;
  else {
  mu__boolexpr1659 = ((mu_opcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr1659) mu__boolexpr1658 = TRUE ;
  else {
  mu__boolexpr1658 = ((mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1658) mu__boolexpr1657 = TRUE ;
  else {
  mu__boolexpr1657 = ((mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1657) mu__boolexpr1656 = TRUE ;
  else {
  mu__boolexpr1656 = ((mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr1656) mu__boolexpr1655 = TRUE ;
  else {
  mu__boolexpr1655 = ((mu_opcode) == (mu_IDI_Opcode__ItoMWr)) ; 
}
  if (mu__boolexpr1655) mu__boolexpr1654 = TRUE ;
  else {
  mu__boolexpr1654 = ((mu_opcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1654) mu__boolexpr1653 = TRUE ;
  else {
  mu__boolexpr1653 = ((mu_opcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr1653) mu__boolexpr1652 = TRUE ;
  else {
  mu__boolexpr1652 = ((mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1652) mu__boolexpr1651 = TRUE ;
  else {
  mu__boolexpr1651 = ((mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1651) mu__boolexpr1650 = TRUE ;
  else {
  mu__boolexpr1650 = ((mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr1650) mu__boolexpr1649 = TRUE ;
  else {
  mu__boolexpr1649 = ((mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr1649) mu__boolexpr1648 = TRUE ;
  else {
  mu__boolexpr1648 = ((mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr1648) mu__boolexpr1647 = TRUE ;
  else {
  mu__boolexpr1647 = ((mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1647) mu__boolexpr1646 = TRUE ;
  else {
  mu__boolexpr1646 = ((mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1646) mu__boolexpr1645 = TRUE ;
  else {
  mu__boolexpr1645 = ((mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1645) mu__boolexpr1644 = TRUE ;
  else {
  mu__boolexpr1644 = ((mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr1644) mu__boolexpr1643 = TRUE ;
  else {
  mu__boolexpr1643 = ((mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr1643) mu__boolexpr1642 = TRUE ;
  else {
  mu__boolexpr1642 = ((mu_opcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr1642) mu__boolexpr1641 = TRUE ;
  else {
  mu__boolexpr1641 = ((mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (mu__boolexpr1641) mu__boolexpr1640 = TRUE ;
  else {
  mu__boolexpr1640 = ((mu_opcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1640) mu__boolexpr1639 = TRUE ;
  else {
  mu__boolexpr1639 = ((mu_opcode) == (mu_IDI_Opcode__ClrMonitor)) ; 
}
  if (mu__boolexpr1639) mu__boolexpr1638 = TRUE ;
  else {
  mu__boolexpr1638 = ((mu_opcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  if (!(mu__boolexpr1638)) mu__boolexpr1637 = FALSE ;
  else {
  mu__boolexpr1637 = (mu_IDIAgent__is_available_cqentry( mu_self )) ; 
}
mu_Guard ( mu__boolexpr1637 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1660;
bool mu__boolexpr1661;
  if ((mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1661 = TRUE ;
  else {
  mu__boolexpr1661 = ((mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (!(mu__boolexpr1661)) mu__boolexpr1660 = TRUE ;
  else {
bool mu__boolexpr1662;
bool mu__boolexpr1663;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) mu__boolexpr1663 = TRUE ;
  else {
  mu__boolexpr1663 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S)) ; 
}
  if (!(mu__boolexpr1663)) mu__boolexpr1662 = FALSE ;
  else {
  mu__boolexpr1662 = (mu_IDIAgent__agent_be_full( mu_self, mu_address )) ; 
}
  mu__boolexpr1660 = (mu__boolexpr1662) ; 
}
mu_Guard ( mu__boolexpr1660 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1664;
bool mu__boolexpr1665;
  if ((mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) mu__boolexpr1665 = TRUE ;
  else {
  mu__boolexpr1665 = ((mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (!(mu__boolexpr1665)) mu__boolexpr1664 = TRUE ;
  else {
bool mu__boolexpr1666;
  if (!((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M))) mu__boolexpr1666 = FALSE ;
  else {
  mu__boolexpr1666 = (mu_IDIAgent__agent_be_full( mu_self, mu_address )) ; 
}
  mu__boolexpr1664 = (mu__boolexpr1666) ; 
}
mu_Guard ( mu__boolexpr1664 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1667;
  if (!((mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData))) mu__boolexpr1667 = TRUE ;
  else {
bool mu__boolexpr1668;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr1668 = TRUE ;
  else {
  mu__boolexpr1668 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) ; 
}
  mu__boolexpr1667 = (mu__boolexpr1668) ; 
}
mu_Guard ( mu__boolexpr1667 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1669;
  if (!((mu_opcode) == (mu_IDI_Opcode__SetMonitor))) mu__boolexpr1669 = TRUE ;
  else {
  mu__boolexpr1669 = (!(mu_self.mu_address_monitored[mu_address])) ; 
}
mu_Guard ( mu__boolexpr1669 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1670;
bool mu__boolexpr1671;
  if (!((mu_opcode) == (mu_IDI_Opcode__CLFlush))) mu__boolexpr1671 = FALSE ;
  else {
  mu__boolexpr1671 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
  if (!(mu__boolexpr1671)) mu__boolexpr1670 = TRUE ;
  else {
  mu__boolexpr1670 = (mu_selfsnp) ; 
}
mu_Guard ( mu__boolexpr1670 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1672;
  if (!((mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache))) mu__boolexpr1672 = TRUE ;
  else {
  mu__boolexpr1672 = (mu_alloc_hint) ; 
}
mu_Guard ( mu__boolexpr1672 );
if ( mu_guard_failed.isundefined() )
{
mu_rtid = mu_IDIAgent__available_cqentry( mu_self );
mu_CQEntry__load ( mu_self.mu_cq[mu_rtid], mu_opcode, mu_address, mu_selfsnp );
if (mu_rtid.isundefined())
  mu_pkt.mu_rtid.undefine();
else
  mu_pkt.mu_rtid = mu_rtid;
if (mu_opcode.isundefined())
  mu_pkt.mu_opcode.undefine();
else
  mu_pkt.mu_opcode = mu_opcode;
if (mu_address.isundefined())
  mu_pkt.mu_address.undefine();
else
  mu_pkt.mu_address = mu_address;
if (mu_selfsnp.isundefined())
  mu_pkt.mu_selfsnp.undefine();
else
  mu_pkt.mu_selfsnp = mu_selfsnp;
if (mu_alloc_hint.isundefined())
  mu_pkt.mu_alloc_hint.undefine();
else
  mu_pkt.mu_alloc_hint = mu_alloc_hint;
mu_self.mu_to_hbo = mu_pkt;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
if ( (mu_opcode) == (mu_IDI_Opcode__SetMonitor) )
{
mu_self.mu_address_monitored[mu_address] = mu_true;
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_IDIAgent__agent_be_empty(mu_1_IDIAgent& mu_self,const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag_f("flag_f",0);

mu_flag_f = mu_true;
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_cache[mu_address].mu_be[mu_word] )
{
mu_flag_f = mu_false;
}
};
};
return mu_flag_f;
	Error.Error("The end of function IDIAgent__agent_be_empty reached without returning values.");
};
/*** end function declaration ***/

void mu_IDIAgent__compute_snoop_response(mu_1_IDIAgent& mu_self, const mu_1_Snoopq_sz& mu_idx, const mu_1_range__3& mu_bias)
{
bool mu__boolexpr1673;
bool mu__boolexpr1674;
  if (!(mu_self.mu_snoopq[mu_idx].mu_valid)) mu__boolexpr1674 = FALSE ;
  else {
  mu__boolexpr1674 = (!(mu_self.mu_snoopq[mu_idx].mu_resp_sent)) ; 
}
  if (!(mu__boolexpr1674)) mu__boolexpr1673 = FALSE ;
  else {
  mu__boolexpr1673 = (!(mu_self.mu_snoopq[mu_idx].mu_resp_computed)) ; 
}
mu_Guard ( mu__boolexpr1673 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1675;
  if (mu_IDIAgent__agent_be_full( mu_self, mu_self.mu_snoopq[mu_idx].mu_address )) mu__boolexpr1675 = TRUE ;
  else {
  mu__boolexpr1675 = (mu_IDIAgent__agent_be_empty( mu_self, mu_self.mu_snoopq[mu_idx].mu_address )) ; 
}
mu_Guard ( mu__boolexpr1675 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1676;
  if ((mu_self.mu_snoopq[mu_idx].mu_opcode) == (mu_IDI_Opcode__SnpCode)) mu__boolexpr1676 = TRUE ;
  else {
  mu__boolexpr1676 = ((mu_self.mu_snoopq[mu_idx].mu_opcode) == (mu_IDI_Opcode__SnpData)) ; 
}
if ( mu__boolexpr1676 )
{
if ( (mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__I) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIHitI;
}
else
{
bool mu__boolexpr1677;
  if ((mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr1677 = TRUE ;
  else {
  mu__boolexpr1677 = ((mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
if ( mu__boolexpr1677 )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspSHitSE;
}
else
{
if ( (mu_bias) == (0) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIFwdM;
}
else
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspSFwdM;
}
}
}
}
else
{
bool mu__boolexpr1678;
  if ((mu_self.mu_snoopq[mu_idx].mu_opcode) == (mu_IDI_Opcode__SnpInv)) mu__boolexpr1678 = TRUE ;
  else {
  mu__boolexpr1678 = ((mu_self.mu_snoopq[mu_idx].mu_opcode) == (mu_IDI_Opcode__BackInv)) ; 
}
if ( mu__boolexpr1678 )
{
if ( (mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__I) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIHitI;
}
else
{
bool mu__boolexpr1679;
  if ((mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr1679 = TRUE ;
  else {
  mu__boolexpr1679 = ((mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
if ( mu__boolexpr1679 )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIHitSE;
}
else
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIFwdM;
}
}
}
else
{
if ( (mu_self.mu_snoopq[mu_idx].mu_opcode) == (mu_IDI_Opcode__SnpCur) )
{
if ( (mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__I) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIHitI;
}
else
{
bool mu__boolexpr1680;
  if ((mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__S)) mu__boolexpr1680 = TRUE ;
  else {
  mu__boolexpr1680 = ((mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__E)) ; 
}
if ( mu__boolexpr1680 )
{
if ( (mu_bias) == (0) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIHitSE;
}
else
{
if ( (mu_bias) == (1) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspSHitSE;
}
else
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspVHitV;
}
}
}
else
{
if ( (mu_bias) == (0) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspIFwdM;
}
else
{
if ( (mu_bias) == (1) )
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspSFwdM;
}
else
{
mu_self.mu_snoopq[mu_idx].mu_resp_opcode = mu_IDI_Opcode__RspVFwdV;
}
}
}
}
}
else
{
if ( !(mu_false) ) Error.Error("Assertion failed:  snoop response not defined for opcode  self.snoopq[idx].opcode");
}
}
}
mu_self.mu_snoopq[mu_idx].mu_resp_computed = mu_true;
}
}
};
/*** end procedure declaration ***/

void mu_IDIAgent__update_cq(mu_1_IDIAgent& mu_self, const mu_1_Address& mu_address, const mu_1_CacheState& mu_cs)
{
{
for(int mu_rtid = 0; mu_rtid <= 0; mu_rtid++) {
bool mu__boolexpr1681;
bool mu__boolexpr1682;
bool mu__boolexpr1683;
  if (!(mu_self.mu_cq[mu_rtid].mu_valid)) mu__boolexpr1683 = FALSE ;
  else {
  mu__boolexpr1683 = ((mu_self.mu_cq[mu_rtid].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1683)) mu__boolexpr1682 = FALSE ;
  else {
  mu__boolexpr1682 = (mu_self.mu_cq[mu_rtid].mu_resp_recvd) ; 
}
  if (!(mu__boolexpr1682)) mu__boolexpr1681 = FALSE ;
  else {
  mu__boolexpr1681 = ((mu_cs) == (mu_CacheState__I)) ; 
}
if ( mu__boolexpr1681 )
{
mu_self.mu_cq[mu_rtid].mu_stale = mu_true;
}
};
};
};
/*** end procedure declaration ***/

void mu_IDIAgent__send_snoop_response(mu_1_IDIAgent& mu_self, const mu_1_Snoopq_sz& mu_idx)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

bool mu__boolexpr1684;
bool mu__boolexpr1685;
  if (!(mu_self.mu_snoopq[mu_idx].mu_valid)) mu__boolexpr1685 = FALSE ;
  else {
  mu__boolexpr1685 = (!(mu_self.mu_snoopq[mu_idx].mu_resp_sent)) ; 
}
  if (!(mu__boolexpr1685)) mu__boolexpr1684 = FALSE ;
  else {
  mu__boolexpr1684 = (mu_self.mu_snoopq[mu_idx].mu_resp_computed) ; 
}
mu_Guard ( mu__boolexpr1684 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1686;
  if ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspSHitSE)) mu__boolexpr1686 = TRUE ;
  else {
  mu__boolexpr1686 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
if ( mu__boolexpr1686 )
{
mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state = mu_CacheState__S;
}
else
{
bool mu__boolexpr1687;
  if ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIHitSE)) mu__boolexpr1687 = TRUE ;
  else {
  mu__boolexpr1687 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIFwdM)) ; 
}
if ( mu__boolexpr1687 )
{
mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state = mu_CacheState__I;
if ( (mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIHitSE) )
{
{
for(int mu_rtid = 0; mu_rtid <= 0; mu_rtid++) {
bool mu__boolexpr1688;
bool mu__boolexpr1689;
  if (!(mu_self.mu_cq[mu_rtid].mu_valid)) mu__boolexpr1689 = FALSE ;
  else {
  mu__boolexpr1689 = ((mu_self.mu_cq[mu_rtid].mu_address) == (mu_self.mu_snoopq[mu_idx].mu_address)) ; 
}
  if (!(mu__boolexpr1689)) mu__boolexpr1688 = FALSE ;
  else {
  mu__boolexpr1688 = (mu_self.mu_cq[mu_rtid].mu_resp_recvd) ; 
}
if ( mu__boolexpr1688 )
{
mu_self.mu_cq[mu_rtid].mu_stale = mu_true;
}
};
};
}
}
}
mu_self.mu_snoopq[mu_idx].mu_resp_sent = mu_true;
mu_packet.mu_opcode = mu_self.mu_snoopq[mu_idx].mu_resp_opcode;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_idx].mu_htid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
bool mu__boolexpr1690;
  if ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIFwdM)) mu__boolexpr1690 = TRUE ;
  else {
  mu__boolexpr1690 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIHitSE)) ; 
}
if ( mu__boolexpr1690 )
{
{
for(int mu_cqid = 0; mu_cqid <= 0; mu_cqid++) {
bool mu__boolexpr1691;
bool mu__boolexpr1692;
bool mu__boolexpr1693;
  if (!(mu_self.mu_cq[mu_cqid].mu_valid)) mu__boolexpr1693 = FALSE ;
  else {
bool mu__boolexpr1694;
bool mu__boolexpr1695;
bool mu__boolexpr1696;
  if ((mu_self.mu_cq[mu_cqid].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1696 = TRUE ;
  else {
  mu__boolexpr1696 = ((mu_self.mu_cq[mu_cqid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1696) mu__boolexpr1695 = TRUE ;
  else {
  mu__boolexpr1695 = ((mu_self.mu_cq[mu_cqid].mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1695) mu__boolexpr1694 = TRUE ;
  else {
  mu__boolexpr1694 = ((mu_self.mu_cq[mu_cqid].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  mu__boolexpr1693 = (mu__boolexpr1694) ; 
}
  if (!(mu__boolexpr1693)) mu__boolexpr1692 = FALSE ;
  else {
  mu__boolexpr1692 = ((mu_self.mu_cq[mu_cqid].mu_data_sent) == (mu_false)) ; 
}
  if (!(mu__boolexpr1692)) mu__boolexpr1691 = FALSE ;
  else {
  mu__boolexpr1691 = ((mu_self.mu_cq[mu_cqid].mu_address) == (mu_self.mu_snoopq[mu_idx].mu_address)) ; 
}
if ( mu__boolexpr1691 )
{
mu_self.mu_cq[mu_cqid].mu_bogus = mu_true;
}
};
};
}
if ( (mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIHitSE) )
{
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address] );
}
bool mu__boolexpr1697;
bool mu__boolexpr1698;
bool mu__boolexpr1699;
  if ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspSHitSE)) mu__boolexpr1699 = TRUE ;
  else {
  mu__boolexpr1699 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIHitSE)) ; 
}
  if (mu__boolexpr1699) mu__boolexpr1698 = TRUE ;
  else {
  mu__boolexpr1698 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIHitI)) ; 
}
  if (mu__boolexpr1698) mu__boolexpr1697 = TRUE ;
  else {
  mu__boolexpr1697 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspVHitV)) ; 
}
if ( mu__boolexpr1697 )
{
mu_SnoopEntry__release ( mu_self.mu_snoopq[mu_idx] );
}
else
{
bool mu__boolexpr1700;
bool mu__boolexpr1701;
  if ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIFwdM)) mu__boolexpr1701 = TRUE ;
  else {
  mu__boolexpr1701 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
  if (mu__boolexpr1701) mu__boolexpr1700 = TRUE ;
  else {
  mu__boolexpr1700 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspVFwdV)) ; 
}
if ( mu__boolexpr1700 )
{
if ( mu_self.mu_snoopq[mu_idx].mu_data_sent )
{
if ( (mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIFwdM) )
{
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address] );
}
mu_SnoopEntry__release ( mu_self.mu_snoopq[mu_idx] );
}
}
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_IDIAgent__data_recvd_for_cq_req(mu_1_IDIAgent& mu_self,const mu_1_Address& mu_address)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag("flag",0);

mu_flag = mu_true;
{
for(int mu_cqid = 0; mu_cqid <= 0; mu_cqid++) {
bool mu__boolexpr1702;
bool mu__boolexpr1703;
bool mu__boolexpr1704;
bool mu__boolexpr1705;
  if (!(mu_self.mu_cq[mu_cqid].mu_valid)) mu__boolexpr1705 = FALSE ;
  else {
  mu__boolexpr1705 = ((mu_self.mu_cq[mu_cqid].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1705)) mu__boolexpr1704 = FALSE ;
  else {
bool mu__boolexpr1706;
bool mu__boolexpr1707;
  if ((mu_self.mu_cq[mu_cqid].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr1707 = TRUE ;
  else {
  mu__boolexpr1707 = ((mu_self.mu_cq[mu_cqid].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1707) mu__boolexpr1706 = TRUE ;
  else {
  mu__boolexpr1706 = ((mu_self.mu_cq[mu_cqid].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  mu__boolexpr1704 = (mu__boolexpr1706) ; 
}
  if (!(mu__boolexpr1704)) mu__boolexpr1703 = FALSE ;
  else {
  mu__boolexpr1703 = (mu_self.mu_cq[mu_cqid].mu_resp_recvd) ; 
}
  if (!(mu__boolexpr1703)) mu__boolexpr1702 = FALSE ;
  else {
  mu__boolexpr1702 = (!(mu_self.mu_cq[mu_cqid].mu_data_recvd)) ; 
}
if ( mu__boolexpr1702 )
{
mu_flag = mu_false;
}
};
};
return mu_flag;
	Error.Error("The end of function IDIAgent__data_recvd_for_cq_req reached without returning values.");
};
/*** end function declaration ***/

void mu_IDIAgent__send_snoop_data(mu_1_IDIAgent& mu_self, const mu_1_Snoopq_sz& mu_idx)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

bool mu__boolexpr1708;
bool mu__boolexpr1709;
  if (!(mu_self.mu_snoopq[mu_idx].mu_valid)) mu__boolexpr1709 = FALSE ;
  else {
  mu__boolexpr1709 = (!(mu_self.mu_snoopq[mu_idx].mu_data_sent)) ; 
}
  if (!(mu__boolexpr1709)) mu__boolexpr1708 = FALSE ;
  else {
  mu__boolexpr1708 = (mu_self.mu_snoopq[mu_idx].mu_resp_computed) ; 
}
mu_Guard ( mu__boolexpr1708 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1710;
bool mu__boolexpr1711;
  if ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIFwdM)) mu__boolexpr1711 = TRUE ;
  else {
  mu__boolexpr1711 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspSFwdM)) ; 
}
  if (mu__boolexpr1711) mu__boolexpr1710 = TRUE ;
  else {
  mu__boolexpr1710 = ((mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspVFwdV)) ; 
}
mu_Guard ( mu__boolexpr1710 );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_IDIAgent__agent_be_full( mu_self, mu_self.mu_snoopq[mu_idx].mu_address ) );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_snoopq[mu_idx].mu_data_sent = mu_true;
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_htid = mu_self.mu_snoopq[mu_idx].mu_htid;
mu_packet.mu_data = mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_be;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
if ( mu_self.mu_snoopq[mu_idx].mu_resp_sent )
{
if ( (mu_self.mu_snoopq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__RspIFwdM) )
{
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address] );
}
else
{
if ( (mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address].mu_state) == (mu_CacheState__I) )
{
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_snoopq[mu_idx].mu_address] );
}
}
mu_SnoopEntry__release ( mu_self.mu_snoopq[mu_idx] );
}
}
}
}
};
/*** end procedure declaration ***/

void mu_IDIAgent__release_cq_entry(mu_1_IDIAgent& mu_self, const mu_1_RTID& mu_rtid)
{
bool mu__boolexpr1712;
  if (!(mu_self.mu_cq[mu_rtid].mu_valid)) mu__boolexpr1712 = FALSE ;
  else {
bool mu__boolexpr1713;
bool mu__boolexpr1714;
bool mu__boolexpr1715;
bool mu__boolexpr1716;
bool mu__boolexpr1717;
bool mu__boolexpr1718;
bool mu__boolexpr1719;
bool mu__boolexpr1720;
bool mu__boolexpr1721;
bool mu__boolexpr1722;
bool mu__boolexpr1723;
bool mu__boolexpr1724;
bool mu__boolexpr1725;
bool mu__boolexpr1726;
bool mu__boolexpr1727;
bool mu__boolexpr1728;
bool mu__boolexpr1729;
bool mu__boolexpr1730;
bool mu__boolexpr1731;
bool mu__boolexpr1732;
bool mu__boolexpr1733;
bool mu__boolexpr1734;
  if ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr1734 = TRUE ;
  else {
  mu__boolexpr1734 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdShared)) ; 
}
  if (mu__boolexpr1734) mu__boolexpr1733 = TRUE ;
  else {
  mu__boolexpr1733 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  if (mu__boolexpr1733) mu__boolexpr1732 = TRUE ;
  else {
  mu__boolexpr1732 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)) ; 
}
  if (mu__boolexpr1732) mu__boolexpr1731 = TRUE ;
  else {
  mu__boolexpr1731 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr)) ; 
}
  if (mu__boolexpr1731) mu__boolexpr1730 = TRUE ;
  else {
  mu__boolexpr1730 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__ItoMWr)) ; 
}
  if (mu__boolexpr1730) mu__boolexpr1729 = TRUE ;
  else {
  mu__boolexpr1729 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1729) mu__boolexpr1728 = TRUE ;
  else {
  mu__boolexpr1728 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)) ; 
}
  if (mu__boolexpr1728) mu__boolexpr1727 = TRUE ;
  else {
  mu__boolexpr1727 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr1727) mu__boolexpr1726 = TRUE ;
  else {
  mu__boolexpr1726 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1726) mu__boolexpr1725 = TRUE ;
  else {
  mu__boolexpr1725 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1725) mu__boolexpr1724 = TRUE ;
  else {
  mu__boolexpr1724 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr1724) mu__boolexpr1723 = TRUE ;
  else {
  mu__boolexpr1723 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr1723) mu__boolexpr1722 = TRUE ;
  else {
  mu__boolexpr1722 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1722) mu__boolexpr1721 = TRUE ;
  else {
  mu__boolexpr1721 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1721) mu__boolexpr1720 = TRUE ;
  else {
  mu__boolexpr1720 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1720) mu__boolexpr1719 = TRUE ;
  else {
  mu__boolexpr1719 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  if (mu__boolexpr1719) mu__boolexpr1718 = TRUE ;
  else {
  mu__boolexpr1718 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (mu__boolexpr1718) mu__boolexpr1717 = TRUE ;
  else {
  mu__boolexpr1717 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__UcRdF)) ; 
}
  if (mu__boolexpr1717) mu__boolexpr1716 = TRUE ;
  else {
  mu__boolexpr1716 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__SetMonitor)) ; 
}
  if (mu__boolexpr1716) mu__boolexpr1715 = TRUE ;
  else {
  mu__boolexpr1715 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache)) ; 
}
  if (mu__boolexpr1715) mu__boolexpr1714 = TRUE ;
  else {
  mu__boolexpr1714 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr_ns)) ; 
}
  if (mu__boolexpr1714) mu__boolexpr1713 = TRUE ;
  else {
  mu__boolexpr1713 = ((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__ClrMonitor)) ; 
}
  mu__boolexpr1712 = (mu__boolexpr1713) ; 
}
mu_Guard ( mu__boolexpr1712 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1735;
bool mu__boolexpr1736;
  if (!(!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr)))) mu__boolexpr1736 = FALSE ;
  else {
  mu__boolexpr1736 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdCurr_ns))) ; 
}
  if (mu__boolexpr1736) mu__boolexpr1735 = TRUE ;
  else {
  mu__boolexpr1735 = (mu_self.mu_cq[mu_rtid].mu_data_recvd) ; 
}
mu_Guard ( mu__boolexpr1735 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1737;
bool mu__boolexpr1738;
bool mu__boolexpr1739;
bool mu__boolexpr1740;
bool mu__boolexpr1741;
  if (!(!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdAny)))) mu__boolexpr1741 = FALSE ;
  else {
  mu__boolexpr1741 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwn))) ; 
}
  if (!(mu__boolexpr1741)) mu__boolexpr1740 = FALSE ;
  else {
  mu__boolexpr1740 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdShared))) ; 
}
  if (!(mu__boolexpr1740)) mu__boolexpr1739 = FALSE ;
  else {
  mu__boolexpr1739 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__UcRdF))) ; 
}
  if (!(mu__boolexpr1739)) mu__boolexpr1738 = FALSE ;
  else {
  mu__boolexpr1738 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__SetMonitor))) ; 
}
  if (mu__boolexpr1738) mu__boolexpr1737 = TRUE ;
  else {
bool mu__boolexpr1742;
  if (!(mu_self.mu_cq[mu_rtid].mu_data_recvd)) mu__boolexpr1742 = FALSE ;
  else {
  mu__boolexpr1742 = (mu_self.mu_cq[mu_rtid].mu_resp_recvd) ; 
}
  mu__boolexpr1737 = (mu__boolexpr1742) ; 
}
mu_Guard ( mu__boolexpr1737 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1743;
bool mu__boolexpr1744;
bool mu__boolexpr1745;
bool mu__boolexpr1746;
bool mu__boolexpr1747;
  if (!(!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)))) mu__boolexpr1747 = FALSE ;
  else {
  mu__boolexpr1747 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush))) ; 
}
  if (!(mu__boolexpr1747)) mu__boolexpr1746 = FALSE ;
  else {
  mu__boolexpr1746 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData))) ; 
}
  if (!(mu__boolexpr1746)) mu__boolexpr1745 = FALSE ;
  else {
  mu__boolexpr1745 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__PrefetchtoSysCache))) ; 
}
  if (!(mu__boolexpr1745)) mu__boolexpr1744 = FALSE ;
  else {
  mu__boolexpr1744 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__ClrMonitor))) ; 
}
  if (mu__boolexpr1744) mu__boolexpr1743 = TRUE ;
  else {
  mu__boolexpr1743 = (mu_self.mu_cq[mu_rtid].mu_resp_recvd) ; 
}
mu_Guard ( mu__boolexpr1743 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1748;
bool mu__boolexpr1749;
  if (!(!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__ItoMWr)))) mu__boolexpr1749 = FALSE ;
  else {
  mu__boolexpr1749 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__MemWr))) ; 
}
  if (mu__boolexpr1749) mu__boolexpr1748 = TRUE ;
  else {
  mu__boolexpr1748 = (mu_self.mu_cq[mu_rtid].mu_data_sent) ; 
}
mu_Guard ( mu__boolexpr1748 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1750;
bool mu__boolexpr1751;
bool mu__boolexpr1752;
bool mu__boolexpr1753;
bool mu__boolexpr1754;
  if (!(!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLFlush_OPT)))) mu__boolexpr1754 = FALSE ;
  else {
  mu__boolexpr1754 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInv))) ; 
}
  if (!(mu__boolexpr1754)) mu__boolexpr1753 = FALSE ;
  else {
  mu__boolexpr1753 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInvF))) ; 
}
  if (!(mu__boolexpr1753)) mu__boolexpr1752 = FALSE ;
  else {
  mu__boolexpr1752 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__WrInv))) ; 
}
  if (!(mu__boolexpr1752)) mu__boolexpr1751 = FALSE ;
  else {
  mu__boolexpr1751 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CLWB))) ; 
}
  if (mu__boolexpr1751) mu__boolexpr1750 = TRUE ;
  else {
bool mu__boolexpr1755;
  if (!(mu_self.mu_cq[mu_rtid].mu_extcmp_recvd)) mu__boolexpr1755 = FALSE ;
  else {
  mu__boolexpr1755 = (mu_self.mu_cq[mu_rtid].mu_resp_recvd) ; 
}
  mu__boolexpr1750 = (mu__boolexpr1755) ; 
}
mu_Guard ( mu__boolexpr1750 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1756;
bool mu__boolexpr1757;
  if (!(!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvict)))) mu__boolexpr1757 = FALSE ;
  else {
  mu__boolexpr1757 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate))) ; 
}
  if (mu__boolexpr1757) mu__boolexpr1756 = TRUE ;
  else {
bool mu__boolexpr1758;
  if (!(mu_self.mu_cq[mu_rtid].mu_resp_recvd)) mu__boolexpr1758 = FALSE ;
  else {
  mu__boolexpr1758 = (mu_self.mu_cq[mu_rtid].mu_data_sent) ; 
}
  mu__boolexpr1756 = (mu__boolexpr1758) ; 
}
mu_Guard ( mu__boolexpr1756 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1759;
bool mu__boolexpr1760;
  if (!(!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvict)))) mu__boolexpr1760 = FALSE ;
  else {
  mu__boolexpr1760 = (!((mu_self.mu_cq[mu_rtid].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv))) ; 
}
  if (mu__boolexpr1760) mu__boolexpr1759 = TRUE ;
  else {
  mu__boolexpr1759 = (mu_self.mu_cq[mu_rtid].mu_data_sent) ; 
}
mu_Guard ( mu__boolexpr1759 );
if ( mu_guard_failed.isundefined() )
{
mu_CQEntry__release ( mu_self.mu_cq[mu_rtid] );
}
}
}
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_IDIAgent__send_write_data(mu_1_IDIAgent& mu_self, const mu_1_RTID& mu_idx, mu_1_Line& mu_data, mu_1_BE& mu_be)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

bool mu__boolexpr1761;
bool mu__boolexpr1762;
  if (!(mu_self.mu_cq[mu_idx].mu_valid)) mu__boolexpr1762 = FALSE ;
  else {
  mu__boolexpr1762 = (!(mu_self.mu_cq[mu_idx].mu_data_sent)) ; 
}
  if (!(mu__boolexpr1762)) mu__boolexpr1761 = FALSE ;
  else {
  mu__boolexpr1761 = (mu_self.mu_cq[mu_idx].mu_resp_recvd) ; 
}
mu_Guard ( mu__boolexpr1761 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1763;
bool mu__boolexpr1764;
bool mu__boolexpr1765;
bool mu__boolexpr1766;
bool mu__boolexpr1767;
bool mu__boolexpr1768;
bool mu__boolexpr1769;
bool mu__boolexpr1770;
  if ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1770 = TRUE ;
  else {
  mu__boolexpr1770 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) ; 
}
  if (mu__boolexpr1770) mu__boolexpr1769 = TRUE ;
  else {
  mu__boolexpr1769 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1769) mu__boolexpr1768 = TRUE ;
  else {
  mu__boolexpr1768 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1768) mu__boolexpr1767 = TRUE ;
  else {
  mu__boolexpr1767 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr1767) mu__boolexpr1766 = TRUE ;
  else {
  mu__boolexpr1766 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1766) mu__boolexpr1765 = TRUE ;
  else {
  mu__boolexpr1765 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1765) mu__boolexpr1764 = TRUE ;
  else {
  mu__boolexpr1764 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1764) mu__boolexpr1763 = TRUE ;
  else {
  mu__boolexpr1763 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
mu_Guard ( mu__boolexpr1763 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1771;
bool mu__boolexpr1772;
  if ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1772 = TRUE ;
  else {
  mu__boolexpr1772 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (!(mu__boolexpr1772)) mu__boolexpr1771 = TRUE ;
  else {
  mu__boolexpr1771 = ((mu_self.mu_cq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__GoWritePull)) ; 
}
mu_Guard ( mu__boolexpr1771 );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_cq[mu_idx].mu_data_sent = mu_true;
bool mu__boolexpr1773;
bool mu__boolexpr1774;
bool mu__boolexpr1775;
bool mu__boolexpr1776;
  if ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1776 = TRUE ;
  else {
  mu__boolexpr1776 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1776) mu__boolexpr1775 = TRUE ;
  else {
  mu__boolexpr1775 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1775) mu__boolexpr1774 = TRUE ;
  else {
  mu__boolexpr1774 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1774) mu__boolexpr1773 = TRUE ;
  else {
  mu__boolexpr1773 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
if ( mu__boolexpr1773 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_htid = mu_self.mu_cq[mu_idx].mu_htid;
mu_packet.mu_bogus = mu_self.mu_cq[mu_idx].mu_bogus;
mu_packet.mu_data = mu_data;
mu_packet.mu_be = mu_be;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
else
{
bool mu__boolexpr1777;
bool mu__boolexpr1778;
bool mu__boolexpr1779;
  if ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1779 = TRUE ;
  else {
  mu__boolexpr1779 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1779) mu__boolexpr1778 = TRUE ;
  else {
  mu__boolexpr1778 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1778) mu__boolexpr1777 = TRUE ;
  else {
  mu__boolexpr1777 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
if ( mu__boolexpr1777 )
{
mu_packet.mu_opcode = mu_IDI_Opcode__Data;
mu_packet.mu_htid = mu_self.mu_cq[mu_idx].mu_htid;
mu_packet.mu_bogus = mu_self.mu_cq[mu_idx].mu_bogus;
mu_packet.mu_data = mu_self.mu_cache[mu_self.mu_cq[mu_idx].mu_address].mu_data;
mu_packet.mu_be = mu_self.mu_cache[mu_self.mu_cq[mu_idx].mu_address].mu_be;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
}
bool mu__boolexpr1780;
  if ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1780 = TRUE ;
  else {
  mu__boolexpr1780 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
if ( mu__boolexpr1780 )
{
mu_CacheEntry__release ( mu_self.mu_cache[mu_self.mu_cq[mu_idx].mu_address] );
}
else
{
bool mu__boolexpr1781;
  if (!((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__DirtyEvictNoInv))) mu__boolexpr1781 = FALSE ;
  else {
  mu__boolexpr1781 = ((mu_self.mu_cache[mu_self.mu_cq[mu_idx].mu_address].mu_state) == (mu_CacheState__M)) ; 
}
if ( mu__boolexpr1781 )
{
mu_self.mu_cache[mu_self.mu_cq[mu_idx].mu_address].mu_state = mu_CacheState__E;
}
}
}
}
}
};
/*** end procedure declaration ***/

void mu_IDIAgent__send_ack_response(mu_1_IDIAgent& mu_self, const mu_1_RTID& mu_idx)
{
/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",0);

bool mu__boolexpr1782;
bool mu__boolexpr1783;
  if (!(mu_self.mu_cq[mu_idx].mu_valid)) mu__boolexpr1783 = FALSE ;
  else {
  mu__boolexpr1783 = (mu_self.mu_cq[mu_idx].mu_resp_recvd) ; 
}
  if (!(mu__boolexpr1783)) mu__boolexpr1782 = FALSE ;
  else {
  mu__boolexpr1782 = (!(mu_self.mu_cq[mu_idx].mu_data_sent)) ; 
}
mu_Guard ( mu__boolexpr1782 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1784;
bool mu__boolexpr1785;
  if ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1785 = TRUE ;
  else {
  mu__boolexpr1785 = ((mu_self.mu_cq[mu_idx].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (!(mu__boolexpr1785)) mu__boolexpr1784 = FALSE ;
  else {
  mu__boolexpr1784 = ((mu_self.mu_cq[mu_idx].mu_resp_opcode) == (mu_IDI_Opcode__GoWritePullDrop)) ; 
}
mu_Guard ( mu__boolexpr1784 );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_cq[mu_idx].mu_data_sent = mu_true;
mu_packet.mu_opcode = mu_IDI_Opcode__GOAck;
mu_packet.mu_htid = mu_self.mu_cq[mu_idx].mu_htid;
mu_self.mu_to_hbo = mu_packet;
mu_self.mu_to_hbo__update = mu_true;
mu_rbw_port_transfer (  );
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_IDIAgent__no_active_req(mu_1_IDIAgent& mu_self,const mu_1_Address& mu_address)
{
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1786;
bool mu__boolexpr1787;
  if (!(mu_self.mu_cq[mu_id].mu_valid)) mu__boolexpr1787 = FALSE ;
  else {
  mu__boolexpr1787 = ((mu_self.mu_cq[mu_id].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1787)) mu__boolexpr1786 = FALSE ;
  else {
bool mu__boolexpr1788;
bool mu__boolexpr1789;
bool mu__boolexpr1790;
bool mu__boolexpr1791;
  if ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1791 = TRUE ;
  else {
  mu__boolexpr1791 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1791) mu__boolexpr1790 = TRUE ;
  else {
  mu__boolexpr1790 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  if (mu__boolexpr1790) mu__boolexpr1789 = TRUE ;
  else {
  mu__boolexpr1789 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__CLFlush)) ; 
}
  if (mu__boolexpr1789) mu__boolexpr1788 = TRUE ;
  else {
  mu__boolexpr1788 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
  mu__boolexpr1786 = (mu__boolexpr1788) ; 
}
if ( mu__boolexpr1786 )
{
return mu_false;
}
else
{
bool mu__boolexpr1792;
bool mu__boolexpr1793;
bool mu__boolexpr1794;
bool mu__boolexpr1795;
  if (!(mu_self.mu_cq[mu_id].mu_valid)) mu__boolexpr1795 = FALSE ;
  else {
  mu__boolexpr1795 = ((mu_self.mu_cq[mu_id].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1795)) mu__boolexpr1794 = FALSE ;
  else {
bool mu__boolexpr1796;
  if ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdAny)) mu__boolexpr1796 = TRUE ;
  else {
  mu__boolexpr1796 = ((mu_self.mu_cq[mu_id].mu_opcode) == (mu_IDI_Opcode__RdOwn)) ; 
}
  mu__boolexpr1794 = (mu__boolexpr1796) ; 
}
  if (!(mu__boolexpr1794)) mu__boolexpr1793 = FALSE ;
  else {
  mu__boolexpr1793 = (mu_self.mu_cq[mu_id].mu_resp_recvd) ; 
}
  if (!(mu__boolexpr1793)) mu__boolexpr1792 = FALSE ;
  else {
  mu__boolexpr1792 = (!(mu_self.mu_cq[mu_id].mu_data_recvd)) ; 
}
if ( mu__boolexpr1792 )
{
return mu_false;
}
}
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1797;
bool mu__boolexpr1798;
  if (!(mu_self.mu_snoopq[mu_id].mu_valid)) mu__boolexpr1798 = FALSE ;
  else {
  mu__boolexpr1798 = ((mu_self.mu_snoopq[mu_id].mu_address) == (mu_address)) ; 
}
  if (!(mu__boolexpr1798)) mu__boolexpr1797 = FALSE ;
  else {
  mu__boolexpr1797 = (mu_self.mu_snoopq[mu_id].mu_resp_computed) ; 
}
if ( mu__boolexpr1797 )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function IDIAgent__no_active_req reached without returning values.");
};
/*** end function declaration ***/

void mu_IDIAgent__modify_cacheline(mu_1_IDIAgent& mu_self, const mu_1_Address& mu_address, const mu_1_Word& mu_word, const mu_1_Data& mu_data)
{
mu_Guard ( mu_IDIAgent__no_active_req( mu_self, mu_address ) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1799;
  if ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__E)) mu__boolexpr1799 = TRUE ;
  else {
  mu__boolexpr1799 = ((mu_self.mu_cache[mu_address].mu_state) == (mu_CacheState__M)) ; 
}
mu_Guard ( mu__boolexpr1799 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1800;
  if (!(mu_self.mu_cache[mu_address].mu_be[mu_word])) mu__boolexpr1800 = TRUE ;
  else {
  mu__boolexpr1800 = ((mu_self.mu_cache[mu_address].mu_data[mu_word]) != (mu_data)) ; 
}
mu_Guard ( mu__boolexpr1800 );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_cache[mu_address].mu_state = mu_CacheState__M;
if (mu_data.isundefined())
  mu_self.mu_cache[mu_address].mu_data[mu_word].undefine();
else
  mu_self.mu_cache[mu_address].mu_data[mu_word] = mu_data;
mu_self.mu_cache[mu_address].mu_be[mu_word] = mu_true;
}
}
}
};
/*** end procedure declaration ***/

void mu_Channel__1__reset(mu_1_Channel__1& mu_self)
{
mu_self.mu_count = 0;
mu_self.mu_pkts.undefine();
};
/*** end procedure declaration ***/

mu_1_AgentPacket mu_Channel__1__pop(mu_1_Channel__1& mu_self,const mu_1_Index__1& mu_index)
{
/*** Variable declaration ***/
mu_1_AgentPacket mu_pkt("pkt",0);

mu_pkt = mu_self.mu_pkts[mu_index];
return mu_pkt;
	Error.Error("The end of function Channel__1__pop reached without returning values.");
};
/*** end function declaration ***/

void mu_Channel__1__left_shift(mu_1_Channel__1& mu_self, const mu_1_Index__1& mu_index)
{
{
int mu__ub1801 = ((mu_self.mu_count) - (1)) - (1);
for (int mu_i = mu_index; mu_i <= mu__ub1801; mu_i += 1) {
mu_self.mu_pkts[mu_i] = mu_self.mu_pkts[(mu_i) + (1)];
};
};
mu_self.mu_count = (mu_self.mu_count) - (1);
mu_self.mu_pkts[mu_self.mu_count].undefine();
};
/*** end procedure declaration ***/

void mu_Link__reset(mu_1_Link& mu_self, const mu_1_IDICAgents& mu_network_id)
{
mu_Channel__1__reset ( mu_self.mu_A2FReq );
mu_Channel__1__reset ( mu_self.mu_A2FResp );
mu_Channel__1__reset ( mu_self.mu_F2AResp );
mu_Channel__1__reset ( mu_self.mu_F2AData );
mu_Channel__1__reset ( mu_self.mu_F2AReq );
mu_Channel__1__reset ( mu_self.mu_A2FData );
if (mu_network_id.isundefined())
  mu_self.mu_network_id.undefine();
else
  mu_self.mu_network_id = mu_network_id;
};
/*** end procedure declaration ***/

void mu_Link__send_A2FReq_packet(mu_1_Link& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_AgentPacket mu_packet("packet",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_A2FReq.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_packet = mu_Channel__1__pop( mu_self.mu_A2FReq, (int)mu_index );
mu_self.mu_to_fabric = mu_packet;
mu_self.mu_to_fabric__update = mu_true;
mu_rbw_port_transfer (  );
mu_Channel__1__left_shift ( mu_self.mu_A2FReq, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_Link__send_F2AResp_packet(mu_1_Link& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_AgentPacket mu_pkt("pkt",0);

/*** Variable declaration ***/
mu_1_IDIPacket mu_packet("packet",96);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_F2AResp.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_pkt = mu_Channel__1__pop( mu_self.mu_F2AResp, (int)mu_index );
mu_packet = mu_pkt.mu_packet;
mu_self.mu_to_agent = mu_packet;
mu_self.mu_to_agent__update = mu_true;
mu_rbw_port_transfer (  );
mu_Channel__1__left_shift ( mu_self.mu_F2AResp, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_Link__send_F2AData_packet(mu_1_Link& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_AgentPacket mu_pkt("pkt",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_F2AData.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_pkt = mu_Channel__1__pop( mu_self.mu_F2AData, (int)mu_index );
mu_self.mu_to_agent = mu_pkt.mu_packet;
mu_self.mu_to_agent__update = mu_true;
mu_rbw_port_transfer (  );
mu_Channel__1__left_shift ( mu_self.mu_F2AData, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_Link__no_pending_GO(mu_1_Link& mu_self,mu_1_AgentPacket& mu_packet)
{
/*** Variable declaration ***/
mu_0_boolean mu_flag("flag",0);

mu_flag = mu_true;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1802;
  if (!((mu_id) < (mu_self.mu_F2AResp.mu_count))) mu__boolexpr1802 = FALSE ;
  else {
bool mu__boolexpr1803;
  if ((mu_self.mu_F2AResp.mu_pkts[mu_id].mu_packet.mu_opcode) == (mu_IDI_Opcode__GO)) mu__boolexpr1803 = TRUE ;
  else {
  mu__boolexpr1803 = ((mu_self.mu_F2AResp.mu_pkts[mu_id].mu_packet.mu_opcode) == (mu_IDI_Opcode__GoWritePull)) ; 
}
  mu__boolexpr1802 = (mu__boolexpr1803) ; 
}
if ( mu__boolexpr1802 )
{
mu_flag = mu_false;
}
};
};
bool mu__boolexpr1804;
  if ((mu_self.mu_F2AResp.mu_count) == (0)) mu__boolexpr1804 = TRUE ;
  else {
  mu__boolexpr1804 = (mu_flag) ; 
}
return mu__boolexpr1804;
	Error.Error("The end of function Link__no_pending_GO reached without returning values.");
};
/*** end function declaration ***/

void mu_Link__send_F2AReq_packet(mu_1_Link& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_1_AgentPacket mu_pkt("pkt",0);

mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_F2AReq.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( mu_Link__no_pending_GO( mu_self, mu_self.mu_F2AReq.mu_pkts[mu_index] ) );
if ( mu_guard_failed.isundefined() )
{
mu_pkt = mu_Channel__1__pop( mu_self.mu_F2AReq, (int)mu_index );
mu_self.mu_to_agent = mu_pkt.mu_packet;
mu_self.mu_to_agent__update = mu_true;
mu_rbw_port_transfer (  );
mu_Channel__1__left_shift ( mu_self.mu_F2AReq, (int)mu_index );
}
}
}
};
/*** end procedure declaration ***/

void mu_Link__send_A2FResp_packet(mu_1_Link& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_A2FResp.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_to_fabric = mu_Channel__1__pop( mu_self.mu_A2FResp, (int)mu_index );
mu_self.mu_to_fabric__update = mu_true;
mu_rbw_port_transfer (  );
mu_Channel__1__left_shift ( mu_self.mu_A2FResp, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_Link__send_A2FData_packet(mu_1_Link& mu_self, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_Guard ( (mu_index) < (mu_MAX__1) );
if ( mu_guard_failed.isundefined() )
{
mu_Guard ( (mu_index) < (mu_self.mu_A2FData.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_self.mu_to_fabric = mu_Channel__1__pop( mu_self.mu_A2FData, (int)mu_index );
mu_self.mu_to_fabric__update = mu_true;
mu_rbw_port_transfer (  );
mu_Channel__1__left_shift ( mu_self.mu_A2FData, (int)mu_index );
}
}
};
/*** end procedure declaration ***/

void mu_Aux__update_data(mu_1_Aux& mu_self, const mu_1_Address& mu_addr, const mu_1_Word& mu_word, const mu_1_Data& mu_data)
{
if (mu_data.isundefined())
  mu_self.mu_latest_data[mu_addr][mu_word].undefine();
else
  mu_self.mu_latest_data[mu_addr][mu_word] = mu_data;
};
/*** end procedure declaration ***/

void mu_NVL__update_buffer(mu_1_State& mu_self, const mu_1_Word& mu_word, const mu_1_Data& mu_data)
{
mu_Guard ( !(mu_self.mu_buffer_be[mu_word]) );
if ( mu_guard_failed.isundefined() )
{
if (mu_data.isundefined())
  mu_self.mu_idic_buffer[mu_word].undefine();
else
  mu_self.mu_idic_buffer[mu_word] = mu_data;
mu_self.mu_buffer_be[mu_word] = mu_true;
}
};
/*** end procedure declaration ***/

void mu_NVL__reset_buffer(mu_1_State& mu_self)
{
mu_self.mu_idic_buffer.undefine();
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_buffer_be[mu_word] = mu_false;
};
};
};
/*** end procedure declaration ***/

void mu_NVL__idicagent_new_request(mu_1_State& mu_self, const mu_1_IDICAgents& mu_idx, const mu_1_IDI_Opcode& mu_opcode, const mu_1_Address& mu_address, const mu_0_boolean& mu_selfsnp, const mu_0_boolean& mu_cache_near)
{
mu_Guard ( (mu_idx) == (1) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1805;
  if ((mu_opcode) == (mu_IDI_Opcode__RdOwnNoData)) mu__boolexpr1805 = TRUE ;
  else {
  mu__boolexpr1805 = ((mu_opcode) == (mu_IDI_Opcode__CLWB)) ; 
}
mu_Guard ( mu__boolexpr1805 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1806;
  if (mu_mufasa_mode) mu__boolexpr1806 = TRUE ;
  else {
  mu__boolexpr1806 = (mu_cache_near) ; 
}
mu_Guard ( mu__boolexpr1806 );
if ( mu_guard_failed.isundefined() )
{
mu_IDIAgent__new_request ( mu_self.mu_IDICAgent[mu_idx], mu_opcode, mu_address, mu_selfsnp, mu_cache_near );
if ( mu_guard_failed.isundefined() )
{
}
}
}
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_sf_lookup_phase(mu_1_State& mu_self, const mu_1_HTID& mu_htid, const mu_0_boolean& mu_choice)
{
mu_HBo__SF_lookup_phase ( mu_self.mu_hbo, mu_htid, mu_choice );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_early_MFS_lookup_phase(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__early_MFS_lookup_phase ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_snoop_to_idicagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid, const mu_1_IDICAgents& mu_id)
{
mu_HBo__send_snoop_to_idicagent ( mu_self.mu_hbo, mu_htid, mu_id );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__idicagent_compute_snoop_response(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_Snoopq_sz& mu_idx, const mu_1_range__3& mu_bias)
{
mu_IDIAgent__compute_snoop_response ( mu_self.mu_IDICAgent[mu_agent], mu_idx, mu_bias );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__idicagent_send_snoop_response(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_Snoopq_sz& mu_idx)
{
mu_IDIAgent__send_snoop_response ( mu_self.mu_IDICAgent[mu_agent], mu_idx );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_early_response_to_idicagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_early_response_to_idicagent ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_late_mufasa_lookup_phase(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__late_mufasa_lookup_phase ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_mufasa_alloc_and_update(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__mufasa_alloc_and_update ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_late_response_to_idicagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_late_response_to_idicagent ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_data_to_idicagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_data_to_idicagent ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_release_tractor_entry(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__release_tractor_entry ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__link_send_A2FReq_packet(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_Link__send_A2FReq_packet ( mu_self.mu_idiclink[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__link_send_A2FResp_packet(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_Link__send_A2FResp_packet ( mu_self.mu_idiclink[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__link_send_A2FData_packet(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_Link__send_A2FData_packet ( mu_self.mu_idiclink[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__link_send_F2AReq_packet(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_Link__send_F2AReq_packet ( mu_self.mu_idiclink[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__link_send_F2AResp_packet(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
/*** Variable declaration ***/
mu_0_boolean mu_no_other_agent_is_in_M_state("no_other_agent_is_in_M_state",0);

/*** Variable declaration ***/
mu_0_boolean mu_way_found("way_found",8);

/*** Variable declaration ***/
mu_1_MFS_WAYS mu_hit_way("hit_way",16);

mu_Guard ( (mu_index) < (mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_count) );
if ( mu_guard_failed.isundefined() )
{
mu_no_other_agent_is_in_M_state = mu_true;
mu_way_found = mu_false;
{
for(int mu_n = 0; mu_n <= 2; mu_n++) {
bool mu__boolexpr1807;
  if (!((mu_n) != (mu_agent))) mu__boolexpr1807 = FALSE ;
  else {
  mu__boolexpr1807 = ((mu_self.mu_IDICAgent[mu_n].mu_cache[mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_pkts[mu_index].mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M)) ; 
}
if ( mu__boolexpr1807 )
{
mu_no_other_agent_is_in_M_state = mu_false;
}
};
};
{
for(int mu_n = 0; mu_n <= 2; mu_n++) {
if ( (mu_self.mu_UPIAgent[mu_n].mu_cache[mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_pkts[mu_index].mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M) )
{
mu_no_other_agent_is_in_M_state = mu_false;
}
};
};
bool mu__boolexpr1808;
  if ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_pkts[mu_index].mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__WOWrInv)) mu__boolexpr1808 = TRUE ;
  else {
  mu__boolexpr1808 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_pkts[mu_index].mu_packet.mu_rtid].mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
if ( mu__boolexpr1808 )
{
if ( (mu_self.mu_IDICAgent[mu_agent].mu_cache[mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_pkts[mu_index].mu_packet.mu_rtid].mu_address].mu_state) == (mu_CacheState__M) )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_IDICAgent[mu_agent].mu_cache[mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_pkts[mu_index].mu_packet.mu_rtid].mu_address].mu_be[mu_word] )
{
mu_self.mu_buffer_be[mu_word] = mu_true;
mu_self.mu_idic_buffer[mu_word] = mu_self.mu_IDICAgent[mu_agent].mu_cache[mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_pkts[mu_index].mu_packet.mu_rtid].mu_address].mu_data[mu_word];
}
};
};
}
}
mu_Link__send_F2AResp_packet ( mu_self.mu_idiclink[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
}
};
/*** end procedure declaration ***/

void mu_NVL__link_send_F2AData_packet(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_Link__send_F2AData_packet ( mu_self.mu_idiclink[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__agent_release_cq_entry(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_RTID& mu_rtid)
{
mu_IDIAgent__release_cq_entry ( mu_self.mu_IDICAgent[mu_agent], mu_rtid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_snoop_to_upiagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid, const mu_1_UPIAgents& mu_id)
{
mu_HBo__send_snoop_to_upiagent ( mu_self.mu_hbo, mu_htid, mu_id );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__ulink_send_HASnp_packet(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_ULink__send_HASnp_packet ( mu_self.mu_santa[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__upiagent_process_snoop_entry(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_Address& mu_idx, const mu_1_UPI_Opcode& mu_resp_opcode)
{
mu_CA__process_snoop_entry ( mu_self.mu_UPIAgent[mu_agent], mu_idx, mu_resp_opcode );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__ulink_send_CAResp_packet(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_ULink__send_CAResp_packet ( mu_self.mu_santa[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_NVL__is_buffer_full(mu_1_State& mu_self)
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( !(mu_self.mu_buffer_be[mu_word]) )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function NVL__is_buffer_full reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_NVL__is_buffer_empty(mu_1_State& mu_self)
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_buffer_be[mu_word] )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function NVL__is_buffer_empty reached without returning values.");
};
/*** end function declaration ***/

void mu_NVL__agent_send_write_data(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_RTID& mu_index)
{
mu_Guard ( mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_valid );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1809;
bool mu__boolexpr1810;
bool mu__boolexpr1811;
  if ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1811 = TRUE ;
  else {
  mu__boolexpr1811 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1811) mu__boolexpr1810 = TRUE ;
  else {
  mu__boolexpr1810 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
  if (!(mu__boolexpr1810)) mu__boolexpr1809 = TRUE ;
  else {
  mu__boolexpr1809 = (mu_NVL__is_buffer_full( mu_self )) ; 
}
mu_Guard ( mu__boolexpr1809 );
if ( mu_guard_failed.isundefined() )
{
mu_IDIAgent__send_write_data ( mu_self.mu_IDICAgent[mu_agent], mu_index, mu_self.mu_idic_buffer, mu_self.mu_buffer_be );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1812;
bool mu__boolexpr1813;
bool mu__boolexpr1814;
bool mu__boolexpr1815;
  if ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__ItoMWr)) mu__boolexpr1815 = TRUE ;
  else {
  mu__boolexpr1815 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__WOWrInv)) ; 
}
  if (mu__boolexpr1815) mu__boolexpr1814 = TRUE ;
  else {
  mu__boolexpr1814 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__WOWrInvF)) ; 
}
  if (mu__boolexpr1814) mu__boolexpr1813 = TRUE ;
  else {
  mu__boolexpr1813 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__WrInv)) ; 
}
  if (mu__boolexpr1813) mu__boolexpr1812 = TRUE ;
  else {
  mu__boolexpr1812 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_opcode) == (mu_IDI_Opcode__MemWr)) ; 
}
if ( mu__boolexpr1812 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( mu_self.mu_buffer_be[mu_word] )
{
mu_Aux__update_data ( mu_self.mu_aux, mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_index].mu_address, mu_word, mu_self.mu_idic_buffer[mu_word] );
}
};
};
}
mu_NVL__reset_buffer ( mu_self );
}
}
}
};
/*** end procedure declaration ***/

void mu_NVL__idicagent_modify_cacheline(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_Address& mu_address, const mu_1_Word& mu_word, const mu_1_Data& mu_data)
{
mu_IDIAgent__modify_cacheline ( mu_self.mu_IDICAgent[mu_agent], mu_address, mu_word, mu_data );
if ( mu_guard_failed.isundefined() )
{
mu_Aux__update_data ( mu_self.mu_aux, mu_address, mu_word, mu_data );
}
};
/*** end procedure declaration ***/

void mu_NVL__idicagent_send_snoop_data(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_Snoopq_sz& mu_index)
{
mu_IDIAgent__send_snoop_data ( mu_self.mu_IDICAgent[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__ca_send_new_request(mu_1_State& mu_self, const mu_1_UPIAgents& mu_idx, const mu_1_Address& mu_address, const mu_1_UPI_Opcode& mu_opcode, const mu_0_boolean& mu_alloc_hint)
{
mu_Guard ( (mu_idx) == (0) );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1816;
  if (mu_mufasa_mode) mu__boolexpr1816 = TRUE ;
  else {
  mu__boolexpr1816 = (mu_alloc_hint) ; 
}
mu_Guard ( mu__boolexpr1816 );
if ( mu_guard_failed.isundefined() )
{
bool mu__boolexpr1817;
bool mu__boolexpr1818;
bool mu__boolexpr1819;
bool mu__boolexpr1820;
bool mu__boolexpr1821;
bool mu__boolexpr1822;
bool mu__boolexpr1823;
bool mu__boolexpr1824;
bool mu__boolexpr1825;
bool mu__boolexpr1826;
bool mu__boolexpr1827;
bool mu__boolexpr1828;
  if ((mu_opcode) == (mu_UPI_Opcode__RdCode)) mu__boolexpr1828 = TRUE ;
  else {
  mu__boolexpr1828 = ((mu_opcode) == (mu_UPI_Opcode__RdData)) ; 
}
  if (mu__boolexpr1828) mu__boolexpr1827 = TRUE ;
  else {
  mu__boolexpr1827 = ((mu_opcode) == (mu_UPI_Opcode__RdDataMig)) ; 
}
  if (mu__boolexpr1827) mu__boolexpr1826 = TRUE ;
  else {
  mu__boolexpr1826 = ((mu_opcode) == (mu_UPI_Opcode__RdInvOwn)) ; 
}
  if (mu__boolexpr1826) mu__boolexpr1825 = TRUE ;
  else {
  mu__boolexpr1825 = ((mu_opcode) == (mu_UPI_Opcode__InvXtoI)) ; 
}
  if (mu__boolexpr1825) mu__boolexpr1824 = TRUE ;
  else {
  mu__boolexpr1824 = ((mu_opcode) == (mu_UPI_Opcode__InvItoE)) ; 
}
  if (mu__boolexpr1824) mu__boolexpr1823 = TRUE ;
  else {
  mu__boolexpr1823 = ((mu_opcode) == (mu_UPI_Opcode__RdInv)) ; 
}
  if (mu__boolexpr1823) mu__boolexpr1822 = TRUE ;
  else {
  mu__boolexpr1822 = ((mu_opcode) == (mu_UPI_Opcode__InvItoM)) ; 
}
  if (mu__boolexpr1822) mu__boolexpr1821 = TRUE ;
  else {
  mu__boolexpr1821 = ((mu_opcode) == (mu_UPI_Opcode__RdCur)) ; 
}
  if (mu__boolexpr1821) mu__boolexpr1820 = TRUE ;
  else {
  mu__boolexpr1820 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoI)) ; 
}
  if (mu__boolexpr1820) mu__boolexpr1819 = TRUE ;
  else {
  mu__boolexpr1819 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoS)) ; 
}
  if (mu__boolexpr1819) mu__boolexpr1818 = TRUE ;
  else {
  mu__boolexpr1818 = ((mu_opcode) == (mu_UPI_Opcode__WbMtoE)) ; 
}
  if (mu__boolexpr1818) mu__boolexpr1817 = TRUE ;
  else {
  mu__boolexpr1817 = ((mu_opcode) == (mu_UPI_Opcode__WbEtoI)) ; 
}
mu_Guard ( mu__boolexpr1817 );
if ( mu_guard_failed.isundefined() )
{
mu_CA__send_new_request ( mu_self.mu_UPIAgent[mu_idx], mu_address, mu_opcode, mu_alloc_hint );
if ( mu_guard_failed.isundefined() )
{
}
}
}
}
};
/*** end procedure declaration ***/

void mu_NVL__ulink_send_CAReq_packet(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_ULink__send_CAReq_packet ( mu_self.mu_santa[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_response_to_upiagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_response_to_upiagent ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_data_to_upiagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_data_to_upiagent ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__ulink_send_HAResp_packet(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_ULink__send_HAResp_packet ( mu_self.mu_santa[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__ulink_send_MCResp_packet(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_ULink__send_MCResp_packet ( mu_self.mu_santa[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_release_tractor_uentry(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__release_tractor_uentry ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__upiagent_modify_cacheline(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_Address& mu_address, const mu_1_Word& mu_word, const mu_1_Data& mu_data)
{
mu_CA__ca_modify_cacheline ( mu_self.mu_UPIAgent[mu_agent], mu_address, mu_word, mu_data );
if ( mu_guard_failed.isundefined() )
{
mu_Aux__update_data ( mu_self.mu_aux, mu_address, mu_word, mu_data );
}
};
/*** end procedure declaration ***/

void mu_NVL__downgrade_cacheline(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_Address& mu_address, const mu_1_CacheOp& mu_cacheOp)
{
mu_CA__ca_downgrade_cacheline ( mu_self.mu_UPIAgent[mu_agent], mu_address, mu_cacheOp );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__ca_request_fwd_conflict(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_Address& mu_address)
{
mu_CA__request_fwd_conflict ( mu_self.mu_UPIAgent[mu_agent], mu_address );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__ulink_send_CAWb_packet(mu_1_State& mu_self, const mu_1_UPIAgents& mu_agent, const mu_1_CHANNEL_SIZE& mu_index)
{
mu_ULink__send_CAWb_packet ( mu_self.mu_santa[mu_agent], mu_index );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_fwd_response(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_fwd_response ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_response_for_ClrMonitor(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_response_for_clrmonitor ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__idicagent_send_ack_response(mu_1_State& mu_self, const mu_1_IDICAgents& mu_agent, const mu_1_RTID& mu_rtid)
{
mu_IDIAgent__send_ack_response ( mu_self.mu_IDICAgent[mu_agent], mu_rtid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_memory_request(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_memory_request ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_recv_memory_response(mu_1_State& mu_self, const mu_1_MEM_TORID& mu_mctid)
{
mu_HBo__send_memory_response ( mu_self.mu_hbo, mu_mctid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__move_to_memory_domain(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__move_to_memory_domain ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_fastgo_response_to_idicagent(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_fastgo_response_to_idicagent ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_send_parallel_mem_read_request(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__send_parallel_mem_read_request ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

void mu_NVL__hbo_mufasa_early_read(mu_1_State& mu_self, const mu_1_HTID& mu_htid)
{
mu_HBo__mufasa_early_read ( mu_self.mu_hbo, mu_htid );
if ( mu_guard_failed.isundefined() )
{
}
};
/*** end procedure declaration ***/

mu_0_boolean mu_NVL__cache_state_consistency(mu_1_State& mu_self)
{
/*** Variable declaration ***/
mu_0_boolean mu_ongoing_req("ongoing_req",0);

/*** Variable declaration ***/
mu_1_Agent_countp1 mu_count_ME("count_ME",8);

/*** Variable declaration ***/
mu_1_Agent_countp1 mu_count_S("count_S",16);

mu_ongoing_req = mu_false;
{
for(int mu_addr = 0; mu_addr <= 0; mu_addr++) {
mu_count_ME = 0;
mu_count_S = 0;
{
for(int mu_idx = 0; mu_idx <= 1; mu_idx++) {
bool mu__boolexpr1829;
bool mu__boolexpr1830;
  if (!(mu_self.mu_hbo.mu_tractor[mu_idx].mu_valid)) mu__boolexpr1830 = FALSE ;
  else {
  mu__boolexpr1830 = ((mu_self.mu_hbo.mu_tractor[mu_idx].mu_address) == (mu_addr)) ; 
}
  if (!(mu__boolexpr1830)) mu__boolexpr1829 = FALSE ;
  else {
bool mu__boolexpr1831;
bool mu__boolexpr1832;
  if (mu_self.mu_hbo.mu_tractor[mu_idx].mu_sf_lookup_done) mu__boolexpr1832 = TRUE ;
  else {
  mu__boolexpr1832 = (mu_self.mu_hbo.mu_tractor[mu_idx].mu_resp_sent) ; 
}
  if (mu__boolexpr1832) mu__boolexpr1831 = TRUE ;
  else {
  mu__boolexpr1831 = (mu_self.mu_hbo.mu_tractor[mu_idx].mu_data_sent) ; 
}
  mu__boolexpr1829 = (mu__boolexpr1831) ; 
}
if ( mu__boolexpr1829 )
{
mu_ongoing_req = mu_true;
}
};
};
{
for(int mu_id = 0; mu_id <= 2; mu_id++) {
if ( (mu_self.mu_idiclink[mu_id].mu_F2AResp.mu_count) > (0) )
{
mu_ongoing_req = mu_true;
}
bool mu__boolexpr1833;
  if ((mu_self.mu_IDICAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__M)) mu__boolexpr1833 = TRUE ;
  else {
  mu__boolexpr1833 = ((mu_self.mu_IDICAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__E)) ; 
}
if ( mu__boolexpr1833 )
{
mu_count_ME = (mu_count_ME) + (1);
}
else
{
if ( (mu_self.mu_IDICAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__S) )
{
mu_count_S = (mu_count_S) + (1);
}
}
};
};
{
for(int mu_id = 0; mu_id <= 2; mu_id++) {
bool mu__boolexpr1834;
  if ((mu_self.mu_UPIAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__M)) mu__boolexpr1834 = TRUE ;
  else {
  mu__boolexpr1834 = ((mu_self.mu_UPIAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__E)) ; 
}
if ( mu__boolexpr1834 )
{
mu_count_ME = (mu_count_ME) + (1);
}
else
{
if ( (mu_self.mu_UPIAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__S) )
{
mu_count_S = (mu_count_S) + (1);
}
}
};
};
bool mu__boolexpr1835;
  if (!(!(mu_ongoing_req))) mu__boolexpr1835 = FALSE ;
  else {
bool mu__boolexpr1836;
bool mu__boolexpr1837;
  if (!((mu_count_ME) > (0))) mu__boolexpr1837 = FALSE ;
  else {
  mu__boolexpr1837 = ((mu_count_S) > (0)) ; 
}
  if (mu__boolexpr1837) mu__boolexpr1836 = TRUE ;
  else {
  mu__boolexpr1836 = ((mu_count_ME) > (1)) ; 
}
  mu__boolexpr1835 = (mu__boolexpr1836) ; 
}
if ( mu__boolexpr1835 )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function NVL__cache_state_consistency reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_NVL__snoop_filter_cs_consistency(mu_1_State& mu_self)
{
/*** Variable declaration ***/
mu_0_boolean mu_ongoing_req("ongoing_req",0);

/*** Variable declaration ***/
mu_0_boolean mu_tag_match("tag_match",8);

/*** Variable declaration ***/
mu_1_SF_WAYS mu_way("way",16);

mu_ongoing_req = mu_false;
{
for(int mu_addr = 0; mu_addr <= 0; mu_addr++) {
{
for(int mu_idx = 0; mu_idx <= 1; mu_idx++) {
bool mu__boolexpr1838;
bool mu__boolexpr1839;
  if (!(mu_self.mu_hbo.mu_tractor[mu_idx].mu_valid)) mu__boolexpr1839 = FALSE ;
  else {
  mu__boolexpr1839 = ((mu_self.mu_hbo.mu_tractor[mu_idx].mu_address) == (mu_addr)) ; 
}
  if (!(mu__boolexpr1839)) mu__boolexpr1838 = FALSE ;
  else {
  mu__boolexpr1838 = (mu_self.mu_hbo.mu_tractor[mu_idx].mu_sf_lookup_done) ; 
}
if ( mu__boolexpr1838 )
{
mu_ongoing_req = mu_true;
}
};
};
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
if ( (mu_self.mu_idiclink[mu_agent].mu_F2AResp.mu_count) > (0) )
{
mu_ongoing_req = mu_true;
}
};
};
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
if ( (mu_self.mu_santa[mu_agent].mu_HAResp.mu_count) > (0) )
{
mu_ongoing_req = mu_true;
}
};
};
mu_tag_match = mu_false;
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1840;
  if (!(mu_self.mu_hbo.mu_sf[mu_id].mu_valid)) mu__boolexpr1840 = FALSE ;
  else {
  mu__boolexpr1840 = ((mu_self.mu_hbo.mu_sf[mu_id].mu_address) == (mu_addr)) ; 
}
if ( mu__boolexpr1840 )
{
mu_tag_match = mu_true;
mu_way = mu_id;
}
};
};
if ( !(mu_ongoing_req) )
{
if ( mu_tag_match )
{
if ( mu_self.mu_hbo.mu_sf[mu_way].mu_CV_format )
{
{
int mu__ub1841 = 2;
for (int mu_id = mu_NUM_SOTFTSIDICAgents; mu_id <= mu__ub1841; mu_id += 1) {
bool mu__boolexpr1842;
  if (!((mu_self.mu_hbo.mu_sf[mu_way].mu_owner_id) != (mu_id))) mu__boolexpr1842 = FALSE ;
  else {
  mu__boolexpr1842 = (!((mu_self.mu_IDICAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I))) ; 
}
if ( mu__boolexpr1842 )
{
return mu_false;
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_hbo.mu_sf[mu_way].mu_CV_bits_idic[mu_id] )
{
return mu_false;
}
if ( !((mu_self.mu_IDICAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I)) )
{
return mu_false;
}
};
};
{
int mu__ub1843 = 2;
for (int mu_id = mu_NUM_SOTFTSUPIAgents; mu_id <= mu__ub1843; mu_id += 1) {
bool mu__boolexpr1844;
  if (!((mu_self.mu_hbo.mu_sf[mu_way].mu_owner_id) != (mu_id))) mu__boolexpr1844 = FALSE ;
  else {
  mu__boolexpr1844 = (!((mu_self.mu_UPIAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I))) ; 
}
if ( mu__boolexpr1844 )
{
return mu_false;
}
};
};
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
if ( mu_self.mu_hbo.mu_sf[mu_way].mu_CV_bits_upi[mu_id] )
{
return mu_false;
}
if ( !((mu_self.mu_UPIAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I)) )
{
return mu_false;
}
};
};
}
else
{
{
int mu__ub1845 = 1;
for (int mu_id = mu_NUM_SOTIDICAgents; mu_id <= mu__ub1845; mu_id += 1) {
bool mu__boolexpr1846;
  if (!(!(mu_self.mu_hbo.mu_sf[mu_way].mu_CV_bits_idic[mu_id]))) mu__boolexpr1846 = FALSE ;
  else {
  mu__boolexpr1846 = (!((mu_self.mu_IDICAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I))) ; 
}
if ( mu__boolexpr1846 )
{
return mu_false;
}
};
};
{
int mu__ub1847 = 2;
for (int mu_id = mu_NUM_SOTFTSIDICAgents; mu_id <= mu__ub1847; mu_id += 1) {
if ( !((mu_self.mu_IDICAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I)) )
{
return mu_false;
}
};
};
{
int mu__ub1848 = 1;
for (int mu_id = mu_NUM_SOTUPIAgents; mu_id <= mu__ub1848; mu_id += 1) {
bool mu__boolexpr1849;
  if (!(!(mu_self.mu_hbo.mu_sf[mu_way].mu_CV_bits_upi[mu_id]))) mu__boolexpr1849 = FALSE ;
  else {
  mu__boolexpr1849 = (!((mu_self.mu_UPIAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I))) ; 
}
if ( mu__boolexpr1849 )
{
return mu_false;
}
};
};
{
int mu__ub1850 = 2;
for (int mu_id = mu_NUM_SOTFTSUPIAgents; mu_id <= mu__ub1850; mu_id += 1) {
if ( !((mu_self.mu_UPIAgent[mu_id].mu_cache[mu_addr].mu_state) == (mu_CacheState__I)) )
{
return mu_false;
}
};
};
}
}
}
};
};
return mu_true;
	Error.Error("The end of function NVL__snoop_filter_cs_consistency reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_NVL__data_consistency(mu_1_State& mu_self)
{
/*** Variable declaration ***/
mu_0_boolean mu_no_device_in_M("no_device_in_M",0);

/*** Variable declaration ***/
mu_1_MFS_WAYS mu_way("way",8);

/*** Variable declaration ***/
mu_0_boolean mu_active_req_in_tor("active_req_in_tor",16);

/*** Variable declaration ***/
mu_0_boolean mu_ongoing_req("ongoing_req",24);

{
for(int mu_addr = 0; mu_addr <= 0; mu_addr++) {
mu_no_device_in_M = mu_true;
{
for(int mu_n = 0; mu_n <= 2; mu_n++) {
if ( (mu_self.mu_IDICAgent[mu_n].mu_cache[mu_addr].mu_state) == (mu_CacheState__M) )
{
mu_no_device_in_M = mu_false;
}
};
};
{
for(int mu_n = 0; mu_n <= 2; mu_n++) {
if ( (mu_self.mu_UPIAgent[mu_n].mu_cache[mu_addr].mu_state) == (mu_CacheState__M) )
{
mu_no_device_in_M = mu_false;
}
};
};
{
for(int mu_id = 0; mu_id <= 0; mu_id++) {
bool mu__boolexpr1851;
bool mu__boolexpr1852;
  if (!(mu_self.mu_hbo.mu_mufasa[mu_id].mu_valid)) mu__boolexpr1852 = FALSE ;
  else {
  mu__boolexpr1852 = ((mu_self.mu_hbo.mu_mufasa[mu_id].mu_address) == (mu_addr)) ; 
}
  if (!(mu__boolexpr1852)) mu__boolexpr1851 = FALSE ;
  else {
  mu__boolexpr1851 = ((mu_self.mu_hbo.mu_mufasa[mu_id].mu_state) == (mu_MFSState__M)) ; 
}
if ( mu__boolexpr1851 )
{
mu_no_device_in_M = mu_false;
}
};
};
mu_active_req_in_tor = mu_false;
{
for(int mu_torid = 0; mu_torid <= 1; mu_torid++) {
bool mu__boolexpr1853;
bool mu__boolexpr1854;
  if (!(mu_self.mu_hbo.mu_tractor[mu_torid].mu_valid)) mu__boolexpr1854 = FALSE ;
  else {
  mu__boolexpr1854 = ((mu_self.mu_hbo.mu_tractor[mu_torid].mu_address) == (mu_addr)) ; 
}
  if (!(mu__boolexpr1854)) mu__boolexpr1853 = FALSE ;
  else {
bool mu__boolexpr1855;
bool mu__boolexpr1856;
  if (mu_self.mu_hbo.mu_tractor[mu_torid].mu_sf_lookup_done) mu__boolexpr1856 = TRUE ;
  else {
  mu__boolexpr1856 = (mu_self.mu_hbo.mu_tractor[mu_torid].mu_resp_sent) ; 
}
  if (mu__boolexpr1856) mu__boolexpr1855 = TRUE ;
  else {
  mu__boolexpr1855 = (mu_self.mu_hbo.mu_tractor[mu_torid].mu_data_sent) ; 
}
  mu__boolexpr1853 = (mu__boolexpr1855) ; 
}
if ( mu__boolexpr1853 )
{
mu_active_req_in_tor = mu_true;
}
};
};
mu_ongoing_req = mu_false;
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
{
for(int mu_torid = 0; mu_torid <= 0; mu_torid++) {
bool mu__boolexpr1857;
  if (!((mu_self.mu_UPIAgent[mu_agent].mu_tor[mu_torid].mu_state) != (mu_RTID_STATE__Idle))) mu__boolexpr1857 = FALSE ;
  else {
  mu__boolexpr1857 = ((mu_self.mu_UPIAgent[mu_agent].mu_tor[mu_torid].mu_address) == (mu_addr)) ; 
}
if ( mu__boolexpr1857 )
{
mu_ongoing_req = mu_true;
}
};
};
};
};
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
{
for(int mu_cqid = 0; mu_cqid <= 0; mu_cqid++) {
bool mu__boolexpr1858;
  if (!(mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_cqid].mu_valid)) mu__boolexpr1858 = FALSE ;
  else {
  mu__boolexpr1858 = ((mu_self.mu_IDICAgent[mu_agent].mu_cq[mu_cqid].mu_address) == (mu_addr)) ; 
}
if ( mu__boolexpr1858 )
{
mu_ongoing_req = mu_true;
}
};
};
};
};
bool mu__boolexpr1859;
bool mu__boolexpr1860;
  if (!(mu_no_device_in_M)) mu__boolexpr1860 = FALSE ;
  else {
  mu__boolexpr1860 = (!(mu_active_req_in_tor)) ; 
}
  if (!(mu__boolexpr1860)) mu__boolexpr1859 = FALSE ;
  else {
  mu__boolexpr1859 = (!(mu_ongoing_req)) ; 
}
if ( mu__boolexpr1859 )
{
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
if ( (mu_self.mu_hbo.mu_mem[mu_addr][mu_word]) != (mu_self.mu_aux.mu_latest_data[mu_addr][mu_word]) )
{
return mu_false;
}
};
};
}
if ( !(mu_ongoing_req) )
{
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
bool mu__boolexpr1861;
bool mu__boolexpr1862;
  if (!((mu_self.mu_IDICAgent[mu_agent].mu_cache[mu_addr].mu_state) != (mu_CacheState__I))) mu__boolexpr1862 = FALSE ;
  else {
  mu__boolexpr1862 = (mu_self.mu_IDICAgent[mu_agent].mu_cache[mu_addr].mu_be[mu_word]) ; 
}
  if (!(mu__boolexpr1862)) mu__boolexpr1861 = FALSE ;
  else {
  mu__boolexpr1861 = ((mu_self.mu_IDICAgent[mu_agent].mu_cache[mu_addr].mu_data[mu_word]) != (mu_self.mu_aux.mu_latest_data[mu_addr][mu_word])) ; 
}
if ( mu__boolexpr1861 )
{
return mu_false;
}
};
};
};
};
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
bool mu__boolexpr1863;
bool mu__boolexpr1864;
  if (!((mu_self.mu_UPIAgent[mu_agent].mu_cache[mu_addr].mu_state) != (mu_CacheState__I))) mu__boolexpr1864 = FALSE ;
  else {
  mu__boolexpr1864 = (mu_self.mu_UPIAgent[mu_agent].mu_cache[mu_addr].mu_be[mu_word]) ; 
}
  if (!(mu__boolexpr1864)) mu__boolexpr1863 = FALSE ;
  else {
  mu__boolexpr1863 = ((mu_self.mu_UPIAgent[mu_agent].mu_cache[mu_addr].mu_data[mu_word]) != (mu_self.mu_aux.mu_latest_data[mu_addr][mu_word])) ; 
}
if ( mu__boolexpr1863 )
{
return mu_false;
}
};
};
};
};
}
};
};
return mu_true;
	Error.Error("The end of function NVL__data_consistency reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_NVL__never_snoop_requestor_UPIAgent(mu_1_State& mu_self)
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr1865;
bool mu__boolexpr1866;
bool mu__boolexpr1867;
  if (!(mu_self.mu_hbo.mu_tractor[mu_id].mu_valid)) mu__boolexpr1867 = FALSE ;
  else {
  mu__boolexpr1867 = ((mu_self.mu_hbo.mu_tractor[mu_id].mu_protocol) == (mu_Protocol__UPI)) ; 
}
  if (!(mu__boolexpr1867)) mu__boolexpr1866 = FALSE ;
  else {
  mu__boolexpr1866 = (mu_self.mu_hbo.mu_tractor[mu_id].mu_sf_lookup_done) ; 
}
  if (!(mu__boolexpr1866)) mu__boolexpr1865 = FALSE ;
  else {
  mu__boolexpr1865 = (mu_self.mu_hbo.mu_tractor[mu_id].mu_upi_snoop_target[mu_self.mu_hbo.mu_tractor[mu_id].mu_agent_id]) ; 
}
if ( mu__boolexpr1865 )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function NVL__never_snoop_requestor_UPIAgent reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_NVL__no_selfsnp_for_IDIC_agent_in_certain_opcodes(mu_1_State& mu_self)
{
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr1868;
bool mu__boolexpr1869;
bool mu__boolexpr1870;
bool mu__boolexpr1871;
  if (!(mu_self.mu_hbo.mu_tractor[mu_id].mu_valid)) mu__boolexpr1871 = FALSE ;
  else {
  mu__boolexpr1871 = ((mu_self.mu_hbo.mu_tractor[mu_id].mu_protocol) == (mu_Protocol__IDIC)) ; 
}
  if (!(mu__boolexpr1871)) mu__boolexpr1870 = FALSE ;
  else {
  mu__boolexpr1870 = (mu_self.mu_hbo.mu_tractor[mu_id].mu_sf_lookup_done) ; 
}
  if (!(mu__boolexpr1870)) mu__boolexpr1869 = FALSE ;
  else {
bool mu__boolexpr1872;
bool mu__boolexpr1873;
bool mu__boolexpr1874;
bool mu__boolexpr1875;
  if ((mu_self.mu_hbo.mu_tractor[mu_id].mu_iopcode) == (mu_IDI_Opcode__CleanEvict)) mu__boolexpr1875 = TRUE ;
  else {
  mu__boolexpr1875 = ((mu_self.mu_hbo.mu_tractor[mu_id].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoInvalidate)) ; 
}
  if (mu__boolexpr1875) mu__boolexpr1874 = TRUE ;
  else {
  mu__boolexpr1874 = ((mu_self.mu_hbo.mu_tractor[mu_id].mu_iopcode) == (mu_IDI_Opcode__DirtyEvict)) ; 
}
  if (mu__boolexpr1874) mu__boolexpr1873 = TRUE ;
  else {
  mu__boolexpr1873 = ((mu_self.mu_hbo.mu_tractor[mu_id].mu_iopcode) == (mu_IDI_Opcode__DirtyEvictNoInv)) ; 
}
  if (mu__boolexpr1873) mu__boolexpr1872 = TRUE ;
  else {
  mu__boolexpr1872 = ((mu_self.mu_hbo.mu_tractor[mu_id].mu_iopcode) == (mu_IDI_Opcode__CleanEvictNoData)) ; 
}
  mu__boolexpr1869 = (mu__boolexpr1872) ; 
}
  if (!(mu__boolexpr1869)) mu__boolexpr1868 = FALSE ;
  else {
  mu__boolexpr1868 = (mu_self.mu_hbo.mu_tractor[mu_id].mu_idic_snoop_target[mu_self.mu_hbo.mu_tractor[mu_id].mu_agent_id]) ; 
}
if ( mu__boolexpr1868 )
{
return mu_false;
}
};
};
return mu_true;
	Error.Error("The end of function NVL__no_selfsnp_for_IDIC_agent_in_certain_opcodes reached without returning values.");
};
/*** end function declaration ***/

mu_0_boolean mu_NVL__snoop_target_vs_snpneeded(mu_1_State& mu_self)
{
/*** Variable declaration ***/
mu_0_boolean mu_one_target("one_target",0);

mu_one_target = mu_false;
{
for(int mu_id = 0; mu_id <= 1; mu_id++) {
bool mu__boolexpr1876;
bool mu__boolexpr1877;
  if (!(mu_self.mu_hbo.mu_tractor[mu_id].mu_valid)) mu__boolexpr1877 = FALSE ;
  else {
  mu__boolexpr1877 = (mu_self.mu_hbo.mu_tractor[mu_id].mu_sf_lookup_done) ; 
}
  if (!(mu__boolexpr1877)) mu__boolexpr1876 = FALSE ;
  else {
  mu__boolexpr1876 = (!(mu_self.mu_hbo.mu_tractor[mu_id].mu_snpneeded)) ; 
}
if ( mu__boolexpr1876 )
{
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
if ( mu_self.mu_hbo.mu_tractor[mu_id].mu_idic_snoop_target[mu_agent] )
{
return mu_false;
}
};
};
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
if ( mu_self.mu_hbo.mu_tractor[mu_id].mu_upi_snoop_target[mu_agent] )
{
return mu_false;
}
};
};
}
else
{
bool mu__boolexpr1878;
bool mu__boolexpr1879;
  if (!(mu_self.mu_hbo.mu_tractor[mu_id].mu_valid)) mu__boolexpr1879 = FALSE ;
  else {
  mu__boolexpr1879 = (mu_self.mu_hbo.mu_tractor[mu_id].mu_sf_lookup_done) ; 
}
  if (!(mu__boolexpr1879)) mu__boolexpr1878 = FALSE ;
  else {
  mu__boolexpr1878 = (mu_self.mu_hbo.mu_tractor[mu_id].mu_snpneeded) ; 
}
if ( mu__boolexpr1878 )
{
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
if ( mu_self.mu_hbo.mu_tractor[mu_id].mu_idic_snoop_target[mu_agent] )
{
mu_one_target = mu_true;
}
};
};
{
for(int mu_agent = 0; mu_agent <= 2; mu_agent++) {
if ( mu_self.mu_hbo.mu_tractor[mu_id].mu_upi_snoop_target[mu_agent] )
{
mu_one_target = mu_true;
}
};
};
return mu_one_target;
}
}
};
};
return mu_true;
	Error.Error("The end of function NVL__snoop_target_vs_snpneeded reached without returning values.");
};
/*** end function declaration ***/





/********************
  The world
 ********************/
void world_class::clear()
{
  mu_self.clear();
  mu_guard_failed.clear();
}
void world_class::undefine()
{
  mu_self.undefine();
  mu_guard_failed.undefine();
}
void world_class::reset()
{
  mu_self.reset();
  mu_guard_failed.reset();
}
void world_class::print()
{
  static int num_calls = 0; /* to ward off recursive calls. */
  if ( num_calls == 0 ) {
    num_calls++;
  mu_self.print();
  mu_guard_failed.print();
    num_calls--;
}
}
void world_class::print_statistic()
{
  static int num_calls = 0; /* to ward off recursive calls. */
  if ( num_calls == 0 ) {
    num_calls++;
  mu_self.print_statistic();
  mu_guard_failed.print_statistic();
    num_calls--;
}
}
void world_class::print_diff( state *prevstate )
{
  if ( prevstate != NULL )
  {
    mu_self.print_diff(prevstate);
    mu_guard_failed.print_diff(prevstate);
  }
  else
print();
}
void world_class::to_state(state *newstate)
{
  mu_self.to_state( newstate );
  mu_guard_failed.to_state( newstate );
}
void world_class::setstate(state *thestate)
{
}


/********************
  Rule declarations
 ********************/
/******************** RuleBase0 ********************/
class RuleBase0
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_mufasa_early_read, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 0;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 2 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 0;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_mufasa_early_read ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase1 ********************/
class RuleBase1
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_parallel_mem_read_request, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 2;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 4 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 2;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_parallel_mem_read_request ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase2 ********************/
class RuleBase2
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_fastgo_response_to_idicagent, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 4;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 6 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 4;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_fastgo_response_to_idicagent ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase3 ********************/
class RuleBase3
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("move_to_memory_domain, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 6;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 8 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 6;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__move_to_memory_domain ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase4 ********************/
class RuleBase4
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_MEM_TORID mu_mctid;
    mu_mctid.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("hbo_recv_memory_response, mctid:%s", mu_mctid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_MEM_TORID mu_mctid;
    mu_mctid.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 8;
    static mu_1_MEM_TORID mu_mctid;
    mu_mctid.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 9 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 8;
    mu_mctid.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_MEM_TORID mu_mctid;
    mu_mctid.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_recv_memory_response ( mu_self, mu_mctid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase5 ********************/
class RuleBase5
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_memory_request, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 9;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 11 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 9;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_memory_request ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase6 ********************/
class RuleBase6
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("idicagent_send_ack_response, agent:%s, rtid:%s", mu_agent.Name(), mu_rtid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 11;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 14 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 11;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__idicagent_send_ack_response ( mu_self, mu_agent, mu_rtid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase7 ********************/
class RuleBase7
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_response_for_ClrMonitor, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 14;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 16 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 14;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_response_for_ClrMonitor ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase8 ********************/
class RuleBase8
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_fwd_response, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 16;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 18 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 16;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_fwd_response ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase9 ********************/
class RuleBase9
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("ulink_send_CAWb_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 18;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 21 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 18;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ulink_send_CAWb_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase10 ********************/
class RuleBase10
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("ca_request_fwd_conflict, agent:%s, address:%s", mu_agent.Name(), mu_address.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 21;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 24 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 21;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ca_request_fwd_conflict ( mu_self, mu_agent, mu_address );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase11 ********************/
class RuleBase11
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_CacheOp mu_cacheOp;
    mu_cacheOp.value((r % 3) + 143);
    r = r / 3;
    return tsprintf("downgrade_cacheline, agent:%s, address:%s, cacheOp:%s", mu_agent.Name(), mu_address.Name(), mu_cacheOp.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_CacheOp mu_cacheOp;
    mu_cacheOp.value((r % 3) + 143);
    r = r / 3;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 24;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_CacheOp mu_cacheOp;
    mu_cacheOp.value((r % 3) + 143);
    r = r / 3;
    while (what_rule < 33 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 9;
	}
	else
	  what_rule += 9;
    r = what_rule - 24;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    mu_cacheOp.value((r % 3) + 143);
    r = r / 3;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_CacheOp mu_cacheOp;
    mu_cacheOp.value((r % 3) + 143);
    r = r / 3;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__downgrade_cacheline ( mu_self, mu_agent, mu_address, mu_cacheOp );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase12 ********************/
class RuleBase12
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("upiagent_modify_cacheline, agent:%s, address:%s, word:%s, data:%s", mu_agent.Name(), mu_address.Name(), mu_word.Name(), mu_data.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 33;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 36 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 33;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__upiagent_modify_cacheline ( mu_self, mu_agent, mu_address, mu_word, mu_data );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase13 ********************/
class RuleBase13
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_release_tractor_uentry, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 36;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 38 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 36;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_release_tractor_uentry ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase14 ********************/
class RuleBase14
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("ulink_send_MCResp_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 38;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 41 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 38;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ulink_send_MCResp_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase15 ********************/
class RuleBase15
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("ulink_send_HAResp_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 41;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 44 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 41;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ulink_send_HAResp_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase16 ********************/
class RuleBase16
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_data_to_upiagent, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 44;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 46 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 44;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_data_to_upiagent ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase17 ********************/
class RuleBase17
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_response_to_upiagent, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 46;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 48 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 46;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_response_to_upiagent ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase18 ********************/
class RuleBase18
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("ulink_send_CAReq_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 48;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 51 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 48;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ulink_send_CAReq_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase19 ********************/
class RuleBase19
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_idx;
    mu_idx.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_opcode;
    mu_opcode.value((r % 43) + 57);
    r = r / 43;
    static mu_0_boolean mu_alloc_hint;
    mu_alloc_hint.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("ca_send_new_request, idx:%s, address:%s, opcode:%s, alloc_hint:%s", mu_idx.Name(), mu_address.Name(), mu_opcode.Name(), mu_alloc_hint.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_idx;
    mu_idx.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_opcode;
    mu_opcode.value((r % 43) + 57);
    r = r / 43;
    static mu_0_boolean mu_alloc_hint;
    mu_alloc_hint.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 51;
    static mu_1_UPIAgents mu_idx;
    mu_idx.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_opcode;
    mu_opcode.value((r % 43) + 57);
    r = r / 43;
    static mu_0_boolean mu_alloc_hint;
    mu_alloc_hint.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 309 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 258;
	}
	else
	  what_rule += 258;
    r = what_rule - 51;
    mu_idx.value((r % 3) + 0);
    r = r / 3;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    mu_opcode.value((r % 43) + 57);
    r = r / 43;
    mu_alloc_hint.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_idx;
    mu_idx.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_opcode;
    mu_opcode.value((r % 43) + 57);
    r = r / 43;
    static mu_0_boolean mu_alloc_hint;
    mu_alloc_hint.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ca_send_new_request ( mu_self, mu_idx, mu_address, mu_opcode, mu_alloc_hint );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase20 ********************/
class RuleBase20
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("idicagent_send_snoop_data, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 309;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 312 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 309;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__idicagent_send_snoop_data ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase21 ********************/
class RuleBase21
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("idicagent_modify_cacheline, agent:%s, address:%s, word:%s, data:%s", mu_agent.Name(), mu_address.Name(), mu_word.Name(), mu_data.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 312;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 315 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 312;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_address;
    mu_address.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__idicagent_modify_cacheline ( mu_self, mu_agent, mu_address, mu_word, mu_data );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase22 ********************/
class RuleBase22
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("agent_send_write_data, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 315;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 318 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 315;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__agent_send_write_data ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase23 ********************/
class RuleBase23
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("ulink_send_CAResp_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 318;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 321 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 318;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ulink_send_CAResp_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase24 ********************/
class RuleBase24
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_resp_opcode;
    mu_resp_opcode.value((r % 43) + 57);
    r = r / 43;
    return tsprintf("upiagent_process_snoop_entry, agent:%s, idx:%s, resp_opcode:%s", mu_agent.Name(), mu_idx.Name(), mu_resp_opcode.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_resp_opcode;
    mu_resp_opcode.value((r % 43) + 57);
    r = r / 43;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 321;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_resp_opcode;
    mu_resp_opcode.value((r % 43) + 57);
    r = r / 43;
    while (what_rule < 450 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 129;
	}
	else
	  what_rule += 129;
    r = what_rule - 321;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    mu_resp_opcode.value((r % 43) + 57);
    r = r / 43;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Address mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_UPI_Opcode mu_resp_opcode;
    mu_resp_opcode.value((r % 43) + 57);
    r = r / 43;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__upiagent_process_snoop_entry ( mu_self, mu_agent, mu_idx, mu_resp_opcode );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase25 ********************/
class RuleBase25
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("ulink_send_HASnp_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 450;
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 453 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 450;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_UPIAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__ulink_send_HASnp_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase26 ********************/
class RuleBase26
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_UPIAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    return tsprintf("hbo_send_snoop_to_upiagent, htid:%s, id:%s", mu_htid.Name(), mu_id.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_UPIAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 453;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_UPIAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    while (what_rule < 459 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 6;
	}
	else
	  what_rule += 6;
    r = what_rule - 453;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_UPIAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_snoop_to_upiagent ( mu_self, mu_htid, mu_id );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase27 ********************/
class RuleBase27
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("agent_release_cq_entry, agent:%s, rtid:%s", mu_agent.Name(), mu_rtid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 459;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 462 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 459;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_RTID mu_rtid;
    mu_rtid.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__agent_release_cq_entry ( mu_self, mu_agent, mu_rtid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase28 ********************/
class RuleBase28
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("link_send_F2AData_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 462;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 465 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 462;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__link_send_F2AData_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase29 ********************/
class RuleBase29
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("link_send_F2AResp_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 465;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 468 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 465;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__link_send_F2AResp_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase30 ********************/
class RuleBase30
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("link_send_F2AReq_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 468;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 471 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 468;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__link_send_F2AReq_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase31 ********************/
class RuleBase31
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("link_send_A2FData_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 471;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 474 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 471;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__link_send_A2FData_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase32 ********************/
class RuleBase32
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("link_send_A2FResp_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 474;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 477 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 474;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__link_send_A2FResp_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase33 ********************/
class RuleBase33
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("link_send_A2FReq_packet, agent:%s, index:%s", mu_agent.Name(), mu_index.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 477;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 480 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 477;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_index.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_CHANNEL_SIZE mu_index;
    mu_index.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__link_send_A2FReq_packet ( mu_self, mu_agent, mu_index );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase34 ********************/
class RuleBase34
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_release_tractor_entry, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 480;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 482 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 480;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_release_tractor_entry ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase35 ********************/
class RuleBase35
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_data_to_idicagent, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 482;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 484 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 482;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_data_to_idicagent ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase36 ********************/
class RuleBase36
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_late_response_to_idicagent, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 484;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 486 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 484;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_late_response_to_idicagent ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase37 ********************/
class RuleBase37
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_mufasa_alloc_and_update, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 486;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 488 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 486;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_mufasa_alloc_and_update ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase38 ********************/
class RuleBase38
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_late_mufasa_lookup_phase, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 488;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 490 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 488;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_late_mufasa_lookup_phase ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase39 ********************/
class RuleBase39
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_send_early_response_to_idicagent, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 490;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 492 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 490;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_early_response_to_idicagent ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase40 ********************/
class RuleBase40
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("idicagent_send_snoop_response, agent:%s, idx:%s", mu_agent.Name(), mu_idx.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 492;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 495 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 3;
	}
	else
	  what_rule += 3;
    r = what_rule - 492;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__idicagent_send_snoop_response ( mu_self, mu_agent, mu_idx );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase41 ********************/
class RuleBase41
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_range__3 mu_bias;
    mu_bias.value((r % 3) + 0);
    r = r / 3;
    return tsprintf("idicagent_compute_snoop_response, agent:%s, idx:%s, bias:%s", mu_agent.Name(), mu_idx.Name(), mu_bias.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_range__3 mu_bias;
    mu_bias.value((r % 3) + 0);
    r = r / 3;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 495;
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_range__3 mu_bias;
    mu_bias.value((r % 3) + 0);
    r = r / 3;
    while (what_rule < 504 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 9;
	}
	else
	  what_rule += 9;
    r = what_rule - 495;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    mu_bias.value((r % 3) + 0);
    r = r / 3;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_IDICAgents mu_agent;
    mu_agent.value((r % 3) + 0);
    r = r / 3;
    static mu_1_Snoopq_sz mu_idx;
    mu_idx.value((r % 1) + 0);
    r = r / 1;
    static mu_1_range__3 mu_bias;
    mu_bias.value((r % 3) + 0);
    r = r / 3;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__idicagent_compute_snoop_response ( mu_self, mu_agent, mu_idx, mu_bias );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase42 ********************/
class RuleBase42
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_IDICAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    return tsprintf("hbo_send_snoop_to_idicagent, htid:%s, id:%s", mu_htid.Name(), mu_id.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_IDICAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 504;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_IDICAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    while (what_rule < 510 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 6;
	}
	else
	  what_rule += 6;
    r = what_rule - 504;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    mu_id.value((r % 3) + 0);
    r = r / 3;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_1_IDICAgents mu_id;
    mu_id.value((r % 3) + 0);
    r = r / 3;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_send_snoop_to_idicagent ( mu_self, mu_htid, mu_id );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase43 ********************/
class RuleBase43
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_early_MFS_lookup_phase, htid:%s", mu_htid.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 510;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 512 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 2;
	}
	else
	  what_rule += 2;
    r = what_rule - 510;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_early_MFS_lookup_phase ( mu_self, mu_htid );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase44 ********************/
class RuleBase44
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_0_boolean mu_choice;
    mu_choice.value((r % 2) + 0);
    r = r / 2;
    return tsprintf("hbo_sf_lookup_phase, htid:%s, choice:%s", mu_htid.Name(), mu_choice.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_0_boolean mu_choice;
    mu_choice.value((r % 2) + 0);
    r = r / 2;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 512;
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_0_boolean mu_choice;
    mu_choice.value((r % 2) + 0);
    r = r / 2;
    while (what_rule < 516 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 4;
	}
	else
	  what_rule += 4;
    r = what_rule - 512;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    mu_choice.value((r % 2) + 0);
    r = r / 2;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_HTID mu_htid;
    mu_htid.value((r % 2) + 0);
    r = r / 2;
    static mu_0_boolean mu_choice;
    mu_choice.value((r % 2) + 0);
    r = r / 2;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__hbo_sf_lookup_phase ( mu_self, mu_htid, mu_choice );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
/******************** RuleBase45 ********************/
class RuleBase45
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    return tsprintf("update_buffer, word:%s, data:%s", mu_word.Name(), mu_data.Name());
  }
  bool Condition(unsigned r)
  {
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    return 1;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 516;
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    while (what_rule < 517 )
      {
	if ( ( TRUE  ) ) {
	      if (1) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 516;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    mu_data.value((r % 1) + 0);
    r = r / 1;
    }
  }

  void Code(unsigned r)
  {
    static mu_1_Word mu_word;
    mu_word.value((r % 1) + 0);
    r = r / 1;
    static mu_1_Data mu_data;
    mu_data.value((r % 1) + 0);
    r = r / 1;
/*** Variable declaration ***/
mu_1_State mu_temp_state("temp_state",0);

mu_temp_state = mu_self;
mu_NVL__update_buffer ( mu_self, mu_word, mu_data );
if ( !(mu_guard_failed.isundefined()) )
{
if ( (mu_guard_failed) == (mu_true) )
{
mu_self = mu_temp_state;
mu_guard_failed.undefine();
}
}
  };

};
class NextStateGenerator
{
  RuleBase0 R0;
  RuleBase1 R1;
  RuleBase2 R2;
  RuleBase3 R3;
  RuleBase4 R4;
  RuleBase5 R5;
  RuleBase6 R6;
  RuleBase7 R7;
  RuleBase8 R8;
  RuleBase9 R9;
  RuleBase10 R10;
  RuleBase11 R11;
  RuleBase12 R12;
  RuleBase13 R13;
  RuleBase14 R14;
  RuleBase15 R15;
  RuleBase16 R16;
  RuleBase17 R17;
  RuleBase18 R18;
  RuleBase19 R19;
  RuleBase20 R20;
  RuleBase21 R21;
  RuleBase22 R22;
  RuleBase23 R23;
  RuleBase24 R24;
  RuleBase25 R25;
  RuleBase26 R26;
  RuleBase27 R27;
  RuleBase28 R28;
  RuleBase29 R29;
  RuleBase30 R30;
  RuleBase31 R31;
  RuleBase32 R32;
  RuleBase33 R33;
  RuleBase34 R34;
  RuleBase35 R35;
  RuleBase36 R36;
  RuleBase37 R37;
  RuleBase38 R38;
  RuleBase39 R39;
  RuleBase40 R40;
  RuleBase41 R41;
  RuleBase42 R42;
  RuleBase43 R43;
  RuleBase44 R44;
  RuleBase45 R45;
public:
void SetNextEnabledRule(unsigned & what_rule)
{
  category = CONDITION;
  if (what_rule<2)
    { R0.NextRule(what_rule);
      if (what_rule<2) return; }
  if (what_rule>=2 && what_rule<4)
    { R1.NextRule(what_rule);
      if (what_rule<4) return; }
  if (what_rule>=4 && what_rule<6)
    { R2.NextRule(what_rule);
      if (what_rule<6) return; }
  if (what_rule>=6 && what_rule<8)
    { R3.NextRule(what_rule);
      if (what_rule<8) return; }
  if (what_rule>=8 && what_rule<9)
    { R4.NextRule(what_rule);
      if (what_rule<9) return; }
  if (what_rule>=9 && what_rule<11)
    { R5.NextRule(what_rule);
      if (what_rule<11) return; }
  if (what_rule>=11 && what_rule<14)
    { R6.NextRule(what_rule);
      if (what_rule<14) return; }
  if (what_rule>=14 && what_rule<16)
    { R7.NextRule(what_rule);
      if (what_rule<16) return; }
  if (what_rule>=16 && what_rule<18)
    { R8.NextRule(what_rule);
      if (what_rule<18) return; }
  if (what_rule>=18 && what_rule<21)
    { R9.NextRule(what_rule);
      if (what_rule<21) return; }
  if (what_rule>=21 && what_rule<24)
    { R10.NextRule(what_rule);
      if (what_rule<24) return; }
  if (what_rule>=24 && what_rule<33)
    { R11.NextRule(what_rule);
      if (what_rule<33) return; }
  if (what_rule>=33 && what_rule<36)
    { R12.NextRule(what_rule);
      if (what_rule<36) return; }
  if (what_rule>=36 && what_rule<38)
    { R13.NextRule(what_rule);
      if (what_rule<38) return; }
  if (what_rule>=38 && what_rule<41)
    { R14.NextRule(what_rule);
      if (what_rule<41) return; }
  if (what_rule>=41 && what_rule<44)
    { R15.NextRule(what_rule);
      if (what_rule<44) return; }
  if (what_rule>=44 && what_rule<46)
    { R16.NextRule(what_rule);
      if (what_rule<46) return; }
  if (what_rule>=46 && what_rule<48)
    { R17.NextRule(what_rule);
      if (what_rule<48) return; }
  if (what_rule>=48 && what_rule<51)
    { R18.NextRule(what_rule);
      if (what_rule<51) return; }
  if (what_rule>=51 && what_rule<309)
    { R19.NextRule(what_rule);
      if (what_rule<309) return; }
  if (what_rule>=309 && what_rule<312)
    { R20.NextRule(what_rule);
      if (what_rule<312) return; }
  if (what_rule>=312 && what_rule<315)
    { R21.NextRule(what_rule);
      if (what_rule<315) return; }
  if (what_rule>=315 && what_rule<318)
    { R22.NextRule(what_rule);
      if (what_rule<318) return; }
  if (what_rule>=318 && what_rule<321)
    { R23.NextRule(what_rule);
      if (what_rule<321) return; }
  if (what_rule>=321 && what_rule<450)
    { R24.NextRule(what_rule);
      if (what_rule<450) return; }
  if (what_rule>=450 && what_rule<453)
    { R25.NextRule(what_rule);
      if (what_rule<453) return; }
  if (what_rule>=453 && what_rule<459)
    { R26.NextRule(what_rule);
      if (what_rule<459) return; }
  if (what_rule>=459 && what_rule<462)
    { R27.NextRule(what_rule);
      if (what_rule<462) return; }
  if (what_rule>=462 && what_rule<465)
    { R28.NextRule(what_rule);
      if (what_rule<465) return; }
  if (what_rule>=465 && what_rule<468)
    { R29.NextRule(what_rule);
      if (what_rule<468) return; }
  if (what_rule>=468 && what_rule<471)
    { R30.NextRule(what_rule);
      if (what_rule<471) return; }
  if (what_rule>=471 && what_rule<474)
    { R31.NextRule(what_rule);
      if (what_rule<474) return; }
  if (what_rule>=474 && what_rule<477)
    { R32.NextRule(what_rule);
      if (what_rule<477) return; }
  if (what_rule>=477 && what_rule<480)
    { R33.NextRule(what_rule);
      if (what_rule<480) return; }
  if (what_rule>=480 && what_rule<482)
    { R34.NextRule(what_rule);
      if (what_rule<482) return; }
  if (what_rule>=482 && what_rule<484)
    { R35.NextRule(what_rule);
      if (what_rule<484) return; }
  if (what_rule>=484 && what_rule<486)
    { R36.NextRule(what_rule);
      if (what_rule<486) return; }
  if (what_rule>=486 && what_rule<488)
    { R37.NextRule(what_rule);
      if (what_rule<488) return; }
  if (what_rule>=488 && what_rule<490)
    { R38.NextRule(what_rule);
      if (what_rule<490) return; }
  if (what_rule>=490 && what_rule<492)
    { R39.NextRule(what_rule);
      if (what_rule<492) return; }
  if (what_rule>=492 && what_rule<495)
    { R40.NextRule(what_rule);
      if (what_rule<495) return; }
  if (what_rule>=495 && what_rule<504)
    { R41.NextRule(what_rule);
      if (what_rule<504) return; }
  if (what_rule>=504 && what_rule<510)
    { R42.NextRule(what_rule);
      if (what_rule<510) return; }
  if (what_rule>=510 && what_rule<512)
    { R43.NextRule(what_rule);
      if (what_rule<512) return; }
  if (what_rule>=512 && what_rule<516)
    { R44.NextRule(what_rule);
      if (what_rule<516) return; }
  if (what_rule>=516 && what_rule<517)
    { R45.NextRule(what_rule);
      if (what_rule<517) return; }
}
bool Condition(unsigned r)
{
  category = CONDITION;
  if (r<=1) return R0.Condition(r-0);
  if (r>=2 && r<=3) return R1.Condition(r-2);
  if (r>=4 && r<=5) return R2.Condition(r-4);
  if (r>=6 && r<=7) return R3.Condition(r-6);
  if (r>=8 && r<=8) return R4.Condition(r-8);
  if (r>=9 && r<=10) return R5.Condition(r-9);
  if (r>=11 && r<=13) return R6.Condition(r-11);
  if (r>=14 && r<=15) return R7.Condition(r-14);
  if (r>=16 && r<=17) return R8.Condition(r-16);
  if (r>=18 && r<=20) return R9.Condition(r-18);
  if (r>=21 && r<=23) return R10.Condition(r-21);
  if (r>=24 && r<=32) return R11.Condition(r-24);
  if (r>=33 && r<=35) return R12.Condition(r-33);
  if (r>=36 && r<=37) return R13.Condition(r-36);
  if (r>=38 && r<=40) return R14.Condition(r-38);
  if (r>=41 && r<=43) return R15.Condition(r-41);
  if (r>=44 && r<=45) return R16.Condition(r-44);
  if (r>=46 && r<=47) return R17.Condition(r-46);
  if (r>=48 && r<=50) return R18.Condition(r-48);
  if (r>=51 && r<=308) return R19.Condition(r-51);
  if (r>=309 && r<=311) return R20.Condition(r-309);
  if (r>=312 && r<=314) return R21.Condition(r-312);
  if (r>=315 && r<=317) return R22.Condition(r-315);
  if (r>=318 && r<=320) return R23.Condition(r-318);
  if (r>=321 && r<=449) return R24.Condition(r-321);
  if (r>=450 && r<=452) return R25.Condition(r-450);
  if (r>=453 && r<=458) return R26.Condition(r-453);
  if (r>=459 && r<=461) return R27.Condition(r-459);
  if (r>=462 && r<=464) return R28.Condition(r-462);
  if (r>=465 && r<=467) return R29.Condition(r-465);
  if (r>=468 && r<=470) return R30.Condition(r-468);
  if (r>=471 && r<=473) return R31.Condition(r-471);
  if (r>=474 && r<=476) return R32.Condition(r-474);
  if (r>=477 && r<=479) return R33.Condition(r-477);
  if (r>=480 && r<=481) return R34.Condition(r-480);
  if (r>=482 && r<=483) return R35.Condition(r-482);
  if (r>=484 && r<=485) return R36.Condition(r-484);
  if (r>=486 && r<=487) return R37.Condition(r-486);
  if (r>=488 && r<=489) return R38.Condition(r-488);
  if (r>=490 && r<=491) return R39.Condition(r-490);
  if (r>=492 && r<=494) return R40.Condition(r-492);
  if (r>=495 && r<=503) return R41.Condition(r-495);
  if (r>=504 && r<=509) return R42.Condition(r-504);
  if (r>=510 && r<=511) return R43.Condition(r-510);
  if (r>=512 && r<=515) return R44.Condition(r-512);
  if (r>=516 && r<=516) return R45.Condition(r-516);
Error.Notrace("Internal: NextStateGenerator -- checking condition for nonexisting rule.");
return 0;}
void Code(unsigned r)
{
  if (r<=1) { R0.Code(r-0); return; } 
  if (r>=2 && r<=3) { R1.Code(r-2); return; } 
  if (r>=4 && r<=5) { R2.Code(r-4); return; } 
  if (r>=6 && r<=7) { R3.Code(r-6); return; } 
  if (r>=8 && r<=8) { R4.Code(r-8); return; } 
  if (r>=9 && r<=10) { R5.Code(r-9); return; } 
  if (r>=11 && r<=13) { R6.Code(r-11); return; } 
  if (r>=14 && r<=15) { R7.Code(r-14); return; } 
  if (r>=16 && r<=17) { R8.Code(r-16); return; } 
  if (r>=18 && r<=20) { R9.Code(r-18); return; } 
  if (r>=21 && r<=23) { R10.Code(r-21); return; } 
  if (r>=24 && r<=32) { R11.Code(r-24); return; } 
  if (r>=33 && r<=35) { R12.Code(r-33); return; } 
  if (r>=36 && r<=37) { R13.Code(r-36); return; } 
  if (r>=38 && r<=40) { R14.Code(r-38); return; } 
  if (r>=41 && r<=43) { R15.Code(r-41); return; } 
  if (r>=44 && r<=45) { R16.Code(r-44); return; } 
  if (r>=46 && r<=47) { R17.Code(r-46); return; } 
  if (r>=48 && r<=50) { R18.Code(r-48); return; } 
  if (r>=51 && r<=308) { R19.Code(r-51); return; } 
  if (r>=309 && r<=311) { R20.Code(r-309); return; } 
  if (r>=312 && r<=314) { R21.Code(r-312); return; } 
  if (r>=315 && r<=317) { R22.Code(r-315); return; } 
  if (r>=318 && r<=320) { R23.Code(r-318); return; } 
  if (r>=321 && r<=449) { R24.Code(r-321); return; } 
  if (r>=450 && r<=452) { R25.Code(r-450); return; } 
  if (r>=453 && r<=458) { R26.Code(r-453); return; } 
  if (r>=459 && r<=461) { R27.Code(r-459); return; } 
  if (r>=462 && r<=464) { R28.Code(r-462); return; } 
  if (r>=465 && r<=467) { R29.Code(r-465); return; } 
  if (r>=468 && r<=470) { R30.Code(r-468); return; } 
  if (r>=471 && r<=473) { R31.Code(r-471); return; } 
  if (r>=474 && r<=476) { R32.Code(r-474); return; } 
  if (r>=477 && r<=479) { R33.Code(r-477); return; } 
  if (r>=480 && r<=481) { R34.Code(r-480); return; } 
  if (r>=482 && r<=483) { R35.Code(r-482); return; } 
  if (r>=484 && r<=485) { R36.Code(r-484); return; } 
  if (r>=486 && r<=487) { R37.Code(r-486); return; } 
  if (r>=488 && r<=489) { R38.Code(r-488); return; } 
  if (r>=490 && r<=491) { R39.Code(r-490); return; } 
  if (r>=492 && r<=494) { R40.Code(r-492); return; } 
  if (r>=495 && r<=503) { R41.Code(r-495); return; } 
  if (r>=504 && r<=509) { R42.Code(r-504); return; } 
  if (r>=510 && r<=511) { R43.Code(r-510); return; } 
  if (r>=512 && r<=515) { R44.Code(r-512); return; } 
  if (r>=516 && r<=516) { R45.Code(r-516); return; } 
}
int Priority(unsigned short r)
{
  if (r<=1) { return R0.Priority(); } 
  if (r>=2 && r<=3) { return R1.Priority(); } 
  if (r>=4 && r<=5) { return R2.Priority(); } 
  if (r>=6 && r<=7) { return R3.Priority(); } 
  if (r>=8 && r<=8) { return R4.Priority(); } 
  if (r>=9 && r<=10) { return R5.Priority(); } 
  if (r>=11 && r<=13) { return R6.Priority(); } 
  if (r>=14 && r<=15) { return R7.Priority(); } 
  if (r>=16 && r<=17) { return R8.Priority(); } 
  if (r>=18 && r<=20) { return R9.Priority(); } 
  if (r>=21 && r<=23) { return R10.Priority(); } 
  if (r>=24 && r<=32) { return R11.Priority(); } 
  if (r>=33 && r<=35) { return R12.Priority(); } 
  if (r>=36 && r<=37) { return R13.Priority(); } 
  if (r>=38 && r<=40) { return R14.Priority(); } 
  if (r>=41 && r<=43) { return R15.Priority(); } 
  if (r>=44 && r<=45) { return R16.Priority(); } 
  if (r>=46 && r<=47) { return R17.Priority(); } 
  if (r>=48 && r<=50) { return R18.Priority(); } 
  if (r>=51 && r<=308) { return R19.Priority(); } 
  if (r>=309 && r<=311) { return R20.Priority(); } 
  if (r>=312 && r<=314) { return R21.Priority(); } 
  if (r>=315 && r<=317) { return R22.Priority(); } 
  if (r>=318 && r<=320) { return R23.Priority(); } 
  if (r>=321 && r<=449) { return R24.Priority(); } 
  if (r>=450 && r<=452) { return R25.Priority(); } 
  if (r>=453 && r<=458) { return R26.Priority(); } 
  if (r>=459 && r<=461) { return R27.Priority(); } 
  if (r>=462 && r<=464) { return R28.Priority(); } 
  if (r>=465 && r<=467) { return R29.Priority(); } 
  if (r>=468 && r<=470) { return R30.Priority(); } 
  if (r>=471 && r<=473) { return R31.Priority(); } 
  if (r>=474 && r<=476) { return R32.Priority(); } 
  if (r>=477 && r<=479) { return R33.Priority(); } 
  if (r>=480 && r<=481) { return R34.Priority(); } 
  if (r>=482 && r<=483) { return R35.Priority(); } 
  if (r>=484 && r<=485) { return R36.Priority(); } 
  if (r>=486 && r<=487) { return R37.Priority(); } 
  if (r>=488 && r<=489) { return R38.Priority(); } 
  if (r>=490 && r<=491) { return R39.Priority(); } 
  if (r>=492 && r<=494) { return R40.Priority(); } 
  if (r>=495 && r<=503) { return R41.Priority(); } 
  if (r>=504 && r<=509) { return R42.Priority(); } 
  if (r>=510 && r<=511) { return R43.Priority(); } 
  if (r>=512 && r<=515) { return R44.Priority(); } 
  if (r>=516 && r<=516) { return R45.Priority(); } 
return 0;}
char * Name(unsigned r)
{
  if (r<=1) return R0.Name(r-0);
  if (r>=2 && r<=3) return R1.Name(r-2);
  if (r>=4 && r<=5) return R2.Name(r-4);
  if (r>=6 && r<=7) return R3.Name(r-6);
  if (r>=8 && r<=8) return R4.Name(r-8);
  if (r>=9 && r<=10) return R5.Name(r-9);
  if (r>=11 && r<=13) return R6.Name(r-11);
  if (r>=14 && r<=15) return R7.Name(r-14);
  if (r>=16 && r<=17) return R8.Name(r-16);
  if (r>=18 && r<=20) return R9.Name(r-18);
  if (r>=21 && r<=23) return R10.Name(r-21);
  if (r>=24 && r<=32) return R11.Name(r-24);
  if (r>=33 && r<=35) return R12.Name(r-33);
  if (r>=36 && r<=37) return R13.Name(r-36);
  if (r>=38 && r<=40) return R14.Name(r-38);
  if (r>=41 && r<=43) return R15.Name(r-41);
  if (r>=44 && r<=45) return R16.Name(r-44);
  if (r>=46 && r<=47) return R17.Name(r-46);
  if (r>=48 && r<=50) return R18.Name(r-48);
  if (r>=51 && r<=308) return R19.Name(r-51);
  if (r>=309 && r<=311) return R20.Name(r-309);
  if (r>=312 && r<=314) return R21.Name(r-312);
  if (r>=315 && r<=317) return R22.Name(r-315);
  if (r>=318 && r<=320) return R23.Name(r-318);
  if (r>=321 && r<=449) return R24.Name(r-321);
  if (r>=450 && r<=452) return R25.Name(r-450);
  if (r>=453 && r<=458) return R26.Name(r-453);
  if (r>=459 && r<=461) return R27.Name(r-459);
  if (r>=462 && r<=464) return R28.Name(r-462);
  if (r>=465 && r<=467) return R29.Name(r-465);
  if (r>=468 && r<=470) return R30.Name(r-468);
  if (r>=471 && r<=473) return R31.Name(r-471);
  if (r>=474 && r<=476) return R32.Name(r-474);
  if (r>=477 && r<=479) return R33.Name(r-477);
  if (r>=480 && r<=481) return R34.Name(r-480);
  if (r>=482 && r<=483) return R35.Name(r-482);
  if (r>=484 && r<=485) return R36.Name(r-484);
  if (r>=486 && r<=487) return R37.Name(r-486);
  if (r>=488 && r<=489) return R38.Name(r-488);
  if (r>=490 && r<=491) return R39.Name(r-490);
  if (r>=492 && r<=494) return R40.Name(r-492);
  if (r>=495 && r<=503) return R41.Name(r-495);
  if (r>=504 && r<=509) return R42.Name(r-504);
  if (r>=510 && r<=511) return R43.Name(r-510);
  if (r>=512 && r<=515) return R44.Name(r-512);
  if (r>=516 && r<=516) return R45.Name(r-516);
  return NULL;
}
};
const unsigned numrules = 517;

/********************
  parameter
 ********************/
#define RULES_IN_WORLD 517


/********************
  Startstate records
 ********************/
/******************** StartStateBase0 ********************/
class StartStateBase0
{
public:
  char * Name(unsigned short r)
  {
    return tsprintf("reset");
  }
  void Code(unsigned short r)
  {
mu_HBo__reset ( mu_self.mu_hbo );
{
for(int mu_id = 0; mu_id <= 2; mu_id++) {
mu_IDIAgent__reset ( mu_self.mu_IDICAgent[mu_id] );
mu_Link__reset ( mu_self.mu_idiclink[mu_id], mu_id );
};
};
{
for(int mu_id = 0; mu_id <= 2; mu_id++) {
mu_CA__reset ( mu_self.mu_UPIAgent[mu_id], mu_id );
mu_ULink__reset ( mu_self.mu_santa[mu_id] );
};
};
mu_self.mu_idic_buffer.undefine();
{
for(int mu_word = 0; mu_word <= 0; mu_word++) {
mu_self.mu_buffer_be[mu_word] = mu_false;
};
};
{
for(int mu_addr = 0; mu_addr <= 0; mu_addr++) {
mu_self.mu_aux.mu_latest_data[mu_addr] = mu_self.mu_hbo.mu_mem[mu_addr];
};
};
  };

};
class StartStateGenerator
{
  StartStateBase0 S0;
public:
void Code(unsigned short r)
{
  if (r<=0) { S0.Code(r-0); return; }
}
char * Name(unsigned short r)
{
  if (r<=0) return S0.Name(r-0);
  return NULL;
}
};
const rulerec startstates[] = {
{ NULL, NULL, NULL, FALSE},
};
unsigned short StartStateManager::numstartstates = 1;

/********************
  Invariant records
 ********************/
int mu__invariant_1880() // Invariant "snoop_target_vs_snpneeded"
{
return mu_NVL__snoop_target_vs_snpneeded( mu_self );
};

bool mu__condition_1881() // Condition for Rule "snoop_target_vs_snpneeded"
{
  return mu__invariant_1880( );
}

/**** end rule declaration ****/

int mu__invariant_1882() // Invariant "no_selfsnp_for_IDIC_agent_in_certain_opcodes"
{
return mu_NVL__no_selfsnp_for_IDIC_agent_in_certain_opcodes( mu_self );
};

bool mu__condition_1883() // Condition for Rule "no_selfsnp_for_IDIC_agent_in_certain_opcodes"
{
  return mu__invariant_1882( );
}

/**** end rule declaration ****/

int mu__invariant_1884() // Invariant "never_snoop_requestor_UPIAgent"
{
return mu_NVL__never_snoop_requestor_UPIAgent( mu_self );
};

bool mu__condition_1885() // Condition for Rule "never_snoop_requestor_UPIAgent"
{
  return mu__invariant_1884( );
}

/**** end rule declaration ****/

int mu__invariant_1886() // Invariant "data_consistency"
{
return mu_NVL__data_consistency( mu_self );
};

bool mu__condition_1887() // Condition for Rule "data_consistency"
{
  return mu__invariant_1886( );
}

/**** end rule declaration ****/

int mu__invariant_1888() // Invariant "snoop_filter_cs_consistency"
{
return mu_NVL__snoop_filter_cs_consistency( mu_self );
};

bool mu__condition_1889() // Condition for Rule "snoop_filter_cs_consistency"
{
  return mu__invariant_1888( );
}

/**** end rule declaration ****/

int mu__invariant_1890() // Invariant "cache_state_consistency"
{
return mu_NVL__cache_state_consistency( mu_self );
};

bool mu__condition_1891() // Condition for Rule "cache_state_consistency"
{
  return mu__invariant_1890( );
}

/**** end rule declaration ****/

const rulerec invariants[] = {
{"cache_state_consistency", &mu__condition_1891, NULL, },
{"snoop_filter_cs_consistency", &mu__condition_1889, NULL, },
{"data_consistency", &mu__condition_1887, NULL, },
{"never_snoop_requestor_UPIAgent", &mu__condition_1885, NULL, },
{"no_selfsnp_for_IDIC_agent_in_certain_opcodes", &mu__condition_1883, NULL, },
{"snoop_target_vs_snpneeded", &mu__condition_1881, NULL, },
};
const unsigned short numinvariants = 6;

/********************
  Normal/Canonicalization for scalarset
 ********************/
/*
self:NoScalarset
guard_failed:NoScalarset
*/

/********************
Code for symmetry
 ********************/

/********************
 Permutation Set Class
 ********************/
class PermSet
{
public:
  // book keeping
  enum PresentationType {Simple, Explicit};
  PresentationType Presentation;

  void ResetToSimple();
  void ResetToExplicit();
  void SimpleToExplicit();
  void SimpleToOne();
  bool NextPermutation();

  void Print_in_size()
  { int ret=0; for (int i=0; i<count; i++) if (in[i]) ret++; cout << "in_size:" << ret << "\n"; }


  /********************
   Simple and efficient representation
   ********************/
  bool AlreadyOnlyOneRemain;
  bool MoreThanOneRemain();


  /********************
   Explicit representation
  ********************/
  unsigned long size;
  unsigned long count;
  // in will be of product of factorial sizes for fast canonicalize
  // in will be of size 1 for reduced local memory canonicalize
  bool * in;

  // auxiliary for explicit representation

  // in/perm/revperm will be of factorial size for fast canonicalize
  // they will be of size 1 for reduced local memory canonicalize
  // second range will be size of the scalarset
  // procedure for explicit representation
  // General procedure
  PermSet();
  bool In(int i) const { return in[i]; };
  void Add(int i) { for (int j=0; j<i; j++) in[j] = FALSE;};
  void Remove(int i) { in[i] = FALSE; };
};
bool PermSet::MoreThanOneRemain()
{
  int i,j;
  if (AlreadyOnlyOneRemain)
    return FALSE;
  else {
  }
  AlreadyOnlyOneRemain = TRUE;
  return FALSE;
}
PermSet::PermSet()
: Presentation(Simple)
{
  int i,j,k;
  if (  args->sym_alg.mode == argsym_alg::Exhaustive_Fast_Canonicalize) {

  /********************
   declaration of class variables
  ********************/
  in = new bool[1];

    // Set perm and revperm

    // setting up combination of permutations
    // for different scalarset
    int carry;
    size = 1;
    count = 1;
    for (i=0; i<1; i++)
      {
        carry = 1;
        in[i]= TRUE;
    }
  }
  else
  {

  /********************
   declaration of class variables
  ********************/
  in = new bool[1];
  in[0] = TRUE;
  }
}
void PermSet::ResetToSimple()
{
  int i;

  AlreadyOnlyOneRemain = FALSE;
  Presentation = Simple;
}
void PermSet::ResetToExplicit()
{
  for (int i=0; i<1; i++) in[i] = TRUE;
  Presentation = Explicit;
}
void PermSet::SimpleToExplicit()
{
  int i,j,k;
  int start, class_size;

  // Setup range for mapping

  // To be In or not to be

  // setup explicit representation 
  // Set perm and revperm
  for (i=0; i<1; i++)
    {
      in[i] = TRUE;
    }
  Presentation = Explicit;
  if (args->test_parameter1.value==0) Print_in_size();
}
void PermSet::SimpleToOne()
{
  int i,j,k;
  int class_size;
  int start;


  // Setup range for mapping
  Presentation = Explicit;
}
bool PermSet::NextPermutation()
{
  bool nexted = FALSE;
  int start, end; 
  int class_size;
  int temp;
  int j,k;

  // algorithm
  // for each class
  //   if forall in the same class reverse_sorted, 
  //     { sort again; goto next class }
  //   else
  //     {
  //       nexted = TRUE;
  //       for (j from l to r)
  // 	       if (for all j+ are reversed sorted)
  // 	         {
  // 	           swap j, j+1
  // 	           sort all j+ again
  // 	           break;
  // 	         }
  //     }
if (!nexted) return FALSE;
  return TRUE;
}

/********************
 Symmetry Class
 ********************/
class SymmetryClass
{
  PermSet Perm;
  bool BestInitialized;
  state BestPermutedState;

  // utilities
  void SetBestResult(int i, state* temp);
  void ResetBestResult() {BestInitialized = FALSE;};

public:
  // initializer
  SymmetryClass() : Perm(), BestInitialized(FALSE) {};
  ~SymmetryClass() {};

  void Normalize(state* s);

  void Exhaustive_Fast_Canonicalize(state *s);
  void Heuristic_Fast_Canonicalize(state *s);
  void Heuristic_Small_Mem_Canonicalize(state *s);
  void Heuristic_Fast_Normalize(state *s);

  void MultisetSort(state* s);
};


/********************
 Symmetry Class Members
 ********************/
void SymmetryClass::MultisetSort(state* s)
{
        mu_self.MultisetSort();
        mu_guard_failed.MultisetSort();
}
void SymmetryClass::Normalize(state* s)
{
  switch (args->sym_alg.mode) {
  case argsym_alg::Exhaustive_Fast_Canonicalize:
    Exhaustive_Fast_Canonicalize(s);
    break;
  case argsym_alg::Heuristic_Fast_Canonicalize:
    Heuristic_Fast_Canonicalize(s);
    break;
  case argsym_alg::Heuristic_Small_Mem_Canonicalize:
    Heuristic_Small_Mem_Canonicalize(s);
    break;
  case argsym_alg::Heuristic_Fast_Normalize:
    Heuristic_Fast_Normalize(s);
    break;
  default:
    Heuristic_Fast_Canonicalize(s);
  }
}

/********************
 Permute and Canonicalize function for different types
 ********************/
void mu_1_SOTUPIAgents::Permute(PermSet& Perm, int i) {};
void mu_1_SOTUPIAgents::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_SOTUPIAgents::Canonicalize(PermSet& Perm) {};
void mu_1_SOTUPIAgents::SimpleLimit(PermSet& Perm) {};
void mu_1_SOTUPIAgents::ArrayLimit(PermSet& Perm) {};
void mu_1_SOTUPIAgents::Limit(PermSet& Perm) {};
void mu_1_SOTUPIAgents::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_UPIAgents::Permute(PermSet& Perm, int i) {};
void mu_1_UPIAgents::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_UPIAgents::Canonicalize(PermSet& Perm) {};
void mu_1_UPIAgents::SimpleLimit(PermSet& Perm) {};
void mu_1_UPIAgents::ArrayLimit(PermSet& Perm) {};
void mu_1_UPIAgents::Limit(PermSet& Perm) {};
void mu_1_UPIAgents::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_SOTIDICAgents::Permute(PermSet& Perm, int i) {};
void mu_1_SOTIDICAgents::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_SOTIDICAgents::Canonicalize(PermSet& Perm) {};
void mu_1_SOTIDICAgents::SimpleLimit(PermSet& Perm) {};
void mu_1_SOTIDICAgents::ArrayLimit(PermSet& Perm) {};
void mu_1_SOTIDICAgents::Limit(PermSet& Perm) {};
void mu_1_SOTIDICAgents::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_IDICAgents::Permute(PermSet& Perm, int i) {};
void mu_1_IDICAgents::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_IDICAgents::Canonicalize(PermSet& Perm) {};
void mu_1_IDICAgents::SimpleLimit(PermSet& Perm) {};
void mu_1_IDICAgents::ArrayLimit(PermSet& Perm) {};
void mu_1_IDICAgents::Limit(PermSet& Perm) {};
void mu_1_IDICAgents::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Agents::Permute(PermSet& Perm, int i) {};
void mu_1_Agents::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Agents::Canonicalize(PermSet& Perm) {};
void mu_1_Agents::SimpleLimit(PermSet& Perm) {};
void mu_1_Agents::ArrayLimit(PermSet& Perm) {};
void mu_1_Agents::Limit(PermSet& Perm) {};
void mu_1_Agents::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Agent_countp1::Permute(PermSet& Perm, int i) {};
void mu_1_Agent_countp1::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Agent_countp1::Canonicalize(PermSet& Perm) {};
void mu_1_Agent_countp1::SimpleLimit(PermSet& Perm) {};
void mu_1_Agent_countp1::ArrayLimit(PermSet& Perm) {};
void mu_1_Agent_countp1::Limit(PermSet& Perm) {};
void mu_1_Agent_countp1::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_SOTFTSUPIAgents::Permute(PermSet& Perm, int i) {};
void mu_1_SOTFTSUPIAgents::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_SOTFTSUPIAgents::Canonicalize(PermSet& Perm) {};
void mu_1_SOTFTSUPIAgents::SimpleLimit(PermSet& Perm) {};
void mu_1_SOTFTSUPIAgents::ArrayLimit(PermSet& Perm) {};
void mu_1_SOTFTSUPIAgents::Limit(PermSet& Perm) {};
void mu_1_SOTFTSUPIAgents::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_SOTFTSIDICAgents::Permute(PermSet& Perm, int i) {};
void mu_1_SOTFTSIDICAgents::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_SOTFTSIDICAgents::Canonicalize(PermSet& Perm) {};
void mu_1_SOTFTSIDICAgents::SimpleLimit(PermSet& Perm) {};
void mu_1_SOTFTSIDICAgents::ArrayLimit(PermSet& Perm) {};
void mu_1_SOTFTSIDICAgents::Limit(PermSet& Perm) {};
void mu_1_SOTFTSIDICAgents::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_RTID::Permute(PermSet& Perm, int i) {};
void mu_1_RTID::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_RTID::Canonicalize(PermSet& Perm) {};
void mu_1_RTID::SimpleLimit(PermSet& Perm) {};
void mu_1_RTID::ArrayLimit(PermSet& Perm) {};
void mu_1_RTID::Limit(PermSet& Perm) {};
void mu_1_RTID::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_HTID::Permute(PermSet& Perm, int i) {};
void mu_1_HTID::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_HTID::Canonicalize(PermSet& Perm) {};
void mu_1_HTID::SimpleLimit(PermSet& Perm) {};
void mu_1_HTID::ArrayLimit(PermSet& Perm) {};
void mu_1_HTID::Limit(PermSet& Perm) {};
void mu_1_HTID::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Address::Permute(PermSet& Perm, int i) {};
void mu_1_Address::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Address::Canonicalize(PermSet& Perm) {};
void mu_1_Address::SimpleLimit(PermSet& Perm) {};
void mu_1_Address::ArrayLimit(PermSet& Perm) {};
void mu_1_Address::Limit(PermSet& Perm) {};
void mu_1_Address::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_MonitorSize::Permute(PermSet& Perm, int i) {};
void mu_1_MonitorSize::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MonitorSize::Canonicalize(PermSet& Perm) {};
void mu_1_MonitorSize::SimpleLimit(PermSet& Perm) {};
void mu_1_MonitorSize::ArrayLimit(PermSet& Perm) {};
void mu_1_MonitorSize::Limit(PermSet& Perm) {};
void mu_1_MonitorSize::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Word::Permute(PermSet& Perm, int i) {};
void mu_1_Word::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Word::Canonicalize(PermSet& Perm) {};
void mu_1_Word::SimpleLimit(PermSet& Perm) {};
void mu_1_Word::ArrayLimit(PermSet& Perm) {};
void mu_1_Word::Limit(PermSet& Perm) {};
void mu_1_Word::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Data::Permute(PermSet& Perm, int i) {};
void mu_1_Data::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Data::Canonicalize(PermSet& Perm) {};
void mu_1_Data::SimpleLimit(PermSet& Perm) {};
void mu_1_Data::ArrayLimit(PermSet& Perm) {};
void mu_1_Data::Limit(PermSet& Perm) {};
void mu_1_Data::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Line::Permute(PermSet& Perm, int i)
{
  static mu_1_Line temp("Permute_mu_1_Line",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1_Line::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1_Line::Canonicalize(PermSet& Perm){};
void mu_1_Line::SimpleLimit(PermSet& Perm){}
void mu_1_Line::ArrayLimit(PermSet& Perm) {}
void mu_1_Line::Limit(PermSet& Perm){}
void mu_1_Line::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_BE::Permute(PermSet& Perm, int i)
{
  static mu_1_BE temp("Permute_mu_1_BE",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1_BE::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1_BE::Canonicalize(PermSet& Perm){};
void mu_1_BE::SimpleLimit(PermSet& Perm){}
void mu_1_BE::ArrayLimit(PermSet& Perm) {}
void mu_1_BE::Limit(PermSet& Perm){}
void mu_1_BE::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_Snoopq_sz::Permute(PermSet& Perm, int i) {};
void mu_1_Snoopq_sz::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Snoopq_sz::Canonicalize(PermSet& Perm) {};
void mu_1_Snoopq_sz::SimpleLimit(PermSet& Perm) {};
void mu_1_Snoopq_sz::ArrayLimit(PermSet& Perm) {};
void mu_1_Snoopq_sz::Limit(PermSet& Perm) {};
void mu_1_Snoopq_sz::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_CHANNEL_SIZE::Permute(PermSet& Perm, int i) {};
void mu_1_CHANNEL_SIZE::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_CHANNEL_SIZE::Canonicalize(PermSet& Perm) {};
void mu_1_CHANNEL_SIZE::SimpleLimit(PermSet& Perm) {};
void mu_1_CHANNEL_SIZE::ArrayLimit(PermSet& Perm) {};
void mu_1_CHANNEL_SIZE::Limit(PermSet& Perm) {};
void mu_1_CHANNEL_SIZE::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_MEM_TXNID::Permute(PermSet& Perm, int i) {};
void mu_1_MEM_TXNID::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MEM_TXNID::Canonicalize(PermSet& Perm) {};
void mu_1_MEM_TXNID::SimpleLimit(PermSet& Perm) {};
void mu_1_MEM_TXNID::ArrayLimit(PermSet& Perm) {};
void mu_1_MEM_TXNID::Limit(PermSet& Perm) {};
void mu_1_MEM_TXNID::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_MEM_TORID::Permute(PermSet& Perm, int i) {};
void mu_1_MEM_TORID::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MEM_TORID::Canonicalize(PermSet& Perm) {};
void mu_1_MEM_TORID::SimpleLimit(PermSet& Perm) {};
void mu_1_MEM_TORID::ArrayLimit(PermSet& Perm) {};
void mu_1_MEM_TORID::Limit(PermSet& Perm) {};
void mu_1_MEM_TORID::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_MEM_TORIDp1::Permute(PermSet& Perm, int i) {};
void mu_1_MEM_TORIDp1::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MEM_TORIDp1::Canonicalize(PermSet& Perm) {};
void mu_1_MEM_TORIDp1::SimpleLimit(PermSet& Perm) {};
void mu_1_MEM_TORIDp1::ArrayLimit(PermSet& Perm) {};
void mu_1_MEM_TORIDp1::Limit(PermSet& Perm) {};
void mu_1_MEM_TORIDp1::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_IFASize::Permute(PermSet& Perm, int i) {};
void mu_1_IFASize::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_IFASize::Canonicalize(PermSet& Perm) {};
void mu_1_IFASize::SimpleLimit(PermSet& Perm) {};
void mu_1_IFASize::ArrayLimit(PermSet& Perm) {};
void mu_1_IFASize::Limit(PermSet& Perm) {};
void mu_1_IFASize::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_MFS_WAYS::Permute(PermSet& Perm, int i) {};
void mu_1_MFS_WAYS::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MFS_WAYS::Canonicalize(PermSet& Perm) {};
void mu_1_MFS_WAYS::SimpleLimit(PermSet& Perm) {};
void mu_1_MFS_WAYS::ArrayLimit(PermSet& Perm) {};
void mu_1_MFS_WAYS::Limit(PermSet& Perm) {};
void mu_1_MFS_WAYS::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_SF_WAYS::Permute(PermSet& Perm, int i) {};
void mu_1_SF_WAYS::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_SF_WAYS::Canonicalize(PermSet& Perm) {};
void mu_1_SF_WAYS::SimpleLimit(PermSet& Perm) {};
void mu_1_SF_WAYS::ArrayLimit(PermSet& Perm) {};
void mu_1_SF_WAYS::Limit(PermSet& Perm) {};
void mu_1_SF_WAYS::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Protocol::Permute(PermSet& Perm, int i) {};
void mu_1_Protocol::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Protocol::Canonicalize(PermSet& Perm) {};
void mu_1_Protocol::SimpleLimit(PermSet& Perm) {};
void mu_1_Protocol::ArrayLimit(PermSet& Perm) {};
void mu_1_Protocol::Limit(PermSet& Perm) {};
void mu_1_Protocol::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_IDI_Opcode::Permute(PermSet& Perm, int i) {};
void mu_1_IDI_Opcode::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_IDI_Opcode::Canonicalize(PermSet& Perm) {};
void mu_1_IDI_Opcode::SimpleLimit(PermSet& Perm) {};
void mu_1_IDI_Opcode::ArrayLimit(PermSet& Perm) {};
void mu_1_IDI_Opcode::Limit(PermSet& Perm) {};
void mu_1_IDI_Opcode::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_Coh_Op::Permute(PermSet& Perm, int i) {};
void mu_1_Coh_Op::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Coh_Op::Canonicalize(PermSet& Perm) {};
void mu_1_Coh_Op::SimpleLimit(PermSet& Perm) {};
void mu_1_Coh_Op::ArrayLimit(PermSet& Perm) {};
void mu_1_Coh_Op::Limit(PermSet& Perm) {};
void mu_1_Coh_Op::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_UPI_Opcode::Permute(PermSet& Perm, int i) {};
void mu_1_UPI_Opcode::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_UPI_Opcode::Canonicalize(PermSet& Perm) {};
void mu_1_UPI_Opcode::SimpleLimit(PermSet& Perm) {};
void mu_1_UPI_Opcode::ArrayLimit(PermSet& Perm) {};
void mu_1_UPI_Opcode::Limit(PermSet& Perm) {};
void mu_1_UPI_Opcode::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_Mem_Op::Permute(PermSet& Perm, int i) {};
void mu_1_Mem_Op::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Mem_Op::Canonicalize(PermSet& Perm) {};
void mu_1_Mem_Op::SimpleLimit(PermSet& Perm) {};
void mu_1_Mem_Op::ArrayLimit(PermSet& Perm) {};
void mu_1_Mem_Op::Limit(PermSet& Perm) {};
void mu_1_Mem_Op::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_CacheState::Permute(PermSet& Perm, int i) {};
void mu_1_CacheState::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_CacheState::Canonicalize(PermSet& Perm) {};
void mu_1_CacheState::SimpleLimit(PermSet& Perm) {};
void mu_1_CacheState::ArrayLimit(PermSet& Perm) {};
void mu_1_CacheState::Limit(PermSet& Perm) {};
void mu_1_CacheState::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_MFSState::Permute(PermSet& Perm, int i) {};
void mu_1_MFSState::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MFSState::Canonicalize(PermSet& Perm) {};
void mu_1_MFSState::SimpleLimit(PermSet& Perm) {};
void mu_1_MFSState::ArrayLimit(PermSet& Perm) {};
void mu_1_MFSState::Limit(PermSet& Perm) {};
void mu_1_MFSState::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_Resp_Op::Permute(PermSet& Perm, int i) {};
void mu_1_Resp_Op::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Resp_Op::Canonicalize(PermSet& Perm) {};
void mu_1_Resp_Op::SimpleLimit(PermSet& Perm) {};
void mu_1_Resp_Op::ArrayLimit(PermSet& Perm) {};
void mu_1_Resp_Op::Limit(PermSet& Perm) {};
void mu_1_Resp_Op::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_CXM_Opcode::Permute(PermSet& Perm, int i) {};
void mu_1_CXM_Opcode::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_CXM_Opcode::Canonicalize(PermSet& Perm) {};
void mu_1_CXM_Opcode::SimpleLimit(PermSet& Perm) {};
void mu_1_CXM_Opcode::ArrayLimit(PermSet& Perm) {};
void mu_1_CXM_Opcode::Limit(PermSet& Perm) {};
void mu_1_CXM_Opcode::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_TSTATE::Permute(PermSet& Perm, int i) {};
void mu_1_TSTATE::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_TSTATE::Canonicalize(PermSet& Perm) {};
void mu_1_TSTATE::SimpleLimit(PermSet& Perm) {};
void mu_1_TSTATE::ArrayLimit(PermSet& Perm) {};
void mu_1_TSTATE::Limit(PermSet& Perm) {};
void mu_1_TSTATE::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_CA_type::Permute(PermSet& Perm, int i) {};
void mu_1_CA_type::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_CA_type::Canonicalize(PermSet& Perm) {};
void mu_1_CA_type::SimpleLimit(PermSet& Perm) {};
void mu_1_CA_type::ArrayLimit(PermSet& Perm) {};
void mu_1_CA_type::Limit(PermSet& Perm) {};
void mu_1_CA_type::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_Domain::Permute(PermSet& Perm, int i) {};
void mu_1_Domain::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Domain::Canonicalize(PermSet& Perm) {};
void mu_1_Domain::SimpleLimit(PermSet& Perm) {};
void mu_1_Domain::ArrayLimit(PermSet& Perm) {};
void mu_1_Domain::Limit(PermSet& Perm) {};
void mu_1_Domain::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_MFSMode::Permute(PermSet& Perm, int i) {};
void mu_1_MFSMode::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MFSMode::Canonicalize(PermSet& Perm) {};
void mu_1_MFSMode::SimpleLimit(PermSet& Perm) {};
void mu_1_MFSMode::ArrayLimit(PermSet& Perm) {};
void mu_1_MFSMode::Limit(PermSet& Perm) {};
void mu_1_MFSMode::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_FOrDDataState::Permute(PermSet& Perm, int i) {};
void mu_1_FOrDDataState::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_FOrDDataState::Canonicalize(PermSet& Perm) {};
void mu_1_FOrDDataState::SimpleLimit(PermSet& Perm) {};
void mu_1_FOrDDataState::ArrayLimit(PermSet& Perm) {};
void mu_1_FOrDDataState::Limit(PermSet& Perm) {};
void mu_1_FOrDDataState::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_RTID_STATE::Permute(PermSet& Perm, int i) {};
void mu_1_RTID_STATE::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_RTID_STATE::Canonicalize(PermSet& Perm) {};
void mu_1_RTID_STATE::SimpleLimit(PermSet& Perm) {};
void mu_1_RTID_STATE::ArrayLimit(PermSet& Perm) {};
void mu_1_RTID_STATE::Limit(PermSet& Perm) {};
void mu_1_RTID_STATE::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_CacheOp::Permute(PermSet& Perm, int i) {};
void mu_1_CacheOp::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_CacheOp::Canonicalize(PermSet& Perm) {};
void mu_1_CacheOp::SimpleLimit(PermSet& Perm) {};
void mu_1_CacheOp::ArrayLimit(PermSet& Perm) {};
void mu_1_CacheOp::Limit(PermSet& Perm) {};
void mu_1_CacheOp::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_SRB_STATE::Permute(PermSet& Perm, int i) {};
void mu_1_SRB_STATE::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_SRB_STATE::Canonicalize(PermSet& Perm) {};
void mu_1_SRB_STATE::SimpleLimit(PermSet& Perm) {};
void mu_1_SRB_STATE::ArrayLimit(PermSet& Perm) {};
void mu_1_SRB_STATE::Limit(PermSet& Perm) {};
void mu_1_SRB_STATE::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1__type_0::Permute(PermSet& Perm, int i)
{
  static mu_1__type_0 temp("Permute_mu_1__type_0",-1);
  int j;
  for (j=0; j<2; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_0::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_0::Canonicalize(PermSet& Perm){};
void mu_1__type_0::SimpleLimit(PermSet& Perm){}
void mu_1__type_0::ArrayLimit(PermSet& Perm) {}
void mu_1__type_0::Limit(PermSet& Perm){}
void mu_1__type_0::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_1::Permute(PermSet& Perm, int i)
{
  static mu_1__type_1 temp("Permute_mu_1__type_1",-1);
  int j;
  for (j=0; j<2; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_1::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_1::Canonicalize(PermSet& Perm){};
void mu_1__type_1::SimpleLimit(PermSet& Perm){}
void mu_1__type_1::ArrayLimit(PermSet& Perm) {}
void mu_1__type_1::Limit(PermSet& Perm){}
void mu_1__type_1::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_SFEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_SFEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_SFEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_SFEntry::SimpleLimit(PermSet& Perm){}
void mu_1_SFEntry::ArrayLimit(PermSet& Perm){}
void mu_1_SFEntry::Limit(PermSet& Perm)
{
};
void mu_1_SFEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1__type_2::Permute(PermSet& Perm, int i)
{
  static mu_1__type_2 temp("Permute_mu_1__type_2",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_2::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_2::Canonicalize(PermSet& Perm){};
void mu_1__type_2::SimpleLimit(PermSet& Perm){}
void mu_1__type_2::ArrayLimit(PermSet& Perm) {}
void mu_1__type_2::Limit(PermSet& Perm){}
void mu_1__type_2::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_3::Permute(PermSet& Perm, int i)
{
  static mu_1__type_3 temp("Permute_mu_1__type_3",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_3::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_3::Canonicalize(PermSet& Perm){};
void mu_1__type_3::SimpleLimit(PermSet& Perm){}
void mu_1__type_3::ArrayLimit(PermSet& Perm) {}
void mu_1__type_3::Limit(PermSet& Perm){}
void mu_1__type_3::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_4::Permute(PermSet& Perm, int i)
{
  static mu_1__type_4 temp("Permute_mu_1__type_4",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_4::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_4::Canonicalize(PermSet& Perm){};
void mu_1__type_4::SimpleLimit(PermSet& Perm){}
void mu_1__type_4::ArrayLimit(PermSet& Perm) {}
void mu_1__type_4::Limit(PermSet& Perm){}
void mu_1__type_4::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_5::Permute(PermSet& Perm, int i)
{
  static mu_1__type_5 temp("Permute_mu_1__type_5",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_5::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_5::Canonicalize(PermSet& Perm){};
void mu_1__type_5::SimpleLimit(PermSet& Perm){}
void mu_1__type_5::ArrayLimit(PermSet& Perm) {}
void mu_1__type_5::Limit(PermSet& Perm){}
void mu_1__type_5::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_6::Permute(PermSet& Perm, int i)
{
  static mu_1__type_6 temp("Permute_mu_1__type_6",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_6::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_6::Canonicalize(PermSet& Perm){};
void mu_1__type_6::SimpleLimit(PermSet& Perm){}
void mu_1__type_6::ArrayLimit(PermSet& Perm) {}
void mu_1__type_6::Limit(PermSet& Perm){}
void mu_1__type_6::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_7::Permute(PermSet& Perm, int i)
{
  static mu_1__type_7 temp("Permute_mu_1__type_7",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_7::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_7::Canonicalize(PermSet& Perm){};
void mu_1__type_7::SimpleLimit(PermSet& Perm){}
void mu_1__type_7::ArrayLimit(PermSet& Perm) {}
void mu_1__type_7::Limit(PermSet& Perm){}
void mu_1__type_7::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_TractorEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_TractorEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_TractorEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_TractorEntry::SimpleLimit(PermSet& Perm){}
void mu_1_TractorEntry::ArrayLimit(PermSet& Perm){}
void mu_1_TractorEntry::Limit(PermSet& Perm)
{
};
void mu_1_TractorEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_UPIPacket::Permute(PermSet& Perm, int i)
{
};
void mu_1_UPIPacket::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_UPIPacket::Canonicalize(PermSet& Perm)
{
};
void mu_1_UPIPacket::SimpleLimit(PermSet& Perm){}
void mu_1_UPIPacket::ArrayLimit(PermSet& Perm){}
void mu_1_UPIPacket::Limit(PermSet& Perm)
{
};
void mu_1_UPIPacket::MultisetLimit(PermSet& Perm)
{
};
void mu_1_IDIPacket::Permute(PermSet& Perm, int i)
{
};
void mu_1_IDIPacket::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_IDIPacket::Canonicalize(PermSet& Perm)
{
};
void mu_1_IDIPacket::SimpleLimit(PermSet& Perm){}
void mu_1_IDIPacket::ArrayLimit(PermSet& Perm){}
void mu_1_IDIPacket::Limit(PermSet& Perm)
{
};
void mu_1_IDIPacket::MultisetLimit(PermSet& Perm)
{
};
void mu_1_AgentPacket::Permute(PermSet& Perm, int i)
{
};
void mu_1_AgentPacket::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_AgentPacket::Canonicalize(PermSet& Perm)
{
};
void mu_1_AgentPacket::SimpleLimit(PermSet& Perm){}
void mu_1_AgentPacket::ArrayLimit(PermSet& Perm){}
void mu_1_AgentPacket::Limit(PermSet& Perm)
{
};
void mu_1_AgentPacket::MultisetLimit(PermSet& Perm)
{
};
void mu_1_LinkedList::Permute(PermSet& Perm, int i)
{
};
void mu_1_LinkedList::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_LinkedList::Canonicalize(PermSet& Perm)
{
};
void mu_1_LinkedList::SimpleLimit(PermSet& Perm){}
void mu_1_LinkedList::ArrayLimit(PermSet& Perm){}
void mu_1_LinkedList::Limit(PermSet& Perm)
{
};
void mu_1_LinkedList::MultisetLimit(PermSet& Perm)
{
};
void mu_1_CXMPacket::Permute(PermSet& Perm, int i)
{
};
void mu_1_CXMPacket::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_CXMPacket::Canonicalize(PermSet& Perm)
{
};
void mu_1_CXMPacket::SimpleLimit(PermSet& Perm){}
void mu_1_CXMPacket::ArrayLimit(PermSet& Perm){}
void mu_1_CXMPacket::Limit(PermSet& Perm)
{
};
void mu_1_CXMPacket::MultisetLimit(PermSet& Perm)
{
};
void mu_1_MemTOREntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_MemTOREntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_MemTOREntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_MemTOREntry::SimpleLimit(PermSet& Perm){}
void mu_1_MemTOREntry::ArrayLimit(PermSet& Perm){}
void mu_1_MemTOREntry::Limit(PermSet& Perm)
{
};
void mu_1_MemTOREntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_MFSEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_MFSEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_MFSEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_MFSEntry::SimpleLimit(PermSet& Perm){}
void mu_1_MFSEntry::ArrayLimit(PermSet& Perm){}
void mu_1_MFSEntry::Limit(PermSet& Perm)
{
};
void mu_1_MFSEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_MonitorEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_MonitorEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_MonitorEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_MonitorEntry::SimpleLimit(PermSet& Perm){}
void mu_1_MonitorEntry::ArrayLimit(PermSet& Perm){}
void mu_1_MonitorEntry::Limit(PermSet& Perm)
{
};
void mu_1_MonitorEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_IFAEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_IFAEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_IFAEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_IFAEntry::SimpleLimit(PermSet& Perm){}
void mu_1_IFAEntry::ArrayLimit(PermSet& Perm){}
void mu_1_IFAEntry::Limit(PermSet& Perm)
{
};
void mu_1_IFAEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1__type_8::Permute(PermSet& Perm, int i)
{
  static mu_1__type_8 temp("Permute_mu_1__type_8",-1);
  int j;
  for (j=0; j<2; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_8::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_8::Canonicalize(PermSet& Perm){};
void mu_1__type_8::SimpleLimit(PermSet& Perm){}
void mu_1__type_8::ArrayLimit(PermSet& Perm) {}
void mu_1__type_8::Limit(PermSet& Perm){}
void mu_1__type_8::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_9::Permute(PermSet& Perm, int i)
{
  static mu_1__type_9 temp("Permute_mu_1__type_9",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_9::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_9::Canonicalize(PermSet& Perm){};
void mu_1__type_9::SimpleLimit(PermSet& Perm){}
void mu_1__type_9::ArrayLimit(PermSet& Perm) {}
void mu_1__type_9::Limit(PermSet& Perm){}
void mu_1__type_9::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_10::Permute(PermSet& Perm, int i)
{
  static mu_1__type_10 temp("Permute_mu_1__type_10",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_10::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_10::Canonicalize(PermSet& Perm){};
void mu_1__type_10::SimpleLimit(PermSet& Perm){}
void mu_1__type_10::ArrayLimit(PermSet& Perm) {}
void mu_1__type_10::Limit(PermSet& Perm){}
void mu_1__type_10::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_11::Permute(PermSet& Perm, int i)
{
  static mu_1__type_11 temp("Permute_mu_1__type_11",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_11::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_11::Canonicalize(PermSet& Perm){};
void mu_1__type_11::SimpleLimit(PermSet& Perm){}
void mu_1__type_11::ArrayLimit(PermSet& Perm) {}
void mu_1__type_11::Limit(PermSet& Perm){}
void mu_1__type_11::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_12::Permute(PermSet& Perm, int i)
{
  static mu_1__type_12 temp("Permute_mu_1__type_12",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_12::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_12::Canonicalize(PermSet& Perm){};
void mu_1__type_12::SimpleLimit(PermSet& Perm){}
void mu_1__type_12::ArrayLimit(PermSet& Perm) {}
void mu_1__type_12::Limit(PermSet& Perm){}
void mu_1__type_12::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_13::Permute(PermSet& Perm, int i)
{
  static mu_1__type_13 temp("Permute_mu_1__type_13",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_13::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_13::Canonicalize(PermSet& Perm){};
void mu_1__type_13::SimpleLimit(PermSet& Perm){}
void mu_1__type_13::ArrayLimit(PermSet& Perm) {}
void mu_1__type_13::Limit(PermSet& Perm){}
void mu_1__type_13::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_14::Permute(PermSet& Perm, int i)
{
  static mu_1__type_14 temp("Permute_mu_1__type_14",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_14::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_14::Canonicalize(PermSet& Perm){};
void mu_1__type_14::SimpleLimit(PermSet& Perm){}
void mu_1__type_14::ArrayLimit(PermSet& Perm) {}
void mu_1__type_14::Limit(PermSet& Perm){}
void mu_1__type_14::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_15::Permute(PermSet& Perm, int i)
{
  static mu_1__type_15 temp("Permute_mu_1__type_15",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_15::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_15::Canonicalize(PermSet& Perm){};
void mu_1__type_15::SimpleLimit(PermSet& Perm){}
void mu_1__type_15::ArrayLimit(PermSet& Perm) {}
void mu_1__type_15::Limit(PermSet& Perm){}
void mu_1__type_15::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_16::Permute(PermSet& Perm, int i)
{
  static mu_1__type_16 temp("Permute_mu_1__type_16",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_16::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_16::Canonicalize(PermSet& Perm){};
void mu_1__type_16::SimpleLimit(PermSet& Perm){}
void mu_1__type_16::ArrayLimit(PermSet& Perm) {}
void mu_1__type_16::Limit(PermSet& Perm){}
void mu_1__type_16::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_17::Permute(PermSet& Perm, int i)
{
  static mu_1__type_17 temp("Permute_mu_1__type_17",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_17::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_17::Canonicalize(PermSet& Perm){};
void mu_1__type_17::SimpleLimit(PermSet& Perm){}
void mu_1__type_17::ArrayLimit(PermSet& Perm) {}
void mu_1__type_17::Limit(PermSet& Perm){}
void mu_1__type_17::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_18::Permute(PermSet& Perm, int i)
{
  static mu_1__type_18 temp("Permute_mu_1__type_18",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_18::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_18::Canonicalize(PermSet& Perm){};
void mu_1__type_18::SimpleLimit(PermSet& Perm){}
void mu_1__type_18::ArrayLimit(PermSet& Perm) {}
void mu_1__type_18::Limit(PermSet& Perm){}
void mu_1__type_18::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_19::Permute(PermSet& Perm, int i)
{
  static mu_1__type_19 temp("Permute_mu_1__type_19",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_19::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_19::Canonicalize(PermSet& Perm){};
void mu_1__type_19::SimpleLimit(PermSet& Perm){}
void mu_1__type_19::ArrayLimit(PermSet& Perm) {}
void mu_1__type_19::Limit(PermSet& Perm){}
void mu_1__type_19::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_20::Permute(PermSet& Perm, int i)
{
  static mu_1__type_20 temp("Permute_mu_1__type_20",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_20::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_20::Canonicalize(PermSet& Perm){};
void mu_1__type_20::SimpleLimit(PermSet& Perm){}
void mu_1__type_20::ArrayLimit(PermSet& Perm) {}
void mu_1__type_20::Limit(PermSet& Perm){}
void mu_1__type_20::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_21::Permute(PermSet& Perm, int i)
{
  static mu_1__type_21 temp("Permute_mu_1__type_21",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_21::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_21::Canonicalize(PermSet& Perm){};
void mu_1__type_21::SimpleLimit(PermSet& Perm){}
void mu_1__type_21::ArrayLimit(PermSet& Perm) {}
void mu_1__type_21::Limit(PermSet& Perm){}
void mu_1__type_21::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_22::Permute(PermSet& Perm, int i)
{
  static mu_1__type_22 temp("Permute_mu_1__type_22",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_22::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_22::Canonicalize(PermSet& Perm){};
void mu_1__type_22::SimpleLimit(PermSet& Perm){}
void mu_1__type_22::ArrayLimit(PermSet& Perm) {}
void mu_1__type_22::Limit(PermSet& Perm){}
void mu_1__type_22::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_23::Permute(PermSet& Perm, int i)
{
  static mu_1__type_23 temp("Permute_mu_1__type_23",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_23::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_23::Canonicalize(PermSet& Perm){};
void mu_1__type_23::SimpleLimit(PermSet& Perm){}
void mu_1__type_23::ArrayLimit(PermSet& Perm) {}
void mu_1__type_23::Limit(PermSet& Perm){}
void mu_1__type_23::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_24::Permute(PermSet& Perm, int i)
{
  static mu_1__type_24 temp("Permute_mu_1__type_24",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_24::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_24::Canonicalize(PermSet& Perm){};
void mu_1__type_24::SimpleLimit(PermSet& Perm){}
void mu_1__type_24::ArrayLimit(PermSet& Perm) {}
void mu_1__type_24::Limit(PermSet& Perm){}
void mu_1__type_24::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_HBo::Permute(PermSet& Perm, int i)
{
};
void mu_1_HBo::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_HBo::Canonicalize(PermSet& Perm)
{
};
void mu_1_HBo::SimpleLimit(PermSet& Perm){}
void mu_1_HBo::ArrayLimit(PermSet& Perm){}
void mu_1_HBo::Limit(PermSet& Perm)
{
};
void mu_1_HBo::MultisetLimit(PermSet& Perm)
{
};
void mu_1_TOREntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_TOREntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_TOREntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_TOREntry::SimpleLimit(PermSet& Perm){}
void mu_1_TOREntry::ArrayLimit(PermSet& Perm){}
void mu_1_TOREntry::Limit(PermSet& Perm)
{
};
void mu_1_TOREntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_CA_SnoopEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_CA_SnoopEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_CA_SnoopEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_CA_SnoopEntry::SimpleLimit(PermSet& Perm){}
void mu_1_CA_SnoopEntry::ArrayLimit(PermSet& Perm){}
void mu_1_CA_SnoopEntry::Limit(PermSet& Perm)
{
};
void mu_1_CA_SnoopEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_CacheEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_CacheEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_CacheEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_CacheEntry::SimpleLimit(PermSet& Perm){}
void mu_1_CacheEntry::ArrayLimit(PermSet& Perm){}
void mu_1_CacheEntry::Limit(PermSet& Perm)
{
};
void mu_1_CacheEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1__type_25::Permute(PermSet& Perm, int i)
{
  static mu_1__type_25 temp("Permute_mu_1__type_25",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_25::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_25::Canonicalize(PermSet& Perm){};
void mu_1__type_25::SimpleLimit(PermSet& Perm){}
void mu_1__type_25::ArrayLimit(PermSet& Perm) {}
void mu_1__type_25::Limit(PermSet& Perm){}
void mu_1__type_25::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_26::Permute(PermSet& Perm, int i)
{
  static mu_1__type_26 temp("Permute_mu_1__type_26",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_26::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_26::Canonicalize(PermSet& Perm){};
void mu_1__type_26::SimpleLimit(PermSet& Perm){}
void mu_1__type_26::ArrayLimit(PermSet& Perm) {}
void mu_1__type_26::Limit(PermSet& Perm){}
void mu_1__type_26::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_27::Permute(PermSet& Perm, int i)
{
  static mu_1__type_27 temp("Permute_mu_1__type_27",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_27::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_27::Canonicalize(PermSet& Perm){};
void mu_1__type_27::SimpleLimit(PermSet& Perm){}
void mu_1__type_27::ArrayLimit(PermSet& Perm) {}
void mu_1__type_27::Limit(PermSet& Perm){}
void mu_1__type_27::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_28::Permute(PermSet& Perm, int i)
{
  static mu_1__type_28 temp("Permute_mu_1__type_28",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_28::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_28::Canonicalize(PermSet& Perm){};
void mu_1__type_28::SimpleLimit(PermSet& Perm){}
void mu_1__type_28::ArrayLimit(PermSet& Perm) {}
void mu_1__type_28::Limit(PermSet& Perm){}
void mu_1__type_28::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_29::Permute(PermSet& Perm, int i)
{
  static mu_1__type_29 temp("Permute_mu_1__type_29",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_29::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_29::Canonicalize(PermSet& Perm){};
void mu_1__type_29::SimpleLimit(PermSet& Perm){}
void mu_1__type_29::ArrayLimit(PermSet& Perm) {}
void mu_1__type_29::Limit(PermSet& Perm){}
void mu_1__type_29::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_30::Permute(PermSet& Perm, int i)
{
  static mu_1__type_30 temp("Permute_mu_1__type_30",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_30::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_30::Canonicalize(PermSet& Perm){};
void mu_1__type_30::SimpleLimit(PermSet& Perm){}
void mu_1__type_30::ArrayLimit(PermSet& Perm) {}
void mu_1__type_30::Limit(PermSet& Perm){}
void mu_1__type_30::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_CA::Permute(PermSet& Perm, int i)
{
};
void mu_1_CA::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_CA::Canonicalize(PermSet& Perm)
{
};
void mu_1_CA::SimpleLimit(PermSet& Perm){}
void mu_1_CA::ArrayLimit(PermSet& Perm){}
void mu_1_CA::Limit(PermSet& Perm)
{
};
void mu_1_CA::MultisetLimit(PermSet& Perm)
{
};
void mu_1_Index__1::Permute(PermSet& Perm, int i) {};
void mu_1_Index__1::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Index__1::Canonicalize(PermSet& Perm) {};
void mu_1_Index__1::SimpleLimit(PermSet& Perm) {};
void mu_1_Index__1::ArrayLimit(PermSet& Perm) {};
void mu_1_Index__1::Limit(PermSet& Perm) {};
void mu_1_Index__1::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Count::Permute(PermSet& Perm, int i) {};
void mu_1_Count::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Count::Canonicalize(PermSet& Perm) {};
void mu_1_Count::SimpleLimit(PermSet& Perm) {};
void mu_1_Count::ArrayLimit(PermSet& Perm) {};
void mu_1_Count::Limit(PermSet& Perm) {};
void mu_1_Count::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Count__1::Permute(PermSet& Perm, int i) {};
void mu_1_Count__1::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_Count__1::Canonicalize(PermSet& Perm) {};
void mu_1_Count__1::SimpleLimit(PermSet& Perm) {};
void mu_1_Count__1::ArrayLimit(PermSet& Perm) {};
void mu_1_Count__1::Limit(PermSet& Perm) {};
void mu_1_Count__1::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1__type_31::Permute(PermSet& Perm, int i)
{
  static mu_1__type_31 temp("Permute_mu_1__type_31",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_31::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_31::Canonicalize(PermSet& Perm){};
void mu_1__type_31::SimpleLimit(PermSet& Perm){}
void mu_1__type_31::ArrayLimit(PermSet& Perm) {}
void mu_1__type_31::Limit(PermSet& Perm){}
void mu_1__type_31::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_UChannel__1::Permute(PermSet& Perm, int i)
{
};
void mu_1_UChannel__1::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_UChannel__1::Canonicalize(PermSet& Perm)
{
};
void mu_1_UChannel__1::SimpleLimit(PermSet& Perm){}
void mu_1_UChannel__1::ArrayLimit(PermSet& Perm){}
void mu_1_UChannel__1::Limit(PermSet& Perm)
{
};
void mu_1_UChannel__1::MultisetLimit(PermSet& Perm)
{
};
void mu_1__type_32::Permute(PermSet& Perm, int i)
{
  static mu_1__type_32 temp("Permute_mu_1__type_32",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_32::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_32::Canonicalize(PermSet& Perm){};
void mu_1__type_32::SimpleLimit(PermSet& Perm){}
void mu_1__type_32::ArrayLimit(PermSet& Perm) {}
void mu_1__type_32::Limit(PermSet& Perm){}
void mu_1__type_32::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_CChannel__1::Permute(PermSet& Perm, int i)
{
};
void mu_1_CChannel__1::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_CChannel__1::Canonicalize(PermSet& Perm)
{
};
void mu_1_CChannel__1::SimpleLimit(PermSet& Perm){}
void mu_1_CChannel__1::ArrayLimit(PermSet& Perm){}
void mu_1_CChannel__1::Limit(PermSet& Perm)
{
};
void mu_1_CChannel__1::MultisetLimit(PermSet& Perm)
{
};
void mu_1_ULink::Permute(PermSet& Perm, int i)
{
};
void mu_1_ULink::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_ULink::Canonicalize(PermSet& Perm)
{
};
void mu_1_ULink::SimpleLimit(PermSet& Perm){}
void mu_1_ULink::ArrayLimit(PermSet& Perm){}
void mu_1_ULink::Limit(PermSet& Perm)
{
};
void mu_1_ULink::MultisetLimit(PermSet& Perm)
{
};
void mu_1_CQEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_CQEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_CQEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_CQEntry::SimpleLimit(PermSet& Perm){}
void mu_1_CQEntry::ArrayLimit(PermSet& Perm){}
void mu_1_CQEntry::Limit(PermSet& Perm)
{
};
void mu_1_CQEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_SnoopEntry::Permute(PermSet& Perm, int i)
{
};
void mu_1_SnoopEntry::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_SnoopEntry::Canonicalize(PermSet& Perm)
{
};
void mu_1_SnoopEntry::SimpleLimit(PermSet& Perm){}
void mu_1_SnoopEntry::ArrayLimit(PermSet& Perm){}
void mu_1_SnoopEntry::Limit(PermSet& Perm)
{
};
void mu_1_SnoopEntry::MultisetLimit(PermSet& Perm)
{
};
void mu_1_range__3::Permute(PermSet& Perm, int i) {};
void mu_1_range__3::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_range__3::Canonicalize(PermSet& Perm) {};
void mu_1_range__3::SimpleLimit(PermSet& Perm) {};
void mu_1_range__3::ArrayLimit(PermSet& Perm) {};
void mu_1_range__3::Limit(PermSet& Perm) {};
void mu_1_range__3::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1__type_33::Permute(PermSet& Perm, int i)
{
  static mu_1__type_33 temp("Permute_mu_1__type_33",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_33::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_33::Canonicalize(PermSet& Perm){};
void mu_1__type_33::SimpleLimit(PermSet& Perm){}
void mu_1__type_33::ArrayLimit(PermSet& Perm) {}
void mu_1__type_33::Limit(PermSet& Perm){}
void mu_1__type_33::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_34::Permute(PermSet& Perm, int i)
{
  static mu_1__type_34 temp("Permute_mu_1__type_34",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_34::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_34::Canonicalize(PermSet& Perm){};
void mu_1__type_34::SimpleLimit(PermSet& Perm){}
void mu_1__type_34::ArrayLimit(PermSet& Perm) {}
void mu_1__type_34::Limit(PermSet& Perm){}
void mu_1__type_34::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_35::Permute(PermSet& Perm, int i)
{
  static mu_1__type_35 temp("Permute_mu_1__type_35",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_35::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_35::Canonicalize(PermSet& Perm){};
void mu_1__type_35::SimpleLimit(PermSet& Perm){}
void mu_1__type_35::ArrayLimit(PermSet& Perm) {}
void mu_1__type_35::Limit(PermSet& Perm){}
void mu_1__type_35::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_36::Permute(PermSet& Perm, int i)
{
  static mu_1__type_36 temp("Permute_mu_1__type_36",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_36::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_36::Canonicalize(PermSet& Perm){};
void mu_1__type_36::SimpleLimit(PermSet& Perm){}
void mu_1__type_36::ArrayLimit(PermSet& Perm) {}
void mu_1__type_36::Limit(PermSet& Perm){}
void mu_1__type_36::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_IDIAgent::Permute(PermSet& Perm, int i)
{
};
void mu_1_IDIAgent::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_IDIAgent::Canonicalize(PermSet& Perm)
{
};
void mu_1_IDIAgent::SimpleLimit(PermSet& Perm){}
void mu_1_IDIAgent::ArrayLimit(PermSet& Perm){}
void mu_1_IDIAgent::Limit(PermSet& Perm)
{
};
void mu_1_IDIAgent::MultisetLimit(PermSet& Perm)
{
};
void mu_1__type_37::Permute(PermSet& Perm, int i)
{
  static mu_1__type_37 temp("Permute_mu_1__type_37",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_37::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_37::Canonicalize(PermSet& Perm){};
void mu_1__type_37::SimpleLimit(PermSet& Perm){}
void mu_1__type_37::ArrayLimit(PermSet& Perm) {}
void mu_1__type_37::Limit(PermSet& Perm){}
void mu_1__type_37::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_Channel__1::Permute(PermSet& Perm, int i)
{
};
void mu_1_Channel__1::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_Channel__1::Canonicalize(PermSet& Perm)
{
};
void mu_1_Channel__1::SimpleLimit(PermSet& Perm){}
void mu_1_Channel__1::ArrayLimit(PermSet& Perm){}
void mu_1_Channel__1::Limit(PermSet& Perm)
{
};
void mu_1_Channel__1::MultisetLimit(PermSet& Perm)
{
};
void mu_1_Link::Permute(PermSet& Perm, int i)
{
};
void mu_1_Link::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_Link::Canonicalize(PermSet& Perm)
{
};
void mu_1_Link::SimpleLimit(PermSet& Perm){}
void mu_1_Link::ArrayLimit(PermSet& Perm){}
void mu_1_Link::Limit(PermSet& Perm)
{
};
void mu_1_Link::MultisetLimit(PermSet& Perm)
{
};
void mu_1__type_38::Permute(PermSet& Perm, int i)
{
  static mu_1__type_38 temp("Permute_mu_1__type_38",-1);
  int j;
  for (j=0; j<1; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_38::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_38::Canonicalize(PermSet& Perm){};
void mu_1__type_38::SimpleLimit(PermSet& Perm){}
void mu_1__type_38::ArrayLimit(PermSet& Perm) {}
void mu_1__type_38::Limit(PermSet& Perm){}
void mu_1__type_38::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_Aux::Permute(PermSet& Perm, int i)
{
};
void mu_1_Aux::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_Aux::Canonicalize(PermSet& Perm)
{
};
void mu_1_Aux::SimpleLimit(PermSet& Perm){}
void mu_1_Aux::ArrayLimit(PermSet& Perm){}
void mu_1_Aux::Limit(PermSet& Perm)
{
};
void mu_1_Aux::MultisetLimit(PermSet& Perm)
{
};
void mu_1__type_39::Permute(PermSet& Perm, int i)
{
  static mu_1__type_39 temp("Permute_mu_1__type_39",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_39::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_39::Canonicalize(PermSet& Perm){};
void mu_1__type_39::SimpleLimit(PermSet& Perm){}
void mu_1__type_39::ArrayLimit(PermSet& Perm) {}
void mu_1__type_39::Limit(PermSet& Perm){}
void mu_1__type_39::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_40::Permute(PermSet& Perm, int i)
{
  static mu_1__type_40 temp("Permute_mu_1__type_40",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_40::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_40::Canonicalize(PermSet& Perm){};
void mu_1__type_40::SimpleLimit(PermSet& Perm){}
void mu_1__type_40::ArrayLimit(PermSet& Perm) {}
void mu_1__type_40::Limit(PermSet& Perm){}
void mu_1__type_40::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_41::Permute(PermSet& Perm, int i)
{
  static mu_1__type_41 temp("Permute_mu_1__type_41",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_41::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_41::Canonicalize(PermSet& Perm){};
void mu_1__type_41::SimpleLimit(PermSet& Perm){}
void mu_1__type_41::ArrayLimit(PermSet& Perm) {}
void mu_1__type_41::Limit(PermSet& Perm){}
void mu_1__type_41::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_42::Permute(PermSet& Perm, int i)
{
  static mu_1__type_42 temp("Permute_mu_1__type_42",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_42::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_42::Canonicalize(PermSet& Perm){};
void mu_1__type_42::SimpleLimit(PermSet& Perm){}
void mu_1__type_42::ArrayLimit(PermSet& Perm) {}
void mu_1__type_42::Limit(PermSet& Perm){}
void mu_1__type_42::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1_State::Permute(PermSet& Perm, int i)
{
};
void mu_1_State::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_State::Canonicalize(PermSet& Perm)
{
};
void mu_1_State::SimpleLimit(PermSet& Perm){}
void mu_1_State::ArrayLimit(PermSet& Perm){}
void mu_1_State::Limit(PermSet& Perm)
{
};
void mu_1_State::MultisetLimit(PermSet& Perm)
{
};

/********************
 Auxiliary function for error trace printing
 ********************/
bool match(state* ns, StatePtr p)
{
  int i;
  static PermSet Perm;
  static state temp;
  StateCopy(&temp, ns);
  if (args->symmetry_reduction.value)
    {
      if (  args->sym_alg.mode == argsym_alg::Exhaustive_Fast_Canonicalize) {
        Perm.ResetToExplicit();
        for (i=0; i<Perm.count; i++)
          if (Perm.In(i))
            {
              if (ns != workingstate)
                  StateCopy(workingstate, ns);
              
              mu_self.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_self.MultisetSort();
              mu_guard_failed.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_guard_failed.MultisetSort();
            if (p.compare(workingstate)) {
              StateCopy(workingstate,&temp); return TRUE; }
          }
        StateCopy(workingstate,&temp);
        return FALSE;
      }
      else {
        Perm.ResetToSimple();
        Perm.SimpleToOne();
        if (ns != workingstate)
          StateCopy(workingstate, ns);

          mu_self.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_self.MultisetSort();
          mu_guard_failed.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_guard_failed.MultisetSort();
        if (p.compare(workingstate)) {
          StateCopy(workingstate,&temp); return TRUE; }

        while (Perm.NextPermutation())
          {
            if (ns != workingstate)
              StateCopy(workingstate, ns);
              
              mu_self.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_self.MultisetSort();
              mu_guard_failed.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_guard_failed.MultisetSort();
            if (p.compare(workingstate)) {
              StateCopy(workingstate,&temp); return TRUE; }
          }
        StateCopy(workingstate,&temp);
        return FALSE;
      }
    }
  if (!args->symmetry_reduction.value
      && args->multiset_reduction.value)
    {
      if (ns != workingstate)
          StateCopy(workingstate, ns);
      mu_self.MultisetSort();
      mu_guard_failed.MultisetSort();
      if (p.compare(workingstate)) {
        StateCopy(workingstate,&temp); return TRUE; }
      StateCopy(workingstate,&temp);
      return FALSE;
    }
  return (p.compare(ns));
}

/********************
 Canonicalization by fast exhaustive generation of
 all permutations
 ********************/
void SymmetryClass::Exhaustive_Fast_Canonicalize(state* s)
{
  int i;
  static state temp;
  Perm.ResetToExplicit();

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_self.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_self.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_guard_failed.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_guard_failed.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

};

/********************
 Canonicalization by fast simple variable canonicalization,
 fast simple scalarset array canonicalization,
 fast restriction on permutation set with simple scalarset array of scalarset,
 and fast exhaustive generation of
 all permutations for other variables
 ********************/
void SymmetryClass::Heuristic_Fast_Canonicalize(state* s)
{
  int i;
  static state temp;

  Perm.ResetToSimple();

};

/********************
 Canonicalization by fast simple variable canonicalization,
 fast simple scalarset array canonicalization,
 fast restriction on permutation set with simple scalarset array of scalarset,
 and fast exhaustive generation of
 all permutations for other variables
 and use less local memory
 ********************/
void SymmetryClass::Heuristic_Small_Mem_Canonicalize(state* s)
{
  unsigned long cycle;
  static state temp;

  Perm.ResetToSimple();

};

/********************
 Normalization by fast simple variable canonicalization,
 fast simple scalarset array canonicalization,
 fast restriction on permutation set with simple scalarset array of scalarset,
 and for all other variables, pick any remaining permutation
 ********************/
void SymmetryClass::Heuristic_Fast_Normalize(state* s)
{
  int i;
  static state temp;

  Perm.ResetToSimple();

};

/********************
  Include
 ********************/
#include "mu_epilog.hpp"
